{"version":3,"sources":["Header/Header.js","Score/Score.js","deckFuncs.js","cardValues.js","Bidding/bidfuncs.js","useFetch.js","Bidding/MakeBid.js","Card.js","Hand.js","Bidding/ViewBid.js","Bidding/SelectSuit.js","Drawing/ViewDraw.js","Play/PlayCard.js","ViewTable.js","Bidding/Bidding.js","scripts.js","Play/PlayerTurn.js","Play/Turn.js","Bidding/BidInfo.js","Play/Play.js","Drawing/Draw.js","Drawing/DrawCpu.js","Drawing/Drawing.js","Play/PlayWinner.js","Round.js","Game.js","Footer/Footer.js","App.js","index.js"],"names":["Header","className","Score","round","gameScore","style","textAlign","deckUrl","setIsPending","setRoundOrder","a","order","getRoundOrder","fetch","drawresponse","json","drawData","hands","hash","cards","console","log","toString","code","val","getNewCards","discardCodes","player","sendDiscardData","sendDiscardPending","discardResponse","length","redrawResponse","redrawData","i","push","assResponse","trumpValues","offSuitValues","heartTrumpOrder","diamondTrumpOrder","spadesTrumpOrder","clubsTrumpOrder","heartOffSuitOrder","diamondOffSuitOrder","spadesOffSuitOrder","clubsOffSuitOrder","evaluateHand","heartHandVal","diamondHandVal","spadeHandVal","clubHandVal","card","getHeartValue","getDiamondValue","getSpadeValue","getClubValue","getCardValue","trump","indexOf","checkBid","bid","bidData","highBid","highBidder","playerBid","bidder","useFetch","url","useState","data","setData","isPending","error","setError","useEffect","abortCont","AbortController","signal","then","res","ok","Error","catch","err","name","message","abort","MakeBid","humanBidder","dealer","sendBid","setPlayerBid","piles","cardCodes","handValues","bidOptions","bestHandVal","sort","b","getBid","isDealer","checkBidOptions","bidChoice","onSubmit","value","onChange","e","target","Card","src","image","alt","width","Hand","ViewBid","SelectSuit","sendTrumpSuit","trumpSuit","setTrumpSuit","orgHandValues","JSON","stringify","parse","getBestSuit","preventDefault","ViewDraw","draw","drawer","PlayCard","ViewTable","stage","players","actions","Bidding","bidOrder","sendBidData","bid1","setBid1","bid2","setBid2","bid3","setBid3","bid4","setBid4","turn","setTurn","setBidData","bids","getPlayerBid","num","getActions","getWorstCard","worstCard","worstCardVal","curCardVal","getBestCard","bestCard","bestCardVal","playerCard","sendPlayerCard","PlayerTurn","sendPlayCard","position","leadSuit","setPlayerCard","playCardNow","Turn","cardPlay","setCardPlay","taco","playCard","BidInfo","Play","sendBookInfo","book","bookInfo","playCard1","setPlayCard1","playCard2","setPlayCard2","playCard3","setPlayCard3","playCard4","setPlayCard4","setLeadSuit","playedCards","bookNum","bookOrder","mung","roundOrder","lastWinner","lastBook","winningPlayer","getBookOrder","charAt","setTimeout","winner","curBestValue","highCard","whoseTurn","checkPlayerPosition","getPlayerCard","Draw","sendDraw","discard0","setDiscard0","discard1","setDiscard1","discard2","setDiscard2","discard3","setDiscard3","discard4","setDiscard4","setDiscardPending","discards","type","checked","DrawCpu","discardCount","setDiscardCount","discardPending","Drawing","draw1","setDraw1","draw2","setDraw2","draw3","setDraw3","draw4","setDraw4","whoseRedraw","draws","getPlayerDraw","PlayWinner","team1","team2","sendRoundScore","sendStage","classname","onClick","Round","newRound","setStage","discardData","setDiscardData","setBookInfo","setBookNum","setLog","dealHands","team1BookCount","team2BookCount","highCardWinner","x","cardValue","Game","setRound","setGameScore","roundScore","setRoundScore","scoreLog","setScoreLog","gameOver","setGameOver","deck_id","tempScore","Footer","href","App","inGame","setInGame","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0dc77805.chunk.js","sourcesContent":["import \"./header.css\";\nconst Header = () => {\n  return (\n    <div className=\"header\">\n      <div className=\"maintitle\">45</div>\n      <div className=\"tagline\">Straight out the UMD commuter cafe</div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./score.css\";\n\nconst Score = ({ round, gameScore }) => {\n  return (\n    <div className=\"scoreBoard\" style={{ textAlign: \"left\" }}>\n          <div className=\"scoreBoardItem\" data-testid=\"team1Score\">Team 1: {gameScore[0]}</div>\n          <div className=\"scoreBoardItem\" data-testid=\"round\">Round: {round}</div>\n          <div className=\"scoreBoardItem\" data-testid=\"team2Score\">Team 2: {gameScore[1]}</div>\n    </div>\n  );\n};\n\nexport default Score;\n","export async function dealHands(deckUrl, round, setIsPending, setRoundOrder) {\n  const order = getRoundOrder(round);\n  await fetch(deckUrl + \"/shuffle/\");\n  const drawresponse = await fetch(deckUrl + \"/draw/?count=20\");\n  const drawData = await drawresponse.json();\n  let hands = hash(drawData.cards);\n  console.log(\"handCheck\", hands, drawData);\n  await fetch(\n    deckUrl + \"/pile/\" + order[0] + \"/add/?cards=\" + hands[0].toString()\n  );\n  await fetch(\n    deckUrl + \"/pile/\" + order[1] + \"/add/?cards=\" + hands[1].toString()\n  );\n  await fetch(\n    deckUrl + \"/pile/\" + order[2] + \"/add/?cards=\" + hands[2].toString()\n  );\n  const done = await fetch(\n    deckUrl + \"/pile/\" + order[3] + \"/add/?cards=\" + hands[3].toString()\n  );\n  if (done) {\n    setRoundOrder(order);\n    setIsPending(false);\n  }\n}\n\nfunction hash(cards) {\n  const hand1 = [\n    cards[0].code,\n    cards[1].code,\n    cards[2].code,\n    cards[12].code,\n    cards[13].code,\n  ];\n  const hand2 = [\n    cards[3].code,\n    cards[4].code,\n    cards[5].code,\n    cards[14].code,\n    cards[15].code,\n  ];\n  const hand3 = [\n    cards[6].code,\n    cards[7].code,\n    cards[8].code,\n    cards[16].code,\n    cards[17].code,\n  ];\n  const hand4 = [\n    cards[9].code,\n    cards[10].code,\n    cards[11].code,\n    cards[18].code,\n    cards[19].code,\n  ];\n  return [hand1, hand2, hand3, hand4];\n}\n\nexport function getRoundOrder(round) {\n  let val = (round - 1) % 4;\n  let order;\n  if (val === 0) {\n    order = [\"Mario\", \"Partner\", \"Luigi\", \"You\"];\n  } else if (val === 1) {\n    order = [\"Partner\", \"Luigi\", \"You\", \"Mario\"];\n  } else if (val === 2) {\n    order = [\"Luigi\", \"You\", \"Mario\", \"Partner\"];\n  } else if (val === 3) {\n    order = [\"You\", \"Mario\", \"Partner\", \"Luigi\"];\n  }\n  return order;\n} // module.exports = { dealHand, asyncCall};\n\n/** Get's the order relative to the last player to win a hand\n ** The player who won the last book goes first\n * @param  {String} lastWinner name of the last player to win a book\n */\nexport function getBookOrder(mung, roundOrder) {\n  let order = [];\n  let lastBook = mung[mung.length - 1];\n  let lastWinner;\n  if (lastBook) {\n    lastWinner = lastBook.winningPlayer;\n  }\n  if (lastWinner === \"Mario\") {\n    order = [\"Mario\", \"Partner\", \"Luigi\", \"You\"];\n  } else if (lastWinner === \"Partner\") {\n    order = [\"Partner\", \"Luigi\", \"You\", \"Mario\"];\n  } else if (lastWinner === \"Luigi\") {\n    order = [\"Luigi\", \"You\", \"Mario\", \"Partner\"];\n  } else if (lastWinner === \"You\") {\n    order = [\"You\", \"Mario\", \"Partner\", \"Luigi\"];\n  } else {\n    order = roundOrder;\n  }\n  return order;\n}\n\n// export async function dealHands(deckUrl,round,setIsPending,setHands,setRoundOrder) {\n//   const order = getRoundOrder(round);\n//   await fetch(deckUrl + \"/shuffle/\");\n//   const drawresponse = await fetch(deckUrl + \"/draw/?count=20\");\n//   const drawData = await drawresponse.json();\n//   let hands = hash(drawData.cards);\n//   console.log(\"handCheck\",hands,drawData)\n//   await fetch(deckUrl + \"/pile/\" + order[0] + \"/add/?cards=\" + hands[0].toString())\n//   await fetch(deckUrl + \"/pile/\" + order[1] + \"/add/?cards=\" + hands[1].toString())\n//   await fetch(deckUrl + \"/pile/\" + order[2] + \"/add/?cards=\" + hands[2].toString())\n//   const done = await fetch(deckUrl + \"/pile/\" + order[3] + \"/add/?cards=\" + hands[3].toString())\n//   if (done) {\n//     setRoundOrder(order)\n//     setHands(hands)\n//     setIsPending(false)\n//   }\n// }\n\n/** Handles discarding, drawing new cards, and assigning that number of cards to the player\n * @param  {String} deckUrl URL of the deck being used for this round\n * @param  {Array} discardCodes Card codes to discard\n * @param  {String} player Player whose hand is being worked\n * @param  {Function} sendDiscardData Callback function to 'Play' to signify the process is done\n */\nexport async function getNewCards(\n  deckUrl,\n  discardCodes,\n  player,\n  sendDiscardData,\n  sendDiscardPending\n) {\n  const discardResponse = await fetch(\n    deckUrl + \"/pile/discard/add/?cards=\" + discardCodes.toString()\n  );\n  await discardResponse.json();\n  //  const redrawCount = 5 - discardData.piles[player].remaining;\n  const redrawResponse = await fetch(\n    deckUrl + \"/draw/?count=\" + discardCodes.length\n  );\n  const redrawData = await redrawResponse.json();\n  console.log(\"redraw\", player, discardCodes, redrawData.cards);\n  let cards = [];\n  if (redrawData.cards) {\n    for (let i = 0; i < redrawData.cards.length; i++)\n      cards.push(redrawData.cards[i].code);\n  }\n  const assResponse = await fetch(\n    deckUrl + \"/pile/\" + player + \"/add/?cards=\" + cards.toString()\n  );\n  const done = await assResponse.json();\n  if (done) {\n    sendDiscardData(discardCodes.length);\n    sendDiscardPending(false);\n  }\n}\n","const trumpValues = [\n    -35, -21, -18, -13, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1,\n  ];\n  const offSuitValues = [13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0];\n  const offSuitValuesNonLead = [\n    27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14,\n  ];\n  \n  const heartTrumpOrder = [\n    \"5H\",\n    \"JH\",\n    \"AH\",\n    \"KH\",\n    \"QH\",\n    \"0H\",\n    \"9H\",\n    \"8H\",\n    \"7H\",\n    \"6H\",\n    \"4H\",\n    \"3H\",\n    \"2H\",\n  ];\n  const diamondTrumpOrder = [\n    \"5D\",\n    \"JD\",\n    \"AH\",\n    \"AD\",\n    \"KD\",\n    \"QD\",\n    \"0D\",\n    \"9D\",\n    \"8D\",\n    \"7D\",\n    \"6D\",\n    \"4D\",\n    \"3D\",\n    \"2D\",\n  ];\n  const spadesTrumpOrder = [\n    \"5S\",\n    \"JS\",\n    \"AH\",\n    \"AS\",\n    \"KS\",\n    \"QS\",\n    \"2S\",\n    \"3S\",\n    \"4S\",\n    \"6S\",\n    \"7S\",\n    \"8S\",\n    \"9S\",\n    \"0S\",\n  ];\n  const clubsTrumpOrder = [\n    \"5C\",\n    \"JC\",\n    \"AH\",\n    \"AC\",\n    \"KC\",\n    \"QC\",\n    \"2C\",\n    \"3C\",\n    \"4C\",\n    \"6C\",\n    \"7C\",\n    \"8C\",\n    \"9C\",\n    \"0C\",\n  ];\n  \n  const heartOffSuitOrder = [\n    \"2H\",\n    \"3H\",\n    \"4H\",\n    \"5H\",\n    \"6H\",\n    \"7H\",\n    \"8H\",\n    \"9H\",\n    \"0H\",\n    \"JH\",\n    \"QH\",\n    \"KH\",\n  ];\n  const diamondOffSuitOrder = [\n    \"AD\",\n    \"2D\",\n    \"3D\",\n    \"4D\",\n    \"5D\",\n    \"6D\",\n    \"7D\",\n    \"8D\",\n    \"9D\",\n    \"0D\",\n    \"JD\",\n    \"QD\",\n    \"KD\",\n  ];\n  const spadesOffSuitOrder = [\n    \"0S\",\n    \"9S\",\n    \"8S\",\n    \"7S\",\n    \"6S\",\n    \"5S\",\n    \"4S\",\n    \"3S\",\n    \"2S\",\n    \"AS\",\n    \"JS\",\n    \"QS\",\n    \"KS\",\n  ];\n  const clubsOffSuitOrder = [\n    \"0C\",\n    \"9C\",\n    \"8C\",\n    \"7C\",\n    \"6C\",\n    \"5C\",\n    \"4C\",\n    \"3C\",\n    \"2C\",\n    \"AC\",\n    \"JC\",\n    \"QC\",\n    \"KC\",\n  ];\n\n  export function evaluateHand(cards) {\n    let heartHandVal, diamondHandVal, spadeHandVal, clubHandVal;\n    heartHandVal = diamondHandVal = spadeHandVal = clubHandVal = 0;\n  \n    for (let i = 0; i < 5; i++) {\n      var card = cards[i];\n      heartHandVal += getHeartValue(card);\n      diamondHandVal += getDiamondValue(card);\n      spadeHandVal += getSpadeValue(card);\n      clubHandVal += getClubValue(card);\n    }\n  \n    return [heartHandVal, diamondHandVal, spadeHandVal, clubHandVal];\n  }\n  \n  export function getCardValue(card, trump) {\n    switch (trump) {\n      case \"Hearts\":\n        return getHeartValue(card);\n      case \"Diamonds\":\n        return getDiamondValue(card);\n      case \"Spades\":\n        return getSpadeValue(card);\n      case \"Clubs\":\n        return getClubValue(card);\n      default:\n        return 0;\n    }\n  }\n  \n  function getHeartValue(card) {\n    return (\n      trumpValues[heartTrumpOrder.indexOf(card)] ||\n      offSuitValues[diamondOffSuitOrder.indexOf(card)] ||\n      offSuitValues[clubsOffSuitOrder.indexOf(card)] ||\n      offSuitValues[spadesOffSuitOrder.indexOf(card)]\n    );\n  }\n  \n  function getDiamondValue(card) {\n    return (\n      trumpValues[diamondTrumpOrder.indexOf(card)] ||\n      offSuitValues[heartOffSuitOrder.indexOf(card)] ||\n      offSuitValues[clubsOffSuitOrder.indexOf(card)] ||\n      offSuitValues[spadesOffSuitOrder.indexOf(card)]\n    );\n  }\n  \n  function getSpadeValue(card) {\n    return (\n      trumpValues[spadesTrumpOrder.indexOf(card)] ||\n      offSuitValues[diamondOffSuitOrder.indexOf(card)] ||\n      offSuitValues[clubsOffSuitOrder.indexOf(card)] ||\n      offSuitValues[heartOffSuitOrder.indexOf(card)]\n    );\n  }\n  \n  function getClubValue(card) {\n    return (\n      trumpValues[clubsTrumpOrder.indexOf(card)] ||\n      offSuitValues[diamondOffSuitOrder.indexOf(card)] ||\n      offSuitValues[heartOffSuitOrder.indexOf(card)] ||\n      offSuitValues[spadesOffSuitOrder.indexOf(card)]\n    );\n  }","export const checkBid = (bid, bidData) => {\n  // console.log(\"incheckBid\",bid,bidData)\n  let highBid, highBidder, suit;\n  if (bid.playerBid === \"Pass\") {\n    // return {null, null};\n  } else if (bid.playerBid === \"Take\") {\n    highBid = bidData.highBid;\n    highBidder = bid.bidder;\n  } else if (bid.playerBid) {\n    highBid = bid.playerBid;\n    highBidder = bid.bidder;\n  }\n\n  return { highBid, highBidder };\n};\n\n/** Gets the players bid based on an evaluation of their hand and prev bids this round\n * @param  {Array} handValues array of hand evaluations relative to suits\n * @param  {Object} bidData {highBid: highest bid made so far\n *                           highBidder: player who made the highest bid}\n * @returns player's bid\n */\nexport function getBid(handValues, bidData) {\n  const bidOptions = [\"Pass\", \"15\", \"20\", \"25\", \"30\", \"30 No Draw\"];\n  var bestHandVal = handValues.sort((a, b) => {\n    return a - b;\n  })[0];\n  var playerBid = null;\n\n  // the lower the hand value the better, which makes the comparators the floor\n  // TODO add 25 and 30 options\n  // TODO add forced 15s when a player is holding a 5 and no bids are in yet\n  // TODO this bid thresholds are abirtrary. try to get a better handle on what\n  //   these look like\n  // TODO needs an exception where if the player is dealer they can take the bid\n\n  if (bestHandVal < 0 - 25) {\n    playerBid = \"20\";\n  } else if (bestHandVal < 0 - 5) {\n    playerBid = \"15\";\n  }\n\n  if (\n    playerBid &&\n    bidOptions.indexOf(playerBid) <= bidOptions.indexOf(bidData.highBid)\n  ) {\n    playerBid = \"Pass\";\n  }\n\n  return playerBid;\n}\n\nexport function getBestSuit(handValues) {\n  let suit;\n  const orgHandValues = JSON.stringify(handValues);\n  const bestHandVal = handValues.sort(function (a, b) {\n    return a - b;\n  })[0];\n\n  const suits = [\"Hearts\", \"Diamonds\", \"Spades\", \"Clubs\"];\n  const suitNum = JSON.parse(orgHandValues).indexOf(bestHandVal);\n  suit = suits[suitNum];\n  return suit;\n}\n","import { useState, useEffect } from 'react';\n\nconst useFetch = (url) => {\n    const [data, setData] = useState(null);\n    const [isPending, setIsPending] = useState(true);\n    const [error, setError] = useState(null);\n    useEffect(() => {\n        const abortCont = new AbortController();\n        fetch(url, { signal: abortCont.signal })\n            .then(res => {\n                if (!res.ok) {\n                    throw Error('Could not fetch data for that resource');\n                }\n                return res.json();\n            })\n            .then(data => {\n                setData(data);\n                setIsPending(false);\n                setError(null);\n            })\n            .catch(err => {\n                if (err.name === \"AbortError\") {\n                    console.log('fetch aborted')\n                } else {\n                    setIsPending(false);\n                    setError(err.message);\n                }\n            })\n        return () => abortCont.abort();\n    }, [url]);\n    return { data, isPending, error }\n}\n\nexport default useFetch;","import { useState } from \"react\";\nimport { evaluateHand } from \"../cardValues\";\nimport useFetch from \"../useFetch\";\nimport { getBid } from \"./bidfuncs\";\n\nconst MakeBid = ({ deckUrl, bidder, bidData, dealer, sendBid }) => {\n  const [playerBid, setPlayerBid] = useState(\"Pass\");\n  const player = \"You\";\n  const url = deckUrl + \"/pile/\" + bidder + \"/list/\";\n  const { data, error, isPending } = useFetch(url);\n\n  let highBid = bidData.highBid;\n  let humanBidder;\n\n  if (data) {\n    if (bidder === player) {\n      humanBidder = true;\n    } else {\n      humanBidder = false;\n      let cards = data.piles[bidder].cards;\n      let card;\n      let cardCodes = [];\n      for (card of cards) {\n        cardCodes.push(card.code);\n      }\n      let handValues = evaluateHand(cardCodes);\n      let playerBid = getBid(handValues, bidData);\n      let bidYooo = { bidder, playerBid };\n      sendBid(bidYooo);\n    }\n  }\n\n  let isDealer = player === dealer;\n\n  const handleSubmit = () => {\n    sendBid({ bidder: bidder, playerBid });\n  };\n\n  function checkBidOptions(bidChoice, highBid) {\n    let bidOptions = [\"Pass\", \"15\", \"20\", \"25\", \"30\", \"30No\"];\n    let highBidNumber = bidOptions.indexOf(highBid);\n    let bidNumber = bidOptions.indexOf(bidChoice);\n    return highBidNumber < bidNumber;\n  }\n\n  return (\n    <div className=\"playeraction\">\n      {humanBidder && (\n        <div>\n          <form onSubmit={handleSubmit}>\n            <select\n              value={playerBid}\n              onChange={(e) => setPlayerBid(e.target.value)}\n            >\n              {isDealer && highBid && <option value=\"Take\">Take</option>}\n              {isDealer && highBid && (\n                <option value=\"Pass\">Let Bidder Have It</option>\n              )}\n              {!isDealer && <option value=\"Pass\">Pass</option>}\n              {checkBidOptions(\"15\", highBid) && <option value=\"15\">15</option>}\n              {checkBidOptions(\"20\", highBid) && <option value=\"20\">20</option>}\n              {checkBidOptions(\"25\", highBid) && <option value=\"25\">25</option>}\n              {checkBidOptions(\"30\", highBid) && <option value=\"30\">30</option>}\n              {checkBidOptions(\"30No\", highBid) && (\n                <option value=\"30No\">30 No Draw</option>\n              )}\n            </select>\n            <button>Place Bid</button>\n          </form>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MakeBid;\n","const Card = ({ card }) => {\n  return (\n    <div className=\"cardslot\">\n      {card && <img src={card.image} alt=\"Card\" width=\"100%\" />}\n    </div>\n  );\n};\n\nexport default Card;\n","import useFetch from \"./useFetch\";\nimport Card from \"./Card\";\n\nconst Hand = ({ deckUrl, player, round }) => {\n  const { data, isPending, error } = useFetch(\n    deckUrl + \"/pile/\" + player + \"/list/\"\n  );\n  var cards = [];\n  if (data && data.piles[player] && data.piles[player].cards) {\n    cards = data.piles[player].cards;\n  }\n\n  return (\n    <div>\n      {error && <div>{error}</div>}\n      {isPending && <div>Loading...</div>}\n      {data && cards && (\n        <div className=\"handwindow\">\n          <div className=\"hand\">\n            <Card card={cards[0]} round={round} />\n            <Card card={cards[1]} round={round} />\n            <Card card={cards[2]} round={round} />\n            <Card card={cards[3]} round={round} />\n            <Card card={cards[4]} round={round} />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Hand;\n","const ViewBid = ({ bid, bidder }) => {\n  console.log(\"ViewBid\", bid);\n\n  return (\n    <div className=\"playermessagebox\">\n      {bid && (\n        <div>\n          <div className=\"playermessageboxheader\">{bid.bidder}</div>\n          <div className=\"playermessageboxtext\">{bid.playerBid || \"Pass\"}</div>\n        </div>\n      )}\n      {!bid && bidder !== \"You\" && (\n        <div>\n          <div className=\"playermessageboxheader\">{bidder}</div>\n          <div className=\"playermessageboxtext\">&nbsp;</div>\n        </div>\n      )}\n      {!bid && bidder === \"You\" && (\n        <div>\n          <div className=\"playermessageboxheader\">You</div>\n          <div className=\"playermessageboxtext\">We're waiting!</div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ViewBid;\n","import { useState } from \"react\";\nimport { evaluateHand } from \"../cardValues\";\nimport Hand from \"../Hand\";\nimport useFetch from \"../useFetch\";\nimport { getBestSuit } from \"./bidfuncs\";\nimport \"../Play/play.css\";\n\nconst SelectSuit = ({ deckUrl, bidData, sendTrumpSuit }) => {\n  const [trumpSuit, setTrumpSuit] = useState(\"Hearts\");\n  const bidder = bidData.highBidder;\n  const url = deckUrl + \"/pile/\" + bidder + \"/list/\";\n  const { data, error, isPending } = useFetch(url);\n\n  const player = \"You\";\n  console.log(\"bid\", bidder, bidData);\n  let humanBidder;\n  if (data) {\n    if (bidder === player) {\n      humanBidder = true;\n    } else {\n      humanBidder = false;\n      let cards = data.piles[bidder].cards;\n      let card;\n      let cardCodes = [];\n      for (card of cards) {\n        cardCodes.push(card.code);\n      }\n      let handValues = evaluateHand(cardCodes);\n      let trumpSuit = getBestSuit(handValues);\n      sendTrumpSuit(trumpSuit);\n    }\n  }\n\n  const handleSuitSubmit = (e) => {\n    e.preventDefault();\n    sendTrumpSuit(trumpSuit);\n  };\n\n  return (\n    <div>\n      {bidData.highBidder === \"You\" && (\n        <div className=\"playeraction\">\n          <form onSubmit={handleSuitSubmit}>\n            <select\n              value={trumpSuit}\n              onChange={(e) => setTrumpSuit(e.target.value)}\n            >\n              <option value=\"Hearts\">Hearts</option>\n              <option value=\"Diamonds\">Diamonds</option>\n              <option value=\"Spades\">Spades</option>\n              <option value=\"Clubs\">Clubs</option>\n            </select>\n            <button>Select Suit</button>\n          </form>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SelectSuit;\n","const ViewDraw = ({ draw, drawer }) => {\n  return (\n    <div className=\"playermessagebox\">\n      {draw && (\n        <div>\n          <div className=\"playermessageboxheader\">{drawer}</div>\n          <div className=\"playermessageboxtext\">Draws {draw}</div>\n        </div>\n      )}\n      {!draw && (\n        <div>\n          <div className=\"playermessageboxheader\">{drawer}</div>\n          <div className=\"playermessageboxtext\">&nbsp;</div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ViewDraw;\n","const PlayCard = ({ card, player }) => {\n  return (\n    <div className=\"playermessagebox\">\n        {card && (\n          <div>\n            <div className=\"playermessageboxheader\">{player}</div>\n            <div className=\"playerplayedcard\">\n            <img src={card.image} alt=\"Card\" width=\"93px\" /></div>\n            </div>)}\n      </div>\n  );\n};\n\nexport default PlayCard;\n","import ViewBid from \"./Bidding/ViewBid\"\nimport ViewDraw from \"./Drawing/ViewDraw\"\nimport PlayCard from \"./Play/PlayCard\";\nimport \"./viewTable.css\";\n\nconst ViewTable = ({ stage, players, actions, bidData }) => {\n  console.log(stage, players, actions);\n  return (\n    <div className=\"table\">\n      <div className=\"tablerowtop\">\n        <div className=\"tableplayerbox player3\">\n          <div className=\"playerslot\">\n            {\n              (stage === \"Bidding\" && (\n                <ViewBid bid={actions[2]} bidder={players[2]} />\n              ))\n            }\n            {\n              (stage === \"Drawing\" && (\n                <ViewDraw draw={actions[2]} drawer={players[2]} />\n              ))\n            }\n\n            {\n              (stage === \"Playing\" && (\n                <PlayCard card={actions[2]} player={players[2]}  />\n              ))\n            }\n\n          </div>\n        </div>\n      </div>\n\n      <div className=\"tablerowmid\">\n        <div className=\"tableplayerbox player2\">\n          <div className=\"playerslot\">\n            {\n              (stage === \"Bidding\" && (\n                <ViewBid bid={actions[1]} bidder={players[1]} />\n              ))\n            }\n            {\n              (stage === \"Drawing\" && (\n                <ViewDraw draw={actions[1]} drawer={players[1]} />\n              ))\n            }\n            {\n              (stage === \"Playing\" && (\n                <PlayCard card={actions[1]} player={players[1]}  />\n              ))\n            }\n\n          </div>\n        </div>\n        <div className=\"tableplayerbox player4\">\n          <div className=\"playerslot\">\n            {\n              (stage === \"Bidding\" && (\n                <ViewBid bid={actions[3]} bidder={players[3]} />\n              ))\n            }\n            {\n              (stage === \"Drawing\" && (\n                <ViewDraw draw={actions[3]} drawer={players[3]} />\n              ))\n            }\n            {\n              (stage === \"Playing\" && (\n                <PlayCard card={actions[3]} player={players[3]} />\n              ))\n            }\n\n          </div>\n        </div>\n      </div>\n\n      <div className=\"tablerowbottom\">\n        <div className=\"tableplayerbox player1\">\n          <div className=\"playerslot\">\n            {\n              (stage === \"Bidding\" && (\n                <ViewBid bid={actions[0]} bidder={players[0]} />\n              ))\n            }\n            {\n              (stage === \"Drawing\" && (\n                <ViewDraw draw={actions[0]} drawer={players[0]} />\n              ))\n            }\n            {\n              (stage === \"Playing\" && (\n                <PlayCard card={actions[0]} />\n              ))\n            }\n\n          </div>\n        </div>\n      </div>\n      <div className=\"tablerowlog\">\n        <div className=\"tablelogbox\">\n          <div className=\"logslot\"></div>\n        </div>\n      </div>\n\n\n\n    </div>\n  );\n};\n\nexport default ViewTable;\n","import { useEffect, useState } from \"react\";\nimport { checkBid } from \"./bidfuncs\";\nimport MakeBid from \"./MakeBid\";\nimport \"./bidding.css\";\nimport Hand from \"../Hand\";\nimport ViewBid from \"./ViewBid\";\nimport ViewBidLog from \"./ViewBidLog\";\nimport SelectSuit from \"./SelectSuit\";\nimport ViewTable from \"../ViewTable\";\n\nconst Bidding = ({ deckUrl, bidOrder, sendBidData }) => {\n  const [bid1, setBid1] = useState(\"\");\n  const [bid2, setBid2] = useState(\"\");\n  const [bid3, setBid3] = useState(\"\");\n  const [bid4, setBid4] = useState(\"\");\n  const [trumpSuit, setTrumpSuit] = useState(\"\");\n  const [turn, setTurn] = useState(1);\n  const [bidData, setBidData] = useState({\n    highBid: null,\n    highBidder: null,\n    trumpSuit: null,\n  });\n\n  useEffect(() => {\n    // setBid1(\"\");\n    // setBid2(\"\");\n    // setBid3(\"\");\n    // setBid4(\"\");\n    setBidData({ highBid: null, highBidder: null, trumpSuit: null });\n  }, [bidOrder]);\n\n  // need to call this one bidder at a time in it's own object.\n  // probably want a nested structure like 'Play' where each\n  // CPU player has their own component\n  // and then the human player has their component\n  // *** consider rolling SelectSuit under that umbrella as well.\n\n  let bidder = bidOrder[turn - 1];\n  // const bidOptions = [\"Pass\", \"15\", \"20\", \"25\", \"30\", \"30 No Draw\"];\n  const dealer = bidOrder[3];\n\n  switch (turn) {\n    case 1: {\n      if (bid1) {\n        let { highBid, highBidder } = checkBid(bid1, bidData);\n        if (highBid) {\n          setBidData({ highBid, highBidder, trumpSuit });\n        }\n        setTurn(2);\n      }\n      break;\n    }\n    case 2: {\n      if (bid2) {\n        let { highBid, highBidder } = checkBid(bid2, bidData);\n        if (highBid) {\n          setBidData({ highBid, highBidder, trumpSuit });\n        }\n        setTurn(3);\n      }\n      break;\n    }\n    case 3: {\n      if (bid3) {\n        let { highBid, highBidder } = checkBid(bid3, bidData);\n        if (highBid) {\n          setBidData({ highBid, highBidder, trumpSuit });\n        }\n        setTurn(4);\n      }\n      break;\n    }\n    case 4: {\n      if (bid4) {\n        let { highBid, highBidder } = checkBid(bid4, bidData);\n        if (highBid) {\n          setBidData({ highBid, highBidder, trumpSuit });\n        } else if (!bidData.highBid) {\n          setBidData({ highBid: \"15\", highBidder: dealer, trumpSuit });\n        }\n        setTurn(5);\n      }\n      break;\n    }\n    case 5: {\n      if (trumpSuit) {\n        let highBid = bidData.highBid;\n        let highBidder = bidData.highBidder;\n        setBidData({ highBid, highBidder, trumpSuit });\n        setTurn(6);\n      }\n      break;\n    }\n\n    case 6: {\n      sendBidData(bidData);\n    }\n  }\n\n  const bids = [bid1, bid2, bid3, bid4];\n\n  function getPlayerBid(player, order) {\n    let num = order.indexOf(player);\n    // console.log(\"crash\", player, bids, num);\n    return bids[num];\n  }\n\n  const players = [\"You\", \"Mario\", \"Partner\", \"Luigi\"];\n  function getActions(bids, bidOrder) {\n    let actions = [];\n    for (let i = 0; i < players.length; i++) {\n      actions[i] = getPlayerBid(players[i], bidOrder);\n    }\n    return actions;\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"viewTableContainer\">\n        <ViewTable\n          stage=\"Bidding\"\n          players={players}\n          actions={getActions(bids, bidOrder)}\n          bidData={bidData}\n        />\n      </div>\n      <div className=\"playerWindowContainer\">\n        <div className=\"playerwindow\">\n          <Hand deckUrl={deckUrl} player={\"You\"} />\n          {turn === 1 && (\n            <MakeBid\n              deckUrl={deckUrl}\n              bidder={bidder}\n              bidData={bidData}\n              dealer={dealer}\n              sendBid={setBid1}\n            />\n          )}\n          {turn === 2 && (\n            <MakeBid\n              deckUrl={deckUrl}\n              bidder={bidder}\n              bidData={bidData}\n              dealer={dealer}\n              sendBid={setBid2}\n            />\n          )}\n          {turn === 3 && (\n            <MakeBid\n              deckUrl={deckUrl}\n              bidder={bidder}\n              bidData={bidData}\n              dealer={dealer}\n              sendBid={setBid3}\n            />\n          )}\n          {turn === 4 && (\n            <MakeBid\n              deckUrl={deckUrl}\n              bidder={bidder}\n              bidData={bidData}\n              dealer={dealer}\n              sendBid={setBid4}\n            />\n          )}\n          {turn === 5 && (\n            <SelectSuit\n              deckUrl={deckUrl}\n              bidData={bidData}\n              sendTrumpSuit={setTrumpSuit}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Bidding;\n","import { getCardValue } from \"./cardValues\";\n\nexport function getDealer(dealers) {\n  let order = dealers;\n  let dealer = order.shift();\n  // TODO fix the order here\n  order.push(dealer);\n  return { dealer, order };\n}\n\nexport function getWorstCard(cards, trump) {\n  var worstCard = null;\n  var worstCardVal = 0 - 50;\n\n  for (let i = 0; i < cards.length; i++) {\n    var curCardVal = getCardValue(cards[i].code, trump);\n    if (curCardVal > worstCardVal) {\n      worstCardVal = curCardVal;\n      worstCard = i;\n    }\n  }\n  return cards[worstCard];\n}\n\nexport function getBestCard(cards, trump) {\n  var bestCard = null;\n  var bestCardVal = 50;\n\n  for (let i = 0; i < cards.length; i++) {\n    var curCardVal = getCardValue(cards[i].code, trump);\n    if (curCardVal < bestCardVal) {\n      bestCardVal = curCardVal;\n      bestCard = i;\n    }\n  }\n\n  return cards[bestCard];\n}\n\nexport function getPlayerHand(url, player) {\n  var tempData;\n\n  const playerHand = fetch(url)\n    .then((res) => {\n      if (!res.ok) {\n        throw Error(\"Could not fetch data for that resource\");\n      }\n      return res.json();\n    })\n    .then((data) => {});\n  playerHand.then((data) => {\n    return data;\n  });\n\n  return tempData;\n}\n\n/** Moves the player's selected card to the discard pile and plays the card on the table\n * @param  {String} deckUrl URL to the deck being used\n * @param  {String} playerCard Card code of the card being played\n * @param  {Function} sendPlayerCard Calls back to play with the PlayerCard\n */\nexport async function playCardNow(deckUrl, playerCard, sendPlayerCard) {\n  await fetch(\n    deckUrl + \"/pile/discard/add/?cards=\" + playerCard.code\n  )\n    .then((res) => {\n      if (!res.ok) {\n        throw Error(\"Could not fetch data for that resource\");\n      }\n      return res.json();\n    })\n    .then((data) => {\n      return playerCard;\n    });\n  sendPlayerCard(playerCard);\n}\n\n/** finds the players position\n * @param  {String} player handle of the player \n * @param  {Array} order order of players\n */\n export function checkPlayerPosition(player, order) {\n  let num = order.indexOf(player) + 1;\n  return num;\n}","import { useState } from \"react\";\nimport useFetch from \"../useFetch\";\nimport { playCardNow } from \"../scripts\";\n\nconst PlayerTurn = ({\n  deckUrl,\n  player,\n  position,\n  leadSuit,\n  sendPlayCard,\n  trumpSuit,\n}) => {\n  const [playerCard, setPlayerCard] = useState(0);\n\n  const url = deckUrl + \"/pile/\" + player + \"/list/\";\n  const { data, error, isPending } = useFetch(url);\n\n  var cards = [];\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    playCardNow(deckUrl, cards[playerCard], sendPlayCard);\n  };\n\n  if (data) {\n    cards = data.piles[player].cards;\n  }\n\n  return (\n    <div>\n      {data && (\n        <form onSubmit={handleSubmit}>\n          <select\n            value={playerCard}\n            onChange={(e) => setPlayerCard(e.target.value)}\n          >\n            {cards[0] && <option value={0}>{cards[0].code}</option>}\n            {cards[1] && <option value={1}>{cards[1].code}</option>}\n            {cards[2] && <option value={2}>{cards[2].code}</option>}\n            {cards[3] && <option value={3}>{cards[3].code}</option>}\n            {cards[4] && <option value={4}>{cards[4].code}</option>}\n          </select>\n          <button>Play Card</button>\n        </form>\n      )}\n    </div>\n  );\n};\n\nexport default PlayerTurn;\n","import { useState } from \"react\";\nimport { getBestCard, getWorstCard } from \"../scripts\";\nimport useFetch from \"../useFetch\";\n\nconst Turn = ({ deckUrl, player, position, leadSuit, sendPlayCard, trumpSuit }) => {\n\n    const url = deckUrl + \"/pile/\" + player + \"/list/\";\n    const { data, error, isPending } = useFetch(url);\n    const [cardPlay,setCardPlay] = useState(null);\n\n    var cards = [];\n\n    if (data && !cardPlay) {\n        cards = data.piles[player].cards;\n        var taco = playCard(position, cards, trumpSuit);\n        \n        fetch(deckUrl + \"/pile/discard/add/?cards=\" + taco.code)\n            .then(res => {\n                if (!res.ok) {\n                    throw Error('Could not fetch data for that resource');\n                }\n                return res.json();\n            })\n            .then(data => {\n                setCardPlay(taco)\n            });\n    }\n\n    if (data && cardPlay) {\n        sendPlayCard(cardPlay)\n    }\n\n    return (\n        <div>\n            {error && <div>{error}</div>}\n            {isPending && <div>Thinking....</div>}\n            {data && <div>Dawn</div>};\n        </div>\n    )\n}\n\nexport default Turn;\n\nfunction playCard(position, cards, trumpSuit) {\n    var card;\n    switch (position) {\n        case 1:\n            card = getWorstCard(cards, trumpSuit);\n            break;\n        case 2:\n            card = getWorstCard(cards, trumpSuit);\n            break;\n        case 3:\n            card = getBestCard(cards, trumpSuit);\n            break;\n        case 4:\n            card = getBestCard(cards, trumpSuit);\n            break;\n        default:\n            console.log(\"defaultHit\")\n\n    }\n    return card\n}","import \"./bidding.css\";\n\n/** Display of bid information found on the discard and play views\n * @param  {Object} {bidData object of data related ot the bid\n * @param  {String} suit} Trump suit\n * @param  {Int}\n */\nconst BidInfo = ({ bidData }) => {\n  return (\n    <div className=\"bidInfo\">\n      <div className=\"bidInfoBox\">Bid Info</div>\n      <div className=\"bidInfoBox\">Bid: {bidData.highBid} </div>\n      <div className=\"bidInfoBox\">Bidder: {bidData.highBidder}</div>\n      <div className=\"bidInfoBox\">Suit: {bidData.trumpSuit}</div>\n    </div>\n  );\n};\n\nexport default BidInfo;\n","import { useState } from \"react\";\nimport { getCardValue } from \"../cardValues\";\nimport { getBookOrder } from \"../deckFuncs\";\nimport Hand from \"../Hand\";\nimport PlayCard from \"./PlayCard\";\nimport PlayerTurn from \"./PlayerTurn\";\nimport PlayLog from \"./PlayLog\";\nimport Turn from \"./Turn\";\nimport \"./play.css\";\nimport BidInfo from \"../Bidding/BidInfo\";\nimport ViewTable from \"../ViewTable\";\n\nconst Play = ({\n  deckUrl,\n  player,\n  order,\n  sendBookInfo,\n  book,\n  bookInfo,\n  bidData,\n}) => {\n  const [playCard1, setPlayCard1] = useState(\"\");\n  const [playCard2, setPlayCard2] = useState(\"\");\n  const [playCard3, setPlayCard3] = useState(\"\");\n  const [playCard4, setPlayCard4] = useState(\"\");\n  const [leadSuit, setLeadSuit] = useState(\"\");\n  const [turn, setTurn] = useState(1);\n\n  const playedCards = [playCard1, playCard2, playCard3, playCard4];\n  let bookNum = book;\n  let bookOrder = getBookOrder(bookInfo, order);\n\n  if (turn === 1 && playCard1) {\n    let guac = playCard1.code.charAt(1);\n    setLeadSuit(guac);\n    setTurn(2);\n  } else if (turn === 2 && playCard2) {\n    setTurn(3);\n  } else if (turn === 3 && playCard3) {\n    setTurn(4);\n  } else if (turn === 4 && playCard4) {\n    setTimeout(() => {\n      setTurn(5);\n    }, 2000);\n  } else if (turn === 5) {\n    let curBestValue = 50;\n    let winner;\n    for (let i = 0; i < playedCards.length; i++) {\n      let val = getCardValue(playedCards[i].code, bidData.trumpSuit);\n      if (val < curBestValue) {\n        curBestValue = val;\n        winner = i;\n      }\n    }\n    let highCard = playedCards[winner].code;\n    let winningPlayer = bookOrder[winner];\n    let tempLog = { bookNum, winningPlayer, highCard };\n    sendBookInfo(tempLog);\n  }\n\n  function whoseTurn(val, sendPlayCard) {\n    if (checkPlayerPosition(player, bookOrder) === val) {\n      return (\n        <PlayerTurn\n          deckUrl={deckUrl}\n          player={player}\n          position={val}\n          sendPlayCard={sendPlayCard}\n          trumpSuit={bidData.trumpSuit}\n          leadSuit={leadSuit}\n        />\n      );\n    } else {\n      return (\n        <Turn\n          deckUrl={deckUrl}\n          player={bookOrder[val - 1]}\n          position={val}\n          sendPlayCard={sendPlayCard}\n          trumpSuit={bidData.trumpSuit}\n        />\n      );\n    }\n  }\n\n  function getPlayerCard(player, order) {\n    let num = order.indexOf(player);\n    return playedCards[num];\n  }\n\n  const players = [\"You\", \"Mario\", \"Partner\", \"Luigi\"];\n  function getActions(playedCards, order) {\n    let actions = [];\n    for (let i = 0; i < players.length; i++) {\n      actions[i] = getPlayerCard(players[i], order);\n    }\n    return actions;\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"viewTableContainer\">\n        <ViewTable\n          stage=\"Playing\"\n          players={players}\n          actions={getActions(playedCards, bookOrder)}\n          // bidData={bidData}\n        />\n      </div>\n\n      <div className=\"bidInfoContainer\">\n        <BidInfo bidData={bidData} />\n      </div>\n\n      <div className=\"playerWindowContainer\"></div>\n      <div className=\"playerwindow\">\n        <Hand deckUrl={deckUrl} player={player} />\n        <div className=\"playeraction\">\n          {turn > 0 && !playCard1 && whoseTurn(1, setPlayCard1)}\n          {turn > 1 && !playCard2 && whoseTurn(2, setPlayCard2)}\n          {turn > 2 && !playCard3 && whoseTurn(3, setPlayCard3)}\n          {turn > 3 && !playCard4 && whoseTurn(4, setPlayCard4)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Play;\n\n/** finds the human players position\n * @param  {String} player player name\n * @param  {Array} order order of players (currently fixed to roundOrder)\n */\nexport function checkPlayerPosition(player, order) {\n  let num = order.indexOf(player) + 1;\n  return num;\n}\n","import { useState } from \"react\";\nimport { getNewCards } from \"../deckFuncs\";\nimport Hand from \"../Hand\";\nimport useFetch from \"../useFetch\";\nimport \"./drawing.css\";\n\nconst Draw = ({ deckUrl, drawer, trumpSuit, sendDraw }) => {\n  const [discard0, setDiscard0] = useState(false);\n  const [discard1, setDiscard1] = useState(false);\n  const [discard2, setDiscard2] = useState(false);\n  const [discard3, setDiscard3] = useState(false);\n  const [discard4, setDiscard4] = useState(false);\n  const [discardPending, setDiscardPending] = useState(true);\n\n  const url = deckUrl + \"/pile/\" + drawer + \"/list/\";\n  const { data, error, isPending } = useFetch(url);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const discards = [discard0, discard1, discard2, discard3, discard4];\n    let discardCodes = [];\n    for (let i = 0; i < 5; i++) {\n      discards[i] && discardCodes.push(data.piles[drawer].cards[i].code);\n    }\n    getNewCards(deckUrl, discardCodes, drawer, sendDraw, setDiscardPending);\n  };\n\n  return (\n    \n<form onSubmit={handleSubmit}>\n      <div className=\"discardhandwindow\">\n        <div className=\"discardHand\">\n          <div className=\"discardbox\">\n            <input\n              type=\"checkbox\"\n              name=\"card0\"\n              onChange={(e) => setDiscard0(e.target.checked)}\n              checked={discard0}\n            ></input>\n          </div>\n          <div className=\"discardbox\">\n            <input\n              type=\"checkbox\"\n              name=\"card1\"\n              onChange={(e) => setDiscard1(e.target.checked)}\n              checked={discard1}\n            ></input>\n          </div>\n          <div className=\"discardbox\">\n            <input\n              type=\"checkbox\"\n              name=\"card2\"\n              onChange={(e) => setDiscard2(e.target.checked)}\n              checked={discard2}\n            ></input>\n          </div>\n          <div className=\"discardbox\">\n            <input\n              type=\"checkbox\"\n              name=\"card3\"\n              onChange={(e) => setDiscard3(e.target.checked)}\n              checked={discard3}\n            ></input>\n          </div>\n          <div className=\"discardbox\">\n            <input\n              type=\"checkbox\"\n              name=\"card4\"\n              onChange={(e) => setDiscard4(e.target.checked)}\n              checked={discard4}\n            ></input>\n          </div>\n        </div>\n        <div className=\"playeraction\"></div>\n      </div>\n      <button>Discard Selected</button>\n    </form>\n  );\n};\n\nexport default Draw;\n","import { useEffect, useState } from \"react\";\nimport { getNewCards } from \"../deckFuncs\";\nimport useFetch from \"../useFetch\";\n\nconst DrawCpu = ({ deckUrl, drawer, trumpSuit, sendDraw  }) => {\n\n    const [discardCount,setDiscardCount] = useState(null);\n    const [discardPending,setDiscardPending] = useState(true)\n    const url = deckUrl + \"/pile/\" + drawer + \"/list/\";\n    const { data, error, isPending } = useFetch(url);\n\n    useEffect(() => {\n        if (data) {\n            let card;\n        let cards = data.piles[drawer].cards;\n        let discardCodes = [];\n    \n        for (card of cards) {\n        if (card.code !== \"AH\" && card.code.charAt(1) !== trumpSuit.charAt(0)) {\n            discardCodes.push(card.code);\n      }\n    }\n        getNewCards(deckUrl, discardCodes, drawer, setDiscardCount, setDiscardPending);\n      }}, [data]);\n\n    if (data && discardCount && !discardPending)  {\n        sendDraw(discardCount)\n    }\n\n    return (\n        <div>\n            {error && <div>{error}</div>}\n            {isPending && <div>Thinking....</div>}\n            {data && <div>Done</div>};\n        </div>\n    )\n}\n\nexport default DrawCpu;\n","import { useEffect, useState } from \"react\";\nimport BidInfo from \"../Bidding/BidInfo\";\nimport { checkPlayerPosition } from \"../Play/Play\";\nimport Draw from \"./Draw\";\nimport DrawCpu from \"./DrawCpu\";\nimport ViewTable from \"../ViewTable\";\nimport Hand from \"../Hand\";\n\nconst Drawing = ({ deckUrl, roundOrder, bidData, sendDiscardData }) => {\n  const [draw1, setDraw1] = useState(\"\");\n  const [draw2, setDraw2] = useState(\"\");\n  const [draw3, setDraw3] = useState(\"\");\n  const [draw4, setDraw4] = useState(\"\");\n  const [turn, setTurn] = useState(1);\n\n  const player = \"You\";\n  switch (turn) {\n    case 1: {\n      if (draw1) {\n        setTurn(2);\n      }\n      break;\n    }\n    case 2: {\n      if (draw2) {\n        setTurn(3);\n      }\n      break;\n    }\n    case 3: {\n      if (draw3) {\n        setTurn(4);\n      }\n      break;\n    }\n    case 4: {\n      if (draw4) {\n        setTurn(5);\n      }\n      break;\n    }\n    case 5: {\n      sendDiscardData(true);\n    }\n  }\n\n  let drawer = roundOrder[turn - 1];\n  function whoseRedraw(val, sendDraw) {\n    if (checkPlayerPosition(player, roundOrder) === val) {\n      return (\n        <Draw\n          deckUrl={deckUrl}\n          drawer={drawer}\n          trumpSuit={bidData.trumpSuit}\n          sendDraw={sendDraw}\n        />\n      );\n    } else {\n      return (\n        <DrawCpu\n          deckUrl={deckUrl}\n          drawer={drawer}\n          trumpSuit={bidData.trumpSuit}\n          sendDraw={sendDraw}\n        />\n      );\n    }\n  }\n\n  const draws = [draw1, draw2, draw3, draw4];\n\n  function getPlayerDraw(player, order) {\n    let num = order.indexOf(player);\n    return draws[num];\n  }\n\n  const players = [\"You\", \"Mario\", \"Partner\", \"Luigi\"];\n  function getActions(draws, roundOrder) {\n    let actions = [];\n    for (let i = 0; i < players.length; i++) {\n      actions[i] = getPlayerDraw(players[i], roundOrder);\n    }\n    return actions;\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"viewTableContainer\">\n        <ViewTable\n          stage=\"Drawing\"\n          players={players}\n          actions={getActions(draws, roundOrder)}\n          bidData={bidData}\n        />\n      </div>\n      <div className=\"bidInfoContainer\">\n        <BidInfo bidData={bidData} />\n      </div>\n      <div className=\"playerWindowContainer\">\n        <div className=\"playerwindow\">\n        <Hand deckUrl={deckUrl} player={player} />\n          {turn > 0 && !draw1 && whoseRedraw(1, setDraw1)}\n          {turn > 1 && !draw2 && whoseRedraw(2, setDraw2)}\n          {turn > 2 && !draw3 && whoseRedraw(3, setDraw3)}\n          {turn > 3 && !draw4 && whoseRedraw(4, setDraw4)}\n          {turn === 4 && draw4 && <div>Hey!</div>}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Drawing;\n","const PlayWinner = ({team1, team2, sendRoundScore, sendStage}) => {\n    return ( \n        <div classname=\"gamewindow\">\n        <div className=\"biddingwindow\">\n        <div className=\"windowheader\">Round Over!</div>\n        <div className=\"playwinner\">Team 1: {team1}</div>\n        <div className=\"playwinner\">Team 2: {team2}</div>\n      </div>\n\n        <div className=\"nextroundbutton\">\n              <button\n          onClick={() => {\n            sendRoundScore([team1, team2]);\n            sendStage(\"Over\");\n          }}\n        >\n          Next Round\n        </button>\n        </div>\n        </div>\n\n\n );\n}\n \nexport default PlayWinner;","import { useEffect, useState } from \"react\";\nimport { dealHands } from \"./deckFuncs\";\nimport { getCardValue } from \"./cardValues\";\nimport Bidding from \"./Bidding/Bidding\";\nimport Play from \"./Play/Play\";\nimport Drawing from \"./Drawing/Drawing\";\nimport PlayWinner from \"./Play/PlayWinner\";\n\nconst Round = ({ deckUrl, round, sendRoundScore, newRound }) => {\n  const [isPending, setIsPending] = useState(true);\n  const [bidData, setBidData] = useState(\"\");\n  const [stage, setStage] = useState(\"Deal\");\n  const [discardData, setDiscardData] = useState(false);\n  const [bookInfo, setBookInfo] = useState(null);\n  const [bookNum, setBookNum] = useState(1);\n  const [log, setLog] = useState([]);\n  const [roundOrder, setRoundOrder] = useState(null);\n\n  const order = [\"You\", \"Mario\", \"Partner\", \"Luigi\"];\n\n  // TODO look into a way to reset states without having todo this...\n  if (newRound && stage === \"Over\") {\n    setIsPending(true);\n    setBidData(\"\");\n    setStage(\"Deal\");\n    setDiscardData(false);\n    setBookInfo(null);\n    setBookNum(1);\n    setLog([]);\n    setRoundOrder(null);\n    console.log(\"wipe\");\n  }\n\n  const player = \"You\";\n\n  useEffect(() => {\n    dealHands(deckUrl, round, setIsPending, setRoundOrder);\n  }, [deckUrl, round]);\n\n  if (deckUrl && stage === \"Deal\" && !isPending) {\n    setStage(\"Bid\");\n  }\n\n  if (bidData && stage === \"Bid\" && !isPending) {\n    setStage(\"Discard\");\n  }\n\n  if (discardData && stage === \"Discard\") {\n    setStage(\"Play\");\n  }\n\n  if (bookInfo) {\n    log[bookNum - 1] = bookInfo;\n    setLog(log);\n    setBookInfo(\"\");\n    setBookNum(bookNum + 1);\n  }\n\n  if (stage === \"Play\" && log.length === 5) {\n    setStage(\"Winner\");\n    setBookNum(0);\n  }\n\n  let team1BookCount = 0;\n  let team2BookCount = 0;\n\n  if (stage === \"Winner\") {\n    let highCard = 50;\n    let highCardWinner = null;\n\n    for (let x = 0; x < 5; x++) {\n      if (\n        log[x].winningPlayer === \"You\" ||\n        log[x].winningPlayer === \"Partner\"\n      ) {\n        team1BookCount += 1;\n      } else {\n        team2BookCount += 1;\n      }\n      let cardValue = getCardValue(log[x].highCard, bidData.trumpSuit);\n      if (highCard > cardValue) {\n        highCard = cardValue;\n        highCardWinner = log[x].winningPlayer;\n      }\n    }\n    if (highCardWinner === \"You\" || highCardWinner === \"Partner\") {\n      team1BookCount += 1;\n    } else {\n      team2BookCount += 1;\n    }\n\n    if (team1BookCount === 6) {\n      team1BookCount = 9;\n    }\n\n    if (team2BookCount === 6) {\n      team2BookCount = 9;\n    }\n\n    // TODO clean this up and turn it into a function\n    let bid = bidData.highBid;\n    if (bidData.highBidder === \"You\" || bidData.highBidder === \"Partner\") {\n      if (bid === \"15\" && team1BookCount < 3) {\n        team1BookCount = 0 - 3;\n      } else if (bid === \"20\" && team1BookCount < 4) {\n        team1BookCount = 0 - 4;\n      } else if (bid === \"25\" && team1BookCount < 5) {\n        team1BookCount = 0 - 5;\n      } else if (bid === \"30\" && team1BookCount < 6) {\n        team1BookCount = 0 - 6;\n      } else if (bid === \"30No\" && team2BookCount < 6) {\n        team1BookCount = 0 - 12;\n      }\n    } else {\n      if (bid === \"15\" && team2BookCount < 3) {\n        team2BookCount = 0 - 3;\n      } else if (bid === \"20\" && team2BookCount < 4) {\n        team2BookCount = 0 - 4;\n      } else if (bid === \"25\" && team2BookCount < 5) {\n        team2BookCount = 0 - 5;\n      } else if (bid === \"30\" && team2BookCount < 6) {\n        team2BookCount = 0 - 6;\n      } else if (bid === \"30No\" && team2BookCount < 6) {\n        team2BookCount = 0 - 12;\n      }\n    }\n  }\n\n  return (\n    <div className=\"content\">\n      {stage === \"Deal\" && isPending && (\n        <div className=\"gamewindow loading\">Dealing....</div>\n      )}\n      {stage === \"Bid\" && roundOrder && (\n        <div>\n          <Bidding\n            deckUrl={deckUrl}\n            bidOrder={roundOrder}\n            sendBidData={setBidData}\n          />\n        </div>\n      )}\n      {stage === \"Discard\" && (\n        <div>\n          <Drawing\n            deckUrl={deckUrl}\n            roundOrder={roundOrder}\n            bidData={bidData}\n            sendDiscardData={setDiscardData}\n          />\n        </div>\n      )}\n      {stage === \"Play\" && bookNum === 1 && (\n        <div>\n          <Play\n            deckUrl={deckUrl}\n            player={player}\n            order={roundOrder}\n            sendBookInfo={setBookInfo}\n            book={bookNum}\n            bookInfo={log}\n            bidData={bidData}\n          />\n        </div>\n      )}\n      {stage === \"Play\" && bookNum === 2 && (\n        <div>\n          <Play\n            deckUrl={deckUrl}\n            player={player}\n            order={roundOrder}\n            sendBookInfo={setBookInfo}\n            book={bookNum}\n            bookInfo={log}\n            bidData={bidData}\n          />\n        </div>\n      )}\n      {stage === \"Play\" && bookNum === 3 && (\n        <div>\n          <Play\n            deckUrl={deckUrl}\n            player={player}\n            order={roundOrder}\n            sendBookInfo={setBookInfo}\n            book={bookNum}\n            bookInfo={log}\n            bidData={bidData}\n          />\n        </div>\n      )}\n      {stage === \"Play\" && bookNum === 4 && (\n        <div>\n          <Play\n            deckUrl={deckUrl}\n            player={player}\n            order={roundOrder}\n            sendBookInfo={setBookInfo}\n            book={bookNum}\n            bookInfo={log}\n            bidData={bidData}\n          />\n        </div>\n      )}\n\n      {stage === \"Play\" && bookNum === 5 && (\n        <div>\n          <Play\n            deckUrl={deckUrl}\n            player={player}\n            order={roundOrder}\n            sendBookInfo={setBookInfo}\n            book={bookNum}\n            bookInfo={log}\n            bidData={bidData}\n          />\n        </div>\n      )}\n\n      {stage === \"Winner\" && (\n        <PlayWinner\n          team1={team1BookCount}\n          team2={team2BookCount}\n          sendRoundScore={sendRoundScore}\n          sendStage={setStage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Round;\n","import { useState } from \"react\";\nimport Score from \"./Score/Score\";\nimport Round from \"./Round\";\nimport useFetch from \"./useFetch\";\n\nconst Game = () => {\n  const { data, isPending, error } = useFetch(\n    \"https://deckofcardsapi.com/api/deck/new/\"\n  );\n\n  const [round, setRound] = useState(1);\n  const [gameScore, setGameScore] = useState([0, 0]);\n  const [roundScore, setRoundScore] = useState(null);\n  const [scoreLog, setScoreLog] = useState([]);\n  const [gameOver, setGameOver] = useState(\"\");\n\n  let deckUrl = null;\n  if (data) {\n    deckUrl = \"https://deckofcardsapi.com/api/deck/\" + data.deck_id;\n  }\n\n  let tempScore = [];\n\n  if (roundScore) {\n    scoreLog[round] = roundScore;\n    tempScore[0] = gameScore[0] + roundScore[0];\n    tempScore[1] = gameScore[1] + roundScore[1];\n    console.log(\"scoring\", tempScore, roundScore, round);\n    setScoreLog(scoreLog);\n    setGameScore(tempScore);\n    if (tempScore[0] > 30) {\n      setGameOver(\"Team 1 Wins\");\n    }\n    if (tempScore[1] > 30) {\n      setGameOver(\"Team 2 Wins\");\n    }\n    setRoundScore(null);\n    setRound(round + 1);\n  }\n\n  return (\n    <div className=\"gamewindow\">\n      {isPending && <div className=\"gamewindow loading\">Setting up...</div>}\n      {error && <div className=\"gamewindow loading\">{error}</div>}\n      {deckUrl && !gameOver && (\n        <div className=\"game\">\n          <Score round={round} gameScore={gameScore} />\n          <Round\n            deckUrl={deckUrl}\n            round={round}\n            sendRoundScore={setRoundScore}\n            newRound={true}\n          />\n        </div>\n      )}\n      {gameOver && (\n        <div>\n          <h1>{gameOver}</h1>\n          <h3>Team 1: {gameScore[0]}</h3>\n          <h3>Team 2: {gameScore[1]}</h3>\n          <button>Play Again</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Game;\n","import \"./footer.css\";\n\nconst Footer = () => {\n  return (\n    <div className=\"footer\">\n      <div className=\"footeritem\">\n        <a href=\"https://github.com/dsull29/45s\" target=\"new\">\n          GitHub Page\n        </a>\n      </div>\n      <div className=\"footeritem\">\n        <a href=\"https://github.com/dsull29/45s/issues\" target=\"new\">\n          Report a bug\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default Footer;\n","import { useState } from \"react\";\nimport Header from \"./Header/Header\";\nimport \"./App.css\";\nimport Game from \"./Game\";\nimport Footer from \"./Footer/Footer\";\n\nfunction App() {\n  const [inGame, setInGame] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      {inGame === false && (\n        <div className=\"gamewindow\">\n          <button className=\"startbutton\" onClick={() => setInGame(true)}>\n            Start Game\n          </button>\n        </div>\n      )}\n      {inGame && <Game />}\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}