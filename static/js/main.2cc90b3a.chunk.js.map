{"version":3,"sources":["Header/Header.js","Score/Score.js","useFetch.js","Card.js","Hand.js","deckFuncs.js","cardValues.js","Bidding/bidfuncs.js","Bidding/SelectSuit.js","Bidding/BidInfo.js","Play/PlayCard.js","scripts.js","Play/PlayerTurn.js","Play/PlayLog.js","Play/Turn.js","Play/Play.js","Bidding/MakeBid.js","Bidding/ViewBid.js","Bidding/Bidding.js","Drawing/Draw.js","Drawing/DrawCpu.js","Drawing/Drawing.js","Play/PlayWinner.js","Round.js","Game.js","Footer/Footer.js","App.js","index.js"],"names":["Header","className","Score","round","gameScore","style","textAlign","useFetch","url","useState","data","setData","isPending","setIsPending","error","setError","useEffect","abortCont","AbortController","fetch","signal","then","res","ok","Error","json","catch","err","name","console","log","message","abort","Card","card","src","image","alt","width","height","Hand","deckUrl","player","cards","piles","setHands","setRoundOrder","a","order","getRoundOrder","drawresponse","drawData","hands","hash","toString","code","val","getNewCards","discardCodes","sendDiscardData","sendDiscardPending","discardResponse","length","redrawResponse","redrawData","i","push","assResponse","trumpValues","offSuitValues","heartTrumpOrder","diamondTrumpOrder","spadesTrumpOrder","clubsTrumpOrder","heartOffSuitOrder","diamondOffSuitOrder","spadesOffSuitOrder","clubsOffSuitOrder","evaluateHand","heartHandVal","diamondHandVal","spadeHandVal","clubHandVal","getHeartValue","getDiamondValue","getSpadeValue","getClubValue","getCardValue","trump","indexOf","checkBid","bid","bidData","highBid","highBidder","playerBid","bidder","SelectSuit","sendTrumpSuit","trumpSuit","setTrumpSuit","cardCodes","handValues","orgHandValues","JSON","stringify","bestHandVal","sort","b","parse","getBestSuit","onSubmit","e","preventDefault","value","onChange","target","BidInfo","suit","book","PlayCard","getWorstCard","worstCard","worstCardVal","curCardVal","getBestCard","bestCard","bestCardVal","playerCard","sendPlayerCard","PlayerTurn","sendPlayCard","position","leadSuit","setPlayerCard","playCardNow","PlayLog","bookInfo","x","bookNum","winningPlayer","highCard","DisplayLog","Turn","cardPlay","setCardPlay","taco","playCard","Play","sendBookInfo","playCard1","setPlayCard1","playCard2","setPlayCard2","playCard3","setPlayCard3","playCard4","setPlayCard4","setLeadSuit","turn","setTurn","playedCards","bookOrder","mung","roundOrder","lastWinner","lastBook","getBookOrder","charAt","setTimeout","winner","curBestValue","whoseTurn","checkPlayerPosition","getPlayerCard","num","MakeBid","humanBidder","dealer","sendBid","setPlayerBid","bidOptions","getBid","isDealer","ViewBid","Bidding","bidOrder","sendBidData","bid1","setBid1","bid2","setBid2","bid3","setBid3","bid4","setBid4","setBidData","bids","getPlayerBid","Draw","drawer","sendDraw","discard0","setDiscard0","discard1","setDiscard1","discard2","setDiscard2","discard3","setDiscard3","discard4","setDiscard4","setDiscardPending","discards","type","checked","DrawCpu","discardCount","setDiscardCount","discardPending","Drawing","draw1","setDraw1","draw2","setDraw2","draw3","setDraw3","draw4","setDraw4","whoseRedraw","PlayWinner","team1","team2","sendRoundScore","sendStage","classname","onClick","Round","newRound","stage","setStage","discardData","setDiscardData","setBookInfo","setBookNum","setLog","dealHands","team1BookCount","team2BookCount","highCardWinner","cardValue","Game","setRound","setGameScore","roundScore","setRoundScore","scoreLog","setScoreLog","gameOver","setGameOver","deck_id","tempScore","Footer","href","App","inGame","setInGame","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAUeA,EATA,WACb,OACE,sBAAKC,UAAU,SAAf,UACE,qBAAKA,UAAU,YAAf,gBACA,qBAAKA,UAAU,UAAf,oDCQSC,G,YAVD,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UACtB,OACE,sBAAKH,UAAU,aAAaI,MAAO,CAAEC,UAAW,QAAhD,UACM,sBAAKL,UAAU,iBAAiB,cAAY,aAA5C,qBAAkEG,EAAU,MAC5E,sBAAKH,UAAU,iBAAiB,cAAY,QAA5C,oBAA4DE,KAC5D,sBAAKF,UAAU,iBAAiB,cAAY,aAA5C,qBAAkEG,EAAU,WCyBvEG,EA/BE,SAACC,GACd,MAAwBC,mBAAS,MAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA0BJ,mBAAS,MAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAyBA,OAxBAC,qBAAU,WACN,IAAMC,EAAY,IAAIC,gBAqBtB,OApBAC,MAAMX,EAAK,CAAEY,OAAQH,EAAUG,SAC1BC,MAAK,SAAAC,GACF,IAAKA,EAAIC,GACL,MAAMC,MAAM,0CAEhB,OAAOF,EAAIG,UAEdJ,MAAK,SAAAX,GACFC,EAAQD,GACRG,GAAa,GACbE,EAAS,SAEZW,OAAM,SAAAC,GACc,eAAbA,EAAIC,KACJC,QAAQC,IAAI,kBAEZjB,GAAa,GACbE,EAASY,EAAII,aAGlB,kBAAMd,EAAUe,WACxB,CAACxB,IACG,CAAEE,OAAME,YAAWE,UCpBfmB,EAVF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEZ,OACI,8BACI,qBAAKC,IAAKD,EAAKE,MAAOC,IAAI,OAAOC,MAAM,OAAOC,OAAO,YC2BlDC,EA5BF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,OAAQvC,EAAY,EAAZA,MAC/B,EAAmCI,EACjCkC,EAAU,SAAWC,EAAS,UADxBhC,EAAR,EAAQA,KAAME,EAAd,EAAcA,UAAWE,EAAzB,EAAyBA,MAGrB6B,EAAQ,GAKZ,OAJIjC,GAAQA,EAAKkC,MAAMF,IAAWhC,EAAKkC,MAAMF,GAAQC,QACnDA,EAAQjC,EAAKkC,MAAMF,GAAQC,OAI3B,gCACG7B,GAAS,8BAAMA,IACfF,GAAa,6CACbF,GAAQiC,GACP,qBAAK1C,UAAU,aAAf,SACE,sBAAKA,UAAU,OAAf,UACG0C,EAAM,IAAM,cAAC,EAAD,CAAMT,KAAMS,EAAM,GAAIxC,MAAOA,IACzCwC,EAAM,IAAM,cAAC,EAAD,CAAMT,KAAMS,EAAM,GAAIxC,MAAOA,IACzCwC,EAAM,IAAM,cAAC,EAAD,CAAMT,KAAMS,EAAM,GAAIxC,MAAOA,IACzCwC,EAAM,IAAM,cAAC,EAAD,CAAMT,KAAMS,EAAM,GAAIxC,MAAOA,IACzCwC,EAAM,IAAM,cAAC,EAAD,CAAMT,KAAMS,EAAM,GAAIxC,MAAOA,a,mECvB/C,WACLsC,EACAtC,EACAU,EACAgC,EACAC,GALK,qBAAAC,EAAA,6DAOCC,EAAQC,EAAc9C,GAPvB,SAQCgB,MAAMsB,EAAU,aARjB,uBASsBtB,MAAMsB,EAAU,mBATtC,cASCS,EATD,gBAUkBA,EAAazB,OAV/B,cAUC0B,EAVD,OAWDC,EAAQC,EAAKF,EAASR,OAC1Bd,QAAQC,IAAI,YAAasB,EAAOD,GAZ3B,UAaChC,MACJsB,EAAU,SAAWO,EAAM,GAAK,eAAiBI,EAAM,GAAGE,YAdvD,yBAgBCnC,MACJsB,EAAU,SAAWO,EAAM,GAAK,eAAiBI,EAAM,GAAGE,YAjBvD,yBAmBCnC,MACJsB,EAAU,SAAWO,EAAM,GAAK,eAAiBI,EAAM,GAAGE,YApBvD,yBAsBcnC,MACjBsB,EAAU,SAAWO,EAAM,GAAK,eAAiBI,EAAM,GAAGE,YAvBvD,iBA0BHR,EAAcE,GACdH,EAASO,GACTvC,GAAa,IA5BV,6C,sBAgCP,SAASwC,EAAKV,GA6BZ,MAAO,CA5BO,CACZA,EAAM,GAAGY,KACTZ,EAAM,GAAGY,KACTZ,EAAM,GAAGY,KACTZ,EAAM,IAAIY,KACVZ,EAAM,IAAIY,MAEE,CACZZ,EAAM,GAAGY,KACTZ,EAAM,GAAGY,KACTZ,EAAM,GAAGY,KACTZ,EAAM,IAAIY,KACVZ,EAAM,IAAIY,MAEE,CACZZ,EAAM,GAAGY,KACTZ,EAAM,GAAGY,KACTZ,EAAM,GAAGY,KACTZ,EAAM,IAAIY,KACVZ,EAAM,IAAIY,MAEE,CACZZ,EAAM,GAAGY,KACTZ,EAAM,IAAIY,KACVZ,EAAM,IAAIY,KACVZ,EAAM,IAAIY,KACVZ,EAAM,IAAIY,OAKP,SAASN,EAAc9C,GAC5B,IACI6C,EADAQ,GAAOrD,EAAQ,GAAK,EAWxB,OATY,IAARqD,EACFR,EAAQ,CAAC,QAAS,UAAW,QAAS,OACrB,IAARQ,EACTR,EAAQ,CAAC,UAAW,QAAS,MAAO,SACnB,IAARQ,EACTR,EAAQ,CAAC,QAAS,MAAO,QAAS,WACjB,IAARQ,IACTR,EAAQ,CAAC,MAAO,QAAS,UAAW,UAE/BA,EAoDF,SAAeS,EAAtB,0C,4CAAO,WACLhB,EACAiB,EACAhB,EACAiB,EACAC,GALK,yBAAAb,EAAA,sEAOyB5B,MAAMsB,EAAU,4BAA8BiB,EAAaJ,YAPpF,cAOCO,EAPD,gBAQCA,EAAgBpC,OARjB,uBAUwBN,MAAMsB,EAAU,gBAAkBiB,EAAaI,QAVvE,cAUCC,EAVD,iBAWoBA,EAAetC,OAXnC,QAcL,GAHMuC,EAXD,OAYLnC,QAAQC,IAAI,SAAUY,EAAQgB,EAAaM,EAAWrB,OAClDA,EAAQ,GACRqB,EAAWrB,MACb,IAASsB,EAAI,EAAGA,EAAID,EAAWrB,MAAMmB,OAAQG,IAC3CtB,EAAMuB,KAAKF,EAAWrB,MAAMsB,GAAGV,MAhB9B,iBAkBqBpC,MACxBsB,EAAU,SAAWC,EAAS,eAAiBC,EAAMW,YAnBlD,eAkBCa,EAlBD,iBAqBcA,EAAY1C,OArB1B,iBAuBHkC,EAAgBD,EAAaI,QAC7BF,GAAmB,IAxBhB,6C,iCChIDQ,EAAc,EACf,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAE3DC,EAAgB,CAAC,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAK5DC,EAAkB,CACtB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEIC,EAAoB,CACxB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEIC,EAAmB,CACvB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEIC,EAAkB,CACtB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAGIC,EAAoB,CACxB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEIC,EAAsB,CAC1B,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEIC,EAAqB,CACzB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEIC,EAAoB,CACxB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAGK,SAASC,EAAanC,GAC3B,IAAIoC,EAAcC,EAAgBC,EAAcC,EAChDH,EAAeC,EAAiBC,EAAeC,EAAc,EAE7D,IAAK,IAAIjB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAI/B,EAAOS,EAAMsB,GACjBc,GAAgBI,EAAcjD,GAC9B8C,GAAkBI,EAAgBlD,GAClC+C,GAAgBI,EAAcnD,GAC9BgD,GAAeI,EAAapD,GAG9B,MAAO,CAAC6C,EAAcC,EAAgBC,EAAcC,GAG/C,SAASK,EAAarD,EAAMsD,GACjC,OAAQA,GACN,IAAK,SACH,OAAOL,EAAcjD,GACvB,IAAK,WACH,OAAOkD,EAAgBlD,GACzB,IAAK,SACH,OAAOmD,EAAcnD,GACvB,IAAK,QACH,OAAOoD,EAAapD,GACtB,QACE,OAAO,GAIb,SAASiD,EAAcjD,GACrB,OACEkC,EAAYE,EAAgBmB,QAAQvD,KACpCmC,EAAcM,EAAoBc,QAAQvD,KAC1CmC,EAAcQ,EAAkBY,QAAQvD,KACxCmC,EAAcO,EAAmBa,QAAQvD,IAI7C,SAASkD,EAAgBlD,GACvB,OACEkC,EAAYG,EAAkBkB,QAAQvD,KACtCmC,EAAcK,EAAkBe,QAAQv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","file":"static/js/main.2cc90b3a.chunk.js","sourcesContent":["import \"./header.css\";\nconst Header = () => {\n  return (\n    <div className=\"header\">\n      <div className=\"maintitle\">45</div>\n      <div className=\"tagline\">Straight out the UMD commuter cafe</div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./score.css\";\n\nconst Score = ({ round, gameScore }) => {\n  return (\n    <div className=\"scoreBoard\" style={{ textAlign: \"left\" }}>\n          <div className=\"scoreBoardItem\" data-testid=\"team1Score\">Team 1: {gameScore[0]}</div>\n          <div className=\"scoreBoardItem\" data-testid=\"round\">Round: {round}</div>\n          <div className=\"scoreBoardItem\" data-testid=\"team2Score\">Team 2: {gameScore[1]}</div>\n    </div>\n  );\n};\n\nexport default Score;\n","import { useState, useEffect } from 'react';\n\nconst useFetch = (url) => {\n    const [data, setData] = useState(null);\n    const [isPending, setIsPending] = useState(true);\n    const [error, setError] = useState(null);\n    useEffect(() => {\n        const abortCont = new AbortController();\n        fetch(url, { signal: abortCont.signal })\n            .then(res => {\n                if (!res.ok) {\n                    throw Error('Could not fetch data for that resource');\n                }\n                return res.json();\n            })\n            .then(data => {\n                setData(data);\n                setIsPending(false);\n                setError(null);\n            })\n            .catch(err => {\n                if (err.name === \"AbortError\") {\n                    console.log('fetch aborted')\n                } else {\n                    setIsPending(false);\n                    setError(err.message);\n                }\n            })\n        return () => abortCont.abort();\n    }, [url]);\n    return { data, isPending, error }\n}\n\nexport default useFetch;","const Card = ({ card }) => {\n\n    return (\n        <div>\n            <img src={card.image} alt=\"Card\" width=\"100%\" height=\"100%\" />\n        </div>\n\n    );\n}\n\nexport default Card;","import useFetch from \"./useFetch\";\nimport Card from \"./Card\";\n\nconst Hand = ({ deckUrl, player, round }) => {\n  const { data, isPending, error } = useFetch(\n    deckUrl + \"/pile/\" + player + \"/list/\"\n  );\n  var cards = [];\n  if (data && data.piles[player] && data.piles[player].cards) {\n    cards = data.piles[player].cards;\n  }\n\n  return (\n    <div>\n      {error && <div>{error}</div>}\n      {isPending && <div>Loading...</div>}\n      {data && cards && (\n        <div className=\"handwindow\">\n          <div className=\"hand\">\n            {cards[0] && <Card card={cards[0]} round={round} />}\n            {cards[1] && <Card card={cards[1]} round={round} />}\n            {cards[2] && <Card card={cards[2]} round={round} />}\n            {cards[3] && <Card card={cards[3]} round={round} />}\n            {cards[4] && <Card card={cards[4]} round={round} />}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Hand;\n","export async function dealHands(\n  deckUrl,\n  round,\n  setIsPending,\n  setHands,\n  setRoundOrder\n) {\n  const order = getRoundOrder(round);\n  await fetch(deckUrl + \"/shuffle/\");\n  const drawresponse = await fetch(deckUrl + \"/draw/?count=20\");\n  const drawData = await drawresponse.json();\n  let hands = hash(drawData.cards);\n  console.log(\"handCheck\", hands, drawData);\n  await fetch(\n    deckUrl + \"/pile/\" + order[0] + \"/add/?cards=\" + hands[0].toString()\n  );\n  await fetch(\n    deckUrl + \"/pile/\" + order[1] + \"/add/?cards=\" + hands[1].toString()\n  );\n  await fetch(\n    deckUrl + \"/pile/\" + order[2] + \"/add/?cards=\" + hands[2].toString()\n  );\n  const done = await fetch(\n    deckUrl + \"/pile/\" + order[3] + \"/add/?cards=\" + hands[3].toString()\n  );\n  if (done) {\n    setRoundOrder(order);\n    setHands(hands);\n    setIsPending(false);\n  }\n}\n\nfunction hash(cards) {\n  const hand1 = [\n    cards[0].code,\n    cards[1].code,\n    cards[2].code,\n    cards[12].code,\n    cards[13].code,\n  ];\n  const hand2 = [\n    cards[3].code,\n    cards[4].code,\n    cards[5].code,\n    cards[14].code,\n    cards[15].code,\n  ];\n  const hand3 = [\n    cards[6].code,\n    cards[7].code,\n    cards[8].code,\n    cards[16].code,\n    cards[17].code,\n  ];\n  const hand4 = [\n    cards[9].code,\n    cards[10].code,\n    cards[11].code,\n    cards[18].code,\n    cards[19].code,\n  ];\n  return [hand1, hand2, hand3, hand4];\n}\n\nexport function getRoundOrder(round) {\n  let val = (round - 1) % 4;\n  let order;\n  if (val === 0) {\n    order = [\"Mario\", \"Partner\", \"Luigi\", \"You\"];\n  } else if (val === 1) {\n    order = [\"Partner\", \"Luigi\", \"You\", \"Mario\"];\n  } else if (val === 2) {\n    order = [\"Luigi\", \"You\", \"Mario\", \"Partner\"];\n  } else if (val === 3) {\n    order = [\"You\", \"Mario\", \"Partner\", \"Luigi\"];\n  }\n  return order;\n} // module.exports = { dealHand, asyncCall};\n\n/** Get's the order relative to the last player to win a hand\n ** The player who won the last book goes first\n * @param  {String} lastWinner name of the last player to win a book\n */\nexport function getBookOrder(mung, roundOrder) {\n  let order = [];\n  let lastBook = mung[mung.length - 1];\n  let lastWinner;\n  if (lastBook) {\n    lastWinner = lastBook.winningPlayer;\n  }\n  if (lastWinner === \"Mario\") {\n    order = [\"Mario\", \"Partner\", \"Luigi\", \"You\"];\n  } else if (lastWinner === \"Partner\") {\n    order = [\"Partner\", \"Luigi\", \"You\", \"Mario\"];\n  } else if (lastWinner === \"Luigi\") {\n    order = [\"Luigi\", \"You\", \"Mario\", \"Partner\"];\n  } else if (lastWinner === \"You\") {\n    order = [\"You\", \"Mario\", \"Partner\", \"Luigi\"];\n  } else {\n    order = roundOrder;\n  }\n  return order;\n}\n\n// export async function dealHands(deckUrl,round,setIsPending,setHands,setRoundOrder) {\n//   const order = getRoundOrder(round);\n//   await fetch(deckUrl + \"/shuffle/\");\n//   const drawresponse = await fetch(deckUrl + \"/draw/?count=20\");\n//   const drawData = await drawresponse.json();\n//   let hands = hash(drawData.cards);\n//   console.log(\"handCheck\",hands,drawData)\n//   await fetch(deckUrl + \"/pile/\" + order[0] + \"/add/?cards=\" + hands[0].toString())\n//   await fetch(deckUrl + \"/pile/\" + order[1] + \"/add/?cards=\" + hands[1].toString())\n//   await fetch(deckUrl + \"/pile/\" + order[2] + \"/add/?cards=\" + hands[2].toString())\n//   const done = await fetch(deckUrl + \"/pile/\" + order[3] + \"/add/?cards=\" + hands[3].toString())\n//   if (done) {\n//     setRoundOrder(order)\n//     setHands(hands)\n//     setIsPending(false)\n//   }\n// }\n\n/** Handles discarding, drawing new cards, and assigning that number of cards to the player\n * @param  {String} deckUrl URL of the deck being used for this round\n * @param  {Array} discardCodes Card codes to discard\n * @param  {String} player Player whose hand is being worked\n * @param  {Function} sendDiscardData Callback function to 'Play' to signify the process is done\n */\nexport async function getNewCards(\n  deckUrl,\n  discardCodes,\n  player,\n  sendDiscardData,\n  sendDiscardPending\n) {\n  const discardResponse = await fetch(deckUrl + \"/pile/discard/add/?cards=\" + discardCodes.toString())\n  await discardResponse.json()\n  //  const redrawCount = 5 - discardData.piles[player].remaining;\n  const redrawResponse = await fetch(deckUrl + \"/draw/?count=\" + discardCodes.length);\n  const redrawData = await redrawResponse.json();\n  console.log(\"redraw\", player, discardCodes,redrawData.cards);\n  let cards = [];\n  if (redrawData.cards) {\n    for (let i = 0; i < redrawData.cards.length; i++)\n      cards.push(redrawData.cards[i].code);\n  }\n  const assResponse = await fetch(\n    deckUrl + \"/pile/\" + player + \"/add/?cards=\" + cards.toString()\n  )\n  const done = await assResponse.json();\n  if (done) {\n    sendDiscardData(discardCodes.length)\n    sendDiscardPending(false)\n  }\n}\n","const trumpValues = [\n    -35, -21, -18, -13, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1,\n  ];\n  const offSuitValues = [13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0];\n  const offSuitValuesNonLead = [\n    27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14,\n  ];\n  \n  const heartTrumpOrder = [\n    \"5H\",\n    \"JH\",\n    \"AH\",\n    \"KH\",\n    \"QH\",\n    \"0H\",\n    \"9H\",\n    \"8H\",\n    \"7H\",\n    \"6H\",\n    \"4H\",\n    \"3H\",\n    \"2H\",\n  ];\n  const diamondTrumpOrder = [\n    \"5D\",\n    \"JD\",\n    \"AH\",\n    \"AD\",\n    \"KD\",\n    \"QD\",\n    \"0D\",\n    \"9D\",\n    \"8D\",\n    \"7D\",\n    \"6D\",\n    \"4D\",\n    \"3D\",\n    \"2D\",\n  ];\n  const spadesTrumpOrder = [\n    \"5S\",\n    \"JS\",\n    \"AH\",\n    \"AS\",\n    \"KS\",\n    \"QS\",\n    \"2S\",\n    \"3S\",\n    \"4S\",\n    \"6S\",\n    \"7S\",\n    \"8S\",\n    \"9S\",\n    \"0S\",\n  ];\n  const clubsTrumpOrder = [\n    \"5C\",\n    \"JC\",\n    \"AH\",\n    \"AC\",\n    \"KC\",\n    \"QC\",\n    \"2C\",\n    \"3C\",\n    \"4C\",\n    \"6C\",\n    \"7C\",\n    \"8C\",\n    \"9C\",\n    \"0C\",\n  ];\n  \n  const heartOffSuitOrder = [\n    \"2H\",\n    \"3H\",\n    \"4H\",\n    \"5H\",\n    \"6H\",\n    \"7H\",\n    \"8H\",\n    \"9H\",\n    \"0H\",\n    \"JH\",\n    \"QH\",\n    \"KH\",\n  ];\n  const diamondOffSuitOrder = [\n    \"AD\",\n    \"2D\",\n    \"3D\",\n    \"4D\",\n    \"5D\",\n    \"6D\",\n    \"7D\",\n    \"8D\",\n    \"9D\",\n    \"0D\",\n    \"JD\",\n    \"QD\",\n    \"KD\",\n  ];\n  const spadesOffSuitOrder = [\n    \"0S\",\n    \"9S\",\n    \"8S\",\n    \"7S\",\n    \"6S\",\n    \"5S\",\n    \"4S\",\n    \"3S\",\n    \"2S\",\n    \"AS\",\n    \"JS\",\n    \"QS\",\n    \"KS\",\n  ];\n  const clubsOffSuitOrder = [\n    \"0C\",\n    \"9C\",\n    \"8C\",\n    \"7C\",\n    \"6C\",\n    \"5C\",\n    \"4C\",\n    \"3C\",\n    \"2C\",\n    \"AC\",\n    \"JC\",\n    \"QC\",\n    \"KC\",\n  ];\n\n  export function evaluateHand(cards) {\n    let heartHandVal, diamondHandVal, spadeHandVal, clubHandVal;\n    heartHandVal = diamondHandVal = spadeHandVal = clubHandVal = 0;\n  \n    for (let i = 0; i < 5; i++) {\n      var card = cards[i];\n      heartHandVal += getHeartValue(card);\n      diamondHandVal += getDiamondValue(card);\n      spadeHandVal += getSpadeValue(card);\n      clubHandVal += getClubValue(card);\n    }\n  \n    return [heartHandVal, diamondHandVal, spadeHandVal, clubHandVal];\n  }\n  \n  export function getCardValue(card, trump) {\n    switch (trump) {\n      case \"Hearts\":\n        return getHeartValue(card);\n      case \"Diamonds\":\n        return getDiamondValue(card);\n      case \"Spades\":\n        return getSpadeValue(card);\n      case \"Clubs\":\n        return getClubValue(card);\n      default:\n        return 0;\n    }\n  }\n  \n  function getHeartValue(card) {\n    return (\n      trumpValues[heartTrumpOrder.indexOf(card)] ||\n      offSuitValues[diamondOffSuitOrder.indexOf(card)] ||\n      offSuitValues[clubsOffSuitOrder.indexOf(card)] ||\n      offSuitValues[spadesOffSuitOrder.indexOf(card)]\n    );\n  }\n  \n  function getDiamondValue(card) {\n    return (\n      trumpValues[diamondTrumpOrder.indexOf(card)] ||\n      offSuitValues[heartOffSuitOrder.indexOf(card)] ||\n      offSuitValues[clubsOffSuitOrder.indexOf(card)] ||\n      offSuitValues[spadesOffSuitOrder.indexOf(card)]\n    );\n  }\n  \n  function getSpadeValue(card) {\n    return (\n      trumpValues[spadesTrumpOrder.indexOf(card)] ||\n      offSuitValues[diamondOffSuitOrder.indexOf(card)] ||\n      offSuitValues[clubsOffSuitOrder.indexOf(card)] ||\n      offSuitValues[heartOffSuitOrder.indexOf(card)]\n    );\n  }\n  \n  function getClubValue(card) {\n    return (\n      trumpValues[clubsTrumpOrder.indexOf(card)] ||\n      offSuitValues[diamondOffSuitOrder.indexOf(card)] ||\n      offSuitValues[heartOffSuitOrder.indexOf(card)] ||\n      offSuitValues[spadesOffSuitOrder.indexOf(card)]\n    );\n  }","export const checkBid = (bid, bidData) => {\n  // console.log(\"incheckBid\",bid,bidData)\n  let highBid, highBidder, suit;\n  if (bid.playerBid === \"Pass\") {\n    // return {null, null};\n  } else if (bid.playerBid === \"Take\") {\n    highBid = bidData.highBid;\n    highBidder = bid.bidder;\n  } else if (bid.playerBid) {\n    highBid = bid.playerBid;\n    highBidder = bid.bidder;\n  }\n\n  return { highBid, highBidder };\n};\n\n/** Gets the players bid based on an evaluation of their hand and prev bids this round\n * @param  {Array} handValues array of hand evaluations relative to suits\n * @param  {Object} bidData {highBid: highest bid made so far\n *                           highBidder: player who made the highest bid}\n * @returns player's bid\n */\nexport function getBid(handValues, bidData) {\n  const bidOptions = [\"Pass\", \"15\", \"20\", \"25\", \"30\", \"30 No Draw\"];\n  var bestHandVal = handValues.sort((a, b) => {\n    return a - b;\n  })[0];\n  var playerBid = null;\n\n  // the lower the hand value the better, which makes the comparators the floor\n  // TODO add 25 and 30 options\n  // TODO add forced 15s when a player is holding a 5 and no bids are in yet\n  // TODO this bid thresholds are abirtrary. try to get a better handle on what\n  //   these look like\n  // TODO needs an exception where if the player is dealer they can take the bid\n\n  if (bestHandVal < 0 - 25) {\n    playerBid = \"20\";\n  } else if (bestHandVal < 0 - 5) {\n    playerBid = \"15\";\n  }\n\n  if (\n    playerBid &&\n    bidOptions.indexOf(playerBid) <= bidOptions.indexOf(bidData.highBid)\n  ) {\n    playerBid = \"Pass\";\n  }\n\n  return playerBid;\n}\n\nexport function getBestSuit(handValues) {\n  let suit;\n  const orgHandValues = JSON.stringify(handValues);\n  const bestHandVal = handValues.sort(function (a, b) {\n    return a - b;\n  })[0];\n\n  const suits = [\"Hearts\", \"Diamonds\", \"Spades\", \"Clubs\"];\n  const suitNum = JSON.parse(orgHandValues).indexOf(bestHandVal);\n  suit = suits[suitNum];\n  return suit;\n}\n","import { useState } from \"react\";\nimport { evaluateHand } from \"../cardValues\";\nimport Hand from \"../Hand\";\nimport useFetch from \"../useFetch\";\nimport { getBestSuit } from \"./bidfuncs\";\nimport \"../Play/play.css\";\n\nconst SelectSuit = ({ deckUrl, bidData, sendTrumpSuit }) => {\n    const [trumpSuit, setTrumpSuit] = useState(\"Hearts\");\n    const bidder = bidData.highBidder\n    const url = deckUrl + \"/pile/\" + bidder + \"/list/\";\n    const { data, error, isPending } = useFetch(url);\n\n    const player = \"You\";\n    console.log(\"bid\",bidder,bidData)\n    let humanBidder;\n    if (data) {\n        if (bidder === player) {\n          humanBidder = true;\n        } else {\n          humanBidder = false;\n          let cards = data.piles[bidder].cards;\n          let card;\n          let cardCodes = []\n          for (card of cards) {\n              cardCodes.push(card.code)\n          }\n          let handValues = evaluateHand(cardCodes);\n          let trumpSuit = getBestSuit(handValues)\n        sendTrumpSuit(trumpSuit)\n        }\n      }\n\n      const handleSuitSubmit = (e) => {\n        e.preventDefault();\n        sendTrumpSuit(trumpSuit)\n    };\n\n    return (\n        <div>\n            {bidData.highBidder === \"You\" && (\n            <div className=\"playeraction\">\n               <form onSubmit={handleSuitSubmit}>\n                        <select\n                         value={trumpSuit}\n                            onChange={(e) => setTrumpSuit(e.target.value)}>\n                            <option value=\"Hearts\">Hearts</option>\n                            <option value=\"Diamonds\">Diamonds</option>\n                            <option value=\"Spades\">Spades</option>\n                            <option value=\"Clubs\">Clubs</option>\n                        </select>\n                        <button>Select Suit</button>\n                    </form>\n                </div>\n                )}\n        </div>)\n}\n\nexport default SelectSuit;","import \"./bidding.css\";\n\n/** Display of bid information found on the discard and play views\n * @param  {Object} {bidData object of data related ot the bid\n * @param  {String} suit} Trump suit\n * @param  {Int}\n */\nconst BidInfo = ({ bidData, suit, book }) => {\n  var bid = bidData.highBid;\n  var bidder = bidData.highBidder;\n\n  return (\n    <div className=\"bidstripe\">\n        {!suit && (\n          <div className=\"bidinfo\">{bid + \" from \" + bidder + \" in...\"}</div>\n        )}\n        {suit && (\n          <div className=\"bidinfo\">\n            {bid + \" from \" + bidder + \" in \" + suit}\n          </div>\n        )}\n      </div>\n  );\n};\n\nexport default BidInfo;\n","const PlayCard = ({ card}) => {\n\n    return (\n        <div>\n            {card && <img src={card.image} alt=\"Card\" height=\"150px\" />}\n        </div>\n\n    );\n}\n\nexport default PlayCard;","import { getCardValue } from \"./cardValues\";\n\nexport function getDealer(dealers) {\n  let order = dealers;\n  let dealer = order.shift();\n  // TODO fix the order here\n  order.push(dealer);\n  return { dealer, order };\n}\n\nexport function getWorstCard(cards, trump) {\n  var worstCard = null;\n  var worstCardVal = 0 - 50;\n\n  for (let i = 0; i < cards.length; i++) {\n    var curCardVal = getCardValue(cards[i].code, trump);\n    if (curCardVal > worstCardVal) {\n      worstCardVal = curCardVal;\n      worstCard = i;\n    }\n  }\n  return cards[worstCard];\n}\n\nexport function getBestCard(cards, trump) {\n  var bestCard = null;\n  var bestCardVal = 50;\n\n  for (let i = 0; i < cards.length; i++) {\n    var curCardVal = getCardValue(cards[i].code, trump);\n    if (curCardVal < bestCardVal) {\n      bestCardVal = curCardVal;\n      bestCard = i;\n    }\n  }\n\n  return cards[bestCard];\n}\n\nexport function getPlayerHand(url, player) {\n  var tempData;\n\n  const playerHand = fetch(url)\n    .then((res) => {\n      if (!res.ok) {\n        throw Error(\"Could not fetch data for that resource\");\n      }\n      return res.json();\n    })\n    .then((data) => {});\n  playerHand.then((data) => {\n    return data;\n  });\n\n  return tempData;\n}\n\n/** Moves the player's selected card to the discard pile and plays the card on the table\n * @param  {String} deckUrl URL to the deck being used\n * @param  {String} playerCard Card code of the card being played\n * @param  {Function} sendPlayerCard Calls back to play with the PlayerCard\n */\nexport async function playCardNow(deckUrl, playerCard, sendPlayerCard) {\n  await fetch(\n    deckUrl + \"/pile/discard/add/?cards=\" + playerCard.code\n  )\n    .then((res) => {\n      if (!res.ok) {\n        throw Error(\"Could not fetch data for that resource\");\n      }\n      return res.json();\n    })\n    .then((data) => {\n      return playerCard;\n    });\n  sendPlayerCard(playerCard);\n}\n\n/** finds the players position\n * @param  {String} player handle of the player \n * @param  {Array} order order of players\n */\n export function checkPlayerPosition(player, order) {\n  let num = order.indexOf(player) + 1;\n  return num;\n}","import { useState } from \"react\";\nimport useFetch from \"../useFetch\";\nimport { playCardNow } from \"../scripts\";\n\nconst PlayerTurn = ({\n  deckUrl,\n  player,\n  position,\n  leadSuit,\n  sendPlayCard,\n  trumpSuit,\n}) => {\n  const [playerCard, setPlayerCard] = useState(0);\n\n  const url = deckUrl + \"/pile/\" + player + \"/list/\";\n  const { data, error, isPending } = useFetch(url);\n\n  var cards = [];\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    playCardNow(deckUrl, cards[playerCard], sendPlayCard);\n  };\n\n  if (data) {\n    cards = data.piles[player].cards;\n  }\n\n  return (\n    <div>\n      {data && (\n        <form onSubmit={handleSubmit}>\n          <select\n            value={playerCard}\n            onChange={(e) => setPlayerCard(e.target.value)}\n          >\n            {cards[0] && <option value={0}>{cards[0].code}</option>}\n            {cards[1] && <option value={1}>{cards[1].code}</option>}\n            {cards[2] && <option value={2}>{cards[2].code}</option>}\n            {cards[3] && <option value={3}>{cards[3].code}</option>}\n            {cards[4] && <option value={4}>{cards[4].code}</option>}\n          </select>\n          <button>Play Card</button>\n        </form>\n      )}\n    </div>\n  );\n};\n\nexport default PlayerTurn;\n","import \"./play.css\";\n\nconst PlayLog = ({bookInfo}) => {\n\n    let book;\n    function DisplayLog() {\n        let x = [];\n    \n        for (book of bookInfo) {\n          x.push(\n            <div className=\"playboardlogentry\">\n              {book.bookNum}:{\" \"}\n              {`${\n                book.winningPlayer === \"You\" || book.winningPlayer === \"Partner\"\n                  ? \"Team 1\"\n                  : \"Team 2\"\n              }`}{\" \"}\n              {book.highCard} {book.winningPlayer}\n            </div>\n          );\n        }\n    \n        return <div>{x}</div>;\n      }\n\n    return ( \n        <div className=\"playboardlog\">\n        <div className=\"playboardheader\">Play Log</div>\n        {bookInfo && DisplayLog()}\n        \n        </div>\n     );\n}\n \nexport default PlayLog;","import { useState } from \"react\";\nimport { getBestCard, getWorstCard } from \"../scripts\";\nimport useFetch from \"../useFetch\";\n\nconst Turn = ({ deckUrl, player, position, leadSuit, sendPlayCard, trumpSuit }) => {\n\n    const url = deckUrl + \"/pile/\" + player + \"/list/\";\n    const { data, error, isPending } = useFetch(url);\n    const [cardPlay,setCardPlay] = useState(null);\n\n    var cards = [];\n\n    if (data && !cardPlay) {\n        cards = data.piles[player].cards;\n        var taco = playCard(position, cards, trumpSuit);\n        \n        fetch(deckUrl + \"/pile/discard/add/?cards=\" + taco.code)\n            .then(res => {\n                if (!res.ok) {\n                    throw Error('Could not fetch data for that resource');\n                }\n                return res.json();\n            })\n            .then(data => {\n                setCardPlay(taco)\n            });\n    }\n\n    if (data && cardPlay) {\n        sendPlayCard(cardPlay)\n    }\n\n    return (\n        <div>\n            {error && <div>{error}</div>}\n            {isPending && <div>Thinking....</div>}\n            {data && <div>Dawn</div>};\n        </div>\n    )\n}\n\nexport default Turn;\n\nfunction playCard(position, cards, trumpSuit) {\n    var card;\n    switch (position) {\n        case 1:\n            card = getWorstCard(cards, trumpSuit);\n            break;\n        case 2:\n            card = getWorstCard(cards, trumpSuit);\n            break;\n        case 3:\n            card = getBestCard(cards, trumpSuit);\n            break;\n        case 4:\n            card = getBestCard(cards, trumpSuit);\n            break;\n        default:\n            console.log(\"defaultHit\")\n\n    }\n    return card\n}","import { useState } from \"react\";\nimport { getCardValue } from \"../cardValues\";\nimport { getBookOrder } from \"../deckFuncs\";\nimport Hand from \"../Hand\";\nimport PlayCard from \"./PlayCard\";\nimport PlayerTurn from \"./PlayerTurn\";\nimport PlayLog from \"./PlayLog\";\nimport Turn from \"./Turn\";\nimport \"./play.css\";\n\nconst Play = ({\n  deckUrl,\n  player,\n  order,\n  sendBookInfo,\n  book,\n  trumpSuit,\n  bookInfo,\n}) => {\n  const [playCard1, setPlayCard1] = useState(\"\");\n  const [playCard2, setPlayCard2] = useState(\"\");\n  const [playCard3, setPlayCard3] = useState(\"\");\n  const [playCard4, setPlayCard4] = useState(\"\");\n  const [leadSuit, setLeadSuit] = useState(\"\");\n  const [turn, setTurn] = useState(1);\n\n  const playedCards = [playCard1, playCard2, playCard3, playCard4];\n  let bookNum = book;\n  let bookOrder = getBookOrder(bookInfo, order);\n\n  if (turn === 1 && playCard1) {\n    let guac = playCard1.code.charAt(1);\n    setLeadSuit(guac);\n    setTurn(2);\n  } else if (turn === 2 && playCard2) {\n    setTurn(3);\n  } else if (turn === 3 && playCard3) {\n    setTurn(4);\n  } else if (turn === 4 && playCard4) {\n    setTimeout(() => {\n      setTurn(5);\n    }, 2000);\n  } else if (turn === 5) {\n    let curBestValue = 50;\n    let winner;\n    for (let i = 0; i < playedCards.length; i++) {\n      let val = getCardValue(playedCards[i].code, trumpSuit);\n      if (val < curBestValue) {\n        curBestValue = val;\n        winner = i;\n      }\n    }\n    let highCard = playedCards[winner].code;\n    let winningPlayer = bookOrder[winner];\n    let tempLog = { bookNum, winningPlayer, highCard };\n    sendBookInfo(tempLog);\n  }\n\n  function whoseTurn(val, sendPlayCard) {\n    if (checkPlayerPosition(player, bookOrder) === val) {\n      return (\n        <PlayerTurn\n          deckUrl={deckUrl}\n          player={player}\n          position={val}\n          sendPlayCard={sendPlayCard}\n          trumpSuit={trumpSuit}\n          leadSuit={leadSuit}\n        />\n      );\n    } else {\n      return (\n        <Turn\n          deckUrl={deckUrl}\n          player={bookOrder[val - 1]}\n          position={val}\n          sendPlayCard={sendPlayCard}\n          trumpSuit={trumpSuit}\n        />\n      );\n    }\n  }\n\n  function getPlayerCard(player, order) {\n    let num = order.indexOf(player);\n    return playedCards[num];\n  }\n\n  return (\n    <div>\n      <div className=\"playboard\">\n        <div className=\"playboardrow\">\n          <div className=\"playboardbox\">\n            <div className=\"playboardbooknum\">Book: {book || 1} </div>\n          </div>\n          <div className=\"playboardbox player3\">\n            <PlayCard card={getPlayerCard(\"Partner\", bookOrder)} />\n          </div>\n          <div className=\"playboardbox\">\n            <PlayLog bookInfo={bookInfo} />\n          </div>\n        </div>\n\n        <div className=\"playboardrow\">\n          <div className=\"playboardbox player2\">\n            <PlayCard card={getPlayerCard(\"Mario\", bookOrder)} />\n          </div>\n          <div className=\"playboardbox\"></div>\n          <div className=\"playboardbox player4\">\n            <PlayCard card={getPlayerCard(\"Luigi\", bookOrder)} />\n          </div>\n        </div>\n\n        <div className=\"playboardrow\">\n          <div className=\"playboardbox\"></div>\n          <div className=\"playboardbox player1\">\n            <PlayCard card={getPlayerCard(\"You\", bookOrder)} />\n          </div>\n          <div className=\"playboardbox\"></div>\n        </div>\n      </div>\n\n      <div className=\"playerwindow\">\n        <Hand deckUrl={deckUrl} player={player} />\n        <div className=\"playeraction\">\n          {turn > 0 && !playCard1 && whoseTurn(1, setPlayCard1)}\n          {turn > 1 && !playCard2 && whoseTurn(2, setPlayCard2)}\n          {turn > 2 && !playCard3 && whoseTurn(3, setPlayCard3)}\n          {turn > 3 && !playCard4 && whoseTurn(4, setPlayCard4)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Play;\n\n/** finds the human players position\n * @param  {String} player player name\n * @param  {Array} order order of players (currently fixed to roundOrder)\n */\nexport function checkPlayerPosition(player, order) {\n  let num = order.indexOf(player) + 1;\n  return num;\n}\n","import { useState } from \"react\";\nimport { evaluateHand } from \"../cardValues\";\nimport useFetch from \"../useFetch\";\nimport { getBid } from \"./bidfuncs\";\n\nconst MakeBid = ({ deckUrl, bidder, bidData, dealer, sendBid }) => {\n  const [playerBid, setPlayerBid] = useState(\"Pass\");\n  const player = \"You\";\n  const url = deckUrl + \"/pile/\" + bidder + \"/list/\";\n  const { data, error, isPending } = useFetch(url);\n\n  let highBid = bidData.highBid;\n  let humanBidder;\n\n  if (data) {\n    if (bidder === player) {\n      humanBidder = true;\n    } else {\n      humanBidder = false;\n      let cards = data.piles[bidder].cards;\n      let card;\n      let cardCodes = []\n      for (card of cards) {\n          cardCodes.push(card.code)\n      }\n      let handValues = evaluateHand(cardCodes);\n      let playerBid = getBid(handValues,bidData);\n      let bidYooo = {bidder,playerBid}\n      sendBid(bidYooo)\n    }\n  }\n\n  let isDealer = player === dealer;\n  \n  const handleSubmit = () => {\n      sendBid({\"bidder\": bidder,\n               playerBid })\n  }\n\n  return (\n    <div className=\"playeraction\">\n      {humanBidder && (\n        <div>\n          <form onSubmit={handleSubmit}>\n            <select\n              value={playerBid}\n              onChange={(e) => setPlayerBid(e.target.value)}\n            >\n              {isDealer && <option value=\"Take\">Take</option>}\n              <option value=\"Pass\">Pass</option>\n{/* TODO bidOptions need to be better */}\n              {highBid === null && <option value=\"15\">15</option>}\n              {highBid === \"15\" && <option value=\"20\">20</option>}\n              <option value=\"25\">25</option>\n              <option value=\"30\">30</option>\n              <option value=\"30No\">30 No Draw</option>\n            </select>\n            <button>Place Bid</button>\n          </form>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MakeBid;\n","const ViewBid = ({ bid }) => {\n  console.log(\"ViewBid\", bid);\n\n  return (\n    <div className=\"playermessagebox\">\n      {bid && \n        <div>\n          <div className=\"playermessageboxheader\">{bid.bidder}</div>\n          <div className=\"playermessageboxtext\">{bid.playerBid || \"Pass\"}</div>\n        </div>}\n      {!bid &&\n        <div>\n        <div className=\"playermessageboxheader\">You</div>\n        <div className=\"playermessageboxtext\">We're waiting!</div>\n        </div>}\n    </div>\n  )\n};\n\nexport default ViewBid;\n","import { useEffect, useState } from \"react\";\nimport { checkBid } from \"./bidfuncs\";\nimport MakeBid from \"./MakeBid\";\nimport \"./bidding.css\";\nimport Hand from \"../Hand\";\nimport ViewBid from \"./ViewBid\";\nimport ViewBidLog from \"./ViewBidLog\";\nimport SelectSuit from \"./SelectSuit\";\n\nconst Bidding = ({ deckUrl, bidOrder, sendBidData }) => {\n  const [bid1, setBid1] = useState(\"\");\n  const [bid2, setBid2] = useState(\"\");\n  const [bid3, setBid3] = useState(\"\");\n  const [bid4, setBid4] = useState(\"\");\n  const [trumpSuit, setTrumpSuit] = useState(\"\");\n  const [turn, setTurn] = useState(1);\n  const [bidData, setBidData] = useState({\n    highBid: null,\n    highBidder: null,\n    trumpSuit: null,\n  });\n\n  useEffect(() => {\n    // setBid1(\"\");\n    // setBid2(\"\");\n    // setBid3(\"\");\n    // setBid4(\"\");\n    setBidData({ highBid: null, highBidder: null, trumpSuit: null });\n  }, [bidOrder]);\n\n  // need to call this one bidder at a time in it's own object.\n  // probably want a nested structure like 'Play' where each\n  // CPU player has their own component\n  // and then the human player has their component\n  // *** consider rolling SelectSuit under that umbrella as well.\n\n  let bidder = bidOrder[turn - 1];\n  // const bidOptions = [\"Pass\", \"15\", \"20\", \"25\", \"30\", \"30 No Draw\"];\n  const dealer = bidOrder[3];\n\n  switch (turn) {\n    case 1: {\n      if (bid1) {\n        let { highBid, highBidder } = checkBid(bid1, bidData);\n        if (highBid) {\n          setBidData({ highBid, highBidder, trumpSuit });\n        }\n        setTurn(2);\n      }\n      break;\n    }\n    case 2: {\n      if (bid2) {\n        let { highBid, highBidder } = checkBid(bid2, bidData);\n        if (highBid) {\n          setBidData({ highBid, highBidder, trumpSuit });\n        }\n        setTurn(3);\n      }\n      break;\n    }\n    case 3: {\n      if (bid3) {\n        let { highBid, highBidder } = checkBid(bid3, bidData);\n        if (highBid) {\n          setBidData({ highBid, highBidder, trumpSuit });\n        }\n        setTurn(4);\n      }\n      break;\n    }\n    case 4: {\n      if (bid4) {\n        let { highBid, highBidder } = checkBid(bid4, bidData);\n        if (highBid) {\n          setBidData({ highBid, highBidder, trumpSuit });\n        } else if (!bidData.highBid) {\n          setBidData({ highBid: \"15\", highBidder: dealer, trumpSuit });\n        }\n        setTurn(5);\n      }\n      break;\n    }\n    case 5: {\n      if (trumpSuit) {\n        let highBid  = bidData.highBid\n        let highBidder = bidData.highBidder\n        setBidData({ highBid, highBidder, trumpSuit });\n        setTurn(6);\n      }\n      break;\n    }\n\n    case 6: {\n      sendBidData(bidData);\n    }\n  }\n\n  const bids = [bid1, bid2, bid3, bid4];\n\n  function getPlayerBid(player, order) {\n    let num = order.indexOf(player);\n    console.log(\"crash\", player, bids, num);\n    return bids[num];\n  }\n\n  return (\n    <div>\n      <div className=\"playboard\">\n        <div className=\"playboardrow\">\n          <div className=\"playboardbox\"></div>\n          <div className=\"playboardbox\">\n            <ViewBid bid={getPlayerBid(\"Partner\", bidOrder)} />\n          </div>\n          <div className=\"playboardbox\">\n            {/* <ViewBidLog bids={bids} bidOrder={bidOrder} bidData={bidData} /> */}\n          </div>\n        </div>\n\n        <div className=\"playboardrow\">\n          <div className=\"playboardbox\">\n            <ViewBid bid={getPlayerBid(\"Mario\", bidOrder)} />\n          </div>\n          <div className=\"playboardbox\"></div>\n          <div className=\"playboardbox\">\n            <ViewBid bid={getPlayerBid(\"Luigi\", bidOrder)} />\n          </div>\n        </div>\n\n        <div className=\"playboardrow\">\n          <div className=\"playboardbox\"></div>\n          <div className=\"playboardbox\">\n            <ViewBid bid={getPlayerBid(\"You\", bidOrder)} />\n          </div>\n          <div className=\"playboardbox\"></div>\n        </div>\n      </div>\n\n      <div className=\"playerwindow\">\n        <Hand deckUrl={deckUrl} player={bidder} />\n        {turn === 1 && (\n          <MakeBid\n            deckUrl={deckUrl}\n            bidder={bidder}\n            bidData={bidData}\n            dealer={dealer}\n            sendBid={setBid1}\n          />\n        )}\n        {turn === 2 && (\n          <MakeBid\n            deckUrl={deckUrl}\n            bidder={bidder}\n            bidData={bidData}\n            dealer={dealer}\n            sendBid={setBid2}\n          />\n        )}\n        {turn === 3 && (\n          <MakeBid\n            deckUrl={deckUrl}\n            bidder={bidder}\n            bidData={bidData}\n            dealer={dealer}\n            sendBid={setBid3}\n          />\n        )}\n        {turn === 4 && (\n          <MakeBid\n            deckUrl={deckUrl}\n            bidder={bidder}\n            bidData={bidData}\n            dealer={dealer}\n            sendBid={setBid4}\n          />\n        )}\n        {turn === 5 && (\n          <SelectSuit\n            deckUrl={deckUrl}\n            bidData={bidData}\n            sendTrumpSuit={setTrumpSuit}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Bidding;\n","import { useState } from \"react\";\nimport { getNewCards } from \"../deckFuncs\";\nimport Hand from \"../Hand\";\nimport useFetch from \"../useFetch\";\nimport \"./drawing.css\";\n\nconst Draw = ({ deckUrl, drawer, trumpSuit, sendDraw }) => {\n  const [discard0, setDiscard0] = useState(false);\n  const [discard1, setDiscard1] = useState(false);\n  const [discard2, setDiscard2] = useState(false);\n  const [discard3, setDiscard3] = useState(false);\n  const [discard4, setDiscard4] = useState(false);\n  const [discardPending,setDiscardPending] = useState(true)\n\n  const url = deckUrl + \"/pile/\" + drawer + \"/list/\";\n  const { data, error, isPending } = useFetch(url);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const discards = [discard0, discard1, discard2, discard3, discard4];\n    let discardCodes = [];\n    for (let i = 0; i < 5; i++) {\n      discards[i] && discardCodes.push(data.piles[drawer].cards[i].code);\n    }\n    getNewCards(deckUrl, discardCodes, drawer, sendDraw,setDiscardPending);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Hand deckUrl={deckUrl} player={drawer} />\n      <div className=\"handwindow\">\n      <div className=\"discardHand\">\n        <div className=\"discardbox\">\n        <input\n          type=\"checkbox\"\n          name=\"card0\"\n          onChange={(e) => setDiscard0(e.target.checked)}\n          checked={discard0}\n        ></input>\n        </div>\n        <div className=\"discardbox\">\n\n        <input\n          type=\"checkbox\"\n          name=\"card1\"\n          onChange={(e) => setDiscard1(e.target.checked)}\n          checked={discard1}\n        ></input>\n        </div>\n        <div className=\"discardbox\">\n\n        <input\n          type=\"checkbox\"\n          name=\"card2\"\n          onChange={(e) => setDiscard2(e.target.checked)}\n          checked={discard2}\n        ></input>\n        </div>\n        <div className=\"discardbox\">\n\n        <input\n          type=\"checkbox\"\n          name=\"card3\"\n          onChange={(e) => setDiscard3(e.target.checked)}\n          checked={discard3}\n        ></input>\n        </div>\n        <div className=\"discardbox\">\n\n        <input\n          type=\"checkbox\"\n          name=\"card4\"\n          onChange={(e) => setDiscard4(e.target.checked)}\n          checked={discard4}\n        ></input>\n        </div>\n      </div>\n      <div className = \"playeraction\">\n      </div>\n      </div>\n      <button>Discard Selected</button>\n\n    </form>\n  );\n};\n\nexport default Draw;\n","import { useEffect, useState } from \"react\";\nimport { getNewCards } from \"../deckFuncs\";\nimport useFetch from \"../useFetch\";\n\nconst DrawCpu = ({ deckUrl, drawer, trumpSuit, sendDraw  }) => {\n\n    const [discardCount,setDiscardCount] = useState(null);\n    const [discardPending,setDiscardPending] = useState(true)\n    const url = deckUrl + \"/pile/\" + drawer + \"/list/\";\n    const { data, error, isPending } = useFetch(url);\n\n    useEffect(() => {\n        if (data) {\n            let card;\n        let cards = data.piles[drawer].cards;\n        let discardCodes = [];\n    \n        for (card of cards) {\n        if (card.code !== \"AH\" && card.code.charAt(1) !== trumpSuit.charAt(0)) {\n            discardCodes.push(card.code);\n      }\n    }\n        getNewCards(deckUrl, discardCodes, drawer, setDiscardCount, setDiscardPending);\n      }}, [data]);\n\n    if (data && discardCount && !discardPending)  {\n        sendDraw(discardCount)\n    }\n\n    return (\n        <div>\n            {error && <div>{error}</div>}\n            {isPending && <div>Thinking....</div>}\n            {data && <div>Done</div>};\n        </div>\n    )\n}\n\nexport default DrawCpu;\n","import { useEffect, useState } from \"react\";\nimport { checkPlayerPosition } from \"../Play/Play\";\nimport Draw from \"./Draw\";\nimport DrawCpu from \"./DrawCpu\";\n\nconst Drawing = ({ deckUrl, roundOrder, trumpSuit, sendDiscardData }) => {\n  const [draw1, setDraw1] = useState(\"\");\n  const [draw2, setDraw2] = useState(\"\");\n  const [draw3, setDraw3] = useState(\"\");\n  const [draw4, setDraw4] = useState(\"\");\n  const [turn, setTurn] = useState(1);\n\n  const player = \"You\";\n  switch (turn) {\n    case 1: {\n      if (draw1) {\n        setTurn(2);\n      }\n      break;\n    }\n    case 2: {\n      if (draw2) {\n        setTurn(3);\n      }\n      break;\n    }\n    case 3: {\n      if (draw3) {\n        setTurn(4);\n      }\n      break;\n    }\n    case 4: {\n      if (draw4) {\n        setTurn(5);\n      }\n      break;\n    }\n    case 5: {\n      sendDiscardData(true);\n    }\n  }\n\n  let drawer = roundOrder[turn - 1];\n  function whoseRedraw(val, sendDraw) {\n    if (checkPlayerPosition(player, roundOrder) === val) {\n      return (\n        <Draw\n          deckUrl={deckUrl}\n          drawer={drawer}\n          trumpSuit={trumpSuit}\n          sendDraw={sendDraw}\n        />\n      );\n    } else {\n      return (\n        <DrawCpu\n          deckUrl={deckUrl}\n          drawer={drawer}\n          trumpSuit={trumpSuit}\n          sendDraw={sendDraw}\n        />\n      );\n    }\n  }\n\n  return (\n    <div>\n      <div className=\"biddingwindow\">\n        <div className=\"windowheader\">Drawing...</div>\n        {draw1 && (\n          <div className=\"bid\">\n            {roundOrder[0]} draws {draw1}\n          </div>\n        )}\n        {draw2 && (\n          <div className=\"bid\">\n            {roundOrder[1]} draws {draw2}\n          </div>\n        )}\n        {draw3 && (\n          <div className=\"bid\">\n            {roundOrder[2]} draws {draw3}\n          </div>\n        )}\n        {draw4 && (\n          <div className=\"bid\">\n            {roundOrder[3]} draws {draw4}\n          </div>\n        )}\n      </div>\n\n      <div className=\"playerwindow\">\n        {turn > 0 && !draw1 && whoseRedraw(1, setDraw1)}\n        {turn > 1 && !draw2 && whoseRedraw(2, setDraw2)}\n        {turn > 2 && !draw3 && whoseRedraw(3, setDraw3)}\n        {turn > 3 && !draw4 && whoseRedraw(4, setDraw4)}\n        {turn === 4 && draw4 && <div>Hey!</div>}\n      </div>\n    </div>\n  );\n};\n\nexport default Drawing;\n","const PlayWinner = ({team1, team2, sendRoundScore, sendStage}) => {\n    return ( \n        <div classname=\"gamewindow\">\n        <div className=\"biddingwindow\">\n        <div className=\"windowheader\">Round Over!</div>\n        <div className=\"playwinner\">Team 1: {team1}</div>\n        <div className=\"playwinner\">Team 2: {team2}</div>\n      </div>\n\n        <div className=\"nextroundbutton\">\n              <button\n          onClick={() => {\n            sendRoundScore([team1, team2]);\n            sendStage(\"Over\");\n          }}\n        >\n          Next Round\n        </button>\n        </div>\n        </div>\n\n\n );\n}\n \nexport default PlayWinner;","import { useEffect, useState } from \"react\";\nimport Hand from \"./Hand\";\nimport { dealHands } from \"./deckFuncs\";\nimport SelectSuit from \"./Bidding/SelectSuit\";\nimport BidInfo from \"./Bidding/BidInfo\";\nimport Play from \"./Play/Play\";\nimport { getCardValue } from \"./cardValues\";\nimport Bidding from \"./Bidding/Bidding\";\nimport Drawing from \"./Drawing/Drawing\";\nimport PlayWinner from \"./Play/PlayWinner\";\n\nconst Round = ({ deckUrl, round, sendRoundScore, newRound }) => {\n  const [hands, setHands] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [bidData, setBidData] = useState(\"\");\n  const [stage, setStage] = useState(\"Deal\");\n  // const [trumpSuit, setTrumpSuit] = useState(\"\");\n  const [discardData, setDiscardData] = useState(false);\n  const [bookInfo, setBookInfo] = useState(null);\n  const [bookNum, setBookNum] = useState(1);\n  const [log, setLog] = useState([]);\n  const [roundOrder, setRoundOrder] = useState(null);\n\n  const order = [\"You\", \"Mario\", \"Partner\", \"Luigi\"];\n\n  // TODO look into a way to reset states without having todo this...\n  if (newRound && stage === \"Over\") {\n    setHands(null);\n    setIsPending(true);\n    setBidData(\"\");\n    setStage(\"Deal\");\n    // setTrumpSuit(\"\");\n    setDiscardData(false);\n    setBookInfo(null);\n    setBookNum(1);\n    setLog([]);\n    setRoundOrder(null);\n    console.log(\"wipe\");\n  }\n\n  const player = \"You\";\n  const dealer = order[(round - 1) % 4];\n\n  useEffect(() => {\n    // console.log(\"loopeffect\",deckUrl,round)\n      dealHands(deckUrl, round, setIsPending, setHands, setRoundOrder);\n  }, [deckUrl, round]);\n\n  if (deckUrl && stage === \"Deal\" && !isPending) {\n    setStage(\"Bid\");\n  }\n\n  if (bidData && stage === \"Bid\" && !isPending) {\n    setStage(\"Discard\");\n  }\n\n  if (discardData && stage === \"Discard\") {\n    setStage(\"Play\");\n  }\n\n  if (bookInfo) {\n    log[bookNum - 1] = bookInfo;\n    setLog(log);\n    setBookInfo(\"\");\n    setBookNum(bookNum + 1);\n  }\n\n  if (stage === \"Play\" && log.length === 5) {\n    setStage(\"Winner\");\n    setBookNum(0);\n  }\n\n  let team1BookCount = 0;\n  let team2BookCount = 0;\n\n  if (stage === \"Winner\") {\n    let highCard = 50;\n    let highCardWinner = null;\n\n    for (let x = 0; x < 5; x++) {\n      if (\n        log[x].winningPlayer === \"You\" ||\n        log[x].winningPlayer === \"Partner\"\n      ) {\n        team1BookCount += 1;\n      } else {\n        team2BookCount += 1;\n      }\n      let cardValue = getCardValue(log[x].highCard, bidData.trumpSuit);\n      if (highCard > cardValue) {\n        highCard = cardValue;\n        highCardWinner = log[x].winningPlayer;\n      }\n    }\n    if (highCardWinner === \"You\" || highCardWinner === \"Partner\") {\n      team1BookCount += 1;\n    } else {\n      team2BookCount += 1;\n    }\n\n    if (team1BookCount === 6) {\n      team1BookCount = 9;\n    }\n\n    if (team2BookCount === 6) {\n      team2BookCount = 9;\n    }\n\n    // TODO clean this up and turn it into a function\n    let bid = bidData.highBid;\n    if (bidData.highBidder === \"You\" || bidData.highBidder === \"Partner\") {\n      if (bid === \"15\" && team1BookCount < 3) {\n        team1BookCount = 0 - 3;\n      } else if (bid === \"20\" && team1BookCount < 4) {\n        team1BookCount = 0 - 4;\n      } else if (bid === \"25\" && team1BookCount < 5) {\n        team1BookCount = 0 - 5;\n      } else if (bid === \"30\" && team1BookCount < 6) {\n        team1BookCount = 0 - 6;\n      } else if (bid === \"30No\" && team2BookCount < 6) {\n        team1BookCount = 0 - 12;\n      }\n    } else {\n      if (bid === \"15\" && team2BookCount < 3) {\n        team2BookCount = 0 - 3;\n      } else if (bid === \"20\" && team2BookCount < 4) {\n        team2BookCount = 0 - 4;\n      } else if (bid === \"25\" && team2BookCount < 5) {\n        team2BookCount = 0 - 5;\n      } else if (bid === \"30\" && team2BookCount < 6) {\n        team2BookCount = 0 - 6;\n      } else if (bid === \"30No\" && team2BookCount < 6) {\n        team2BookCount = 0 - 12;\n      }\n    }\n  }\n\n  return (\n    <div className=\"content\">\n      {stage === \"Deal\" && isPending && <div>Dealing....</div>}\n      {/* {console.log(\"bida\", stage, hands)} */}\n      {stage === \"Bid\" && hands && roundOrder && (\n        <div>\n          <Bidding\n            deckUrl={deckUrl}\n            bidOrder={roundOrder}\n            sendBidData={setBidData}\n          />\n        </div>\n      )}\n      {/* {stage === \"SuitSelect\" && (\n        <div>\n          <BidInfo bidData={bidData} />\n          <SelectSuit\n            deckUrl={deckUrl}\n            bidData={bidData}\n            sendTrumpSuit={setTrumpSuit}\n          />\n        </div>\n      )} */}\n      {stage === \"Discard\" && (\n        <div>\n          <BidInfo bidData={bidData} suit={bidData.trumpSuit} />\n          <Drawing\n            deckUrl={deckUrl}\n            roundOrder={roundOrder}\n            trumpSuit={bidData.trumpSuit}\n            sendDiscardData={setDiscardData}\n          />\n        </div>\n      )}\n      {stage === \"Play\" && bookNum === 1 && (\n        <div>\n          <BidInfo bidData={bidData} suit={bidData.trumpSuit} book={bookNum} />\n          <Play\n            deckUrl={deckUrl}\n            player={player}\n            order={roundOrder}\n            sendBookInfo={setBookInfo}\n            book={bookNum}\n            trumpSuit={bidData.trumpSuit}\n            bookInfo={log}\n          />\n        </div>\n      )}\n      {stage === \"Play\" && bookNum === 2 && (\n        <div>\n          <BidInfo bidData={bidData} suit={bidData.trumpSuit} book={bookNum} />\n          <Play\n            deckUrl={deckUrl}\n            player={player}\n            order={roundOrder}\n            sendBookInfo={setBookInfo}\n            book={bookNum}\n            trumpSuit={bidData.trumpSuit}\n            bookInfo={log}\n          />\n        </div>\n      )}\n      {stage === \"Play\" && bookNum === 3 && (\n        <div>\n          <BidInfo bidData={bidData} suit={bidData.trumpSuit} book={bookNum} />\n          <Play\n            deckUrl={deckUrl}\n            player={player}\n            order={roundOrder}\n            sendBookInfo={setBookInfo}\n            book={bookNum}\n            trumpSuit={bidData.trumpSuit}\n            bookInfo={log}\n          />\n        </div>\n      )}\n      {stage === \"Play\" && bookNum === 4 && (\n        <div>\n          <BidInfo bidData={bidData} suit={bidData.trumpSuit} book={bookNum} />\n\n          <Play\n            deckUrl={deckUrl}\n            player={player}\n            order={roundOrder}\n            sendBookInfo={setBookInfo}\n            book={bookNum}\n            trumpSuit={bidData.trumpSuit}\n            bookInfo={log}\n          />\n        </div>\n      )}\n\n      {stage === \"Play\" && bookNum === 5 && (\n        <div>\n          <BidInfo bidData={bidData} suit={bidData.trumpSuit} book={bookNum} />\n\n          <Play\n            deckUrl={deckUrl}\n            player={player}\n            order={roundOrder}\n            sendBookInfo={setBookInfo}\n            book={bookNum}\n            trumpSuit={bidData.trumpSuit}\n            bookInfo={log}\n          />\n        </div>\n      )}\n\n      {stage === \"Winner\" && (\n        <PlayWinner\n          team1={team1BookCount}\n          team2={team2BookCount}\n          sendRoundScore={sendRoundScore}\n          sendStage={setStage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Round;\n","import { useState } from \"react\";\nimport Score from \"./Score/Score\";\nimport Round from \"./Round\";\nimport useFetch from \"./useFetch\";\n\nconst Game = () => {\n  const { data, isPending, error } = useFetch(\n    \"https://deckofcardsapi.com/api/deck/new/\"\n  );\n\n  const [round, setRound] = useState(1);\n  const [gameScore, setGameScore] = useState([0, 0]);\n  const [roundScore, setRoundScore] = useState(null);\n  const [scoreLog, setScoreLog] = useState([]);\n  const [gameOver, setGameOver] = useState(\"\");\n\n  let deckUrl = null;\n  if (data) {\n    deckUrl = \"https://deckofcardsapi.com/api/deck/\" + data.deck_id;\n  }\n\n  let tempScore = [];\n\n  if (roundScore) {\n    scoreLog[round] = roundScore;\n    tempScore[0] = gameScore[0] + roundScore[0];\n    tempScore[1] = gameScore[1] + roundScore[1];\n    console.log(\"scoring\", tempScore, roundScore, round);\n    setScoreLog(scoreLog);\n    setGameScore(tempScore);\n    if (tempScore[0] > 30) {\n      setGameOver(\"Team 1 Wins\");\n    }\n    if (tempScore[1] > 30) {\n      setGameOver(\"Team 2 Wins\");\n    }\n    setRoundScore(null);\n    setRound(round + 1);\n  }\n\n  return (\n    <div className=\"gamewindow\">\n      {isPending && <div>Setting up...</div>}\n      {error && <div>{error}</div>}\n      {deckUrl && !gameOver && (\n        <div className=\"game\">\n          <Score round={round} gameScore={gameScore} />\n          <Round\n            deckUrl={deckUrl}\n            round={round}\n            sendRoundScore={setRoundScore}\n            newRound={true}\n          />\n        </div>\n      )}\n      {gameOver && (\n        <div>\n          <h1>{gameOver}</h1>\n          <h3>Team 1: {gameScore[0]}</h3>\n          <h3>Team 2: {gameScore[1]}</h3>\n          <button>Play Again</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Game;\n","import './footer.css';\n\nconst Footer = () => {\n    return ( <div className=\"footer\">\n        <div><a href=\"https://github.com/dsull29/45s\" target=\"new\">GitHub Project Page</a></div>\n\n        <div><a href=\"https://github.com/dsull29/45s/issues\" target=\"new\">Report a bug</a></div>\n    </div> );\n}\n \nexport default Footer;","import { useState } from \"react\";\nimport Header from \"./Header/Header\";\nimport \"./App.css\";\nimport Game from \"./Game\";\nimport Footer from \"./Footer/Footer\";\n\nfunction App() {\n  const [inGame, setInGame] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      {inGame === false && (\n        <div className=\"gamewindow\">\n          <button className=\"startbutton\" onClick={() => setInGame(true)}>Start Game</button>\n        </div>\n      )}\n      {inGame && <Game />}\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}