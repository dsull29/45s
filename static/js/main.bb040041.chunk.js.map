{"version":3,"sources":["Score/Score.js","useFetch.js","Card.js","Hand.js","deckFuncs.js","cardValues.js","Bidding/bidfuncs.js","Bidding/SelectSuit.js","Bidding/BidInfo.js","Play/PlayCard.js","scripts.js","Play/PlayerTurn.js","Play/Turn.js","Play/Play.js","Bidding/MakeBid.js","Bidding/Bidding.js","Drawing/Draw.js","Drawing/DrawCpu.js","Drawing/Drawing.js","Round.js","Footer/Footer.js","Game.js","App.js","index.js"],"names":["Score","round","gameScore","className","style","textAlign","useFetch","url","useState","data","setData","isPending","setIsPending","error","setError","useEffect","abortCont","AbortController","fetch","signal","then","res","ok","Error","json","catch","err","name","console","log","message","abort","Card","card","src","image","alt","width","height","Hand","deckUrl","player","cards","piles","setHands","setRoundOrder","a","order","getRoundOrder","drawresponse","drawData","hands","hash","toString","code","val","getNewCards","discardCodes","sendDiscardData","sendDiscardPending","discardResponse","length","redrawResponse","redrawData","i","push","assResponse","trumpValues","offSuitValues","heartTrumpOrder","diamondTrumpOrder","spadesTrumpOrder","clubsTrumpOrder","heartOffSuitOrder","diamondOffSuitOrder","spadesOffSuitOrder","clubsOffSuitOrder","evaluateHand","heartHandVal","diamondHandVal","spadeHandVal","clubHandVal","getHeartValue","getDiamondValue","getSpadeValue","getClubValue","getCardValue","trump","indexOf","checkBid","bid","bidData","highBid","highBidder","playerBid","bidder","SelectSuit","sendTrumpSuit","trumpSuit","setTrumpSuit","cardCodes","handValues","orgHandValues","JSON","stringify","bestHandVal","sort","b","parse","getBestSuit","onSubmit","e","preventDefault","value","onChange","target","BidInfo","suit","book","PlayCard","getWorstCard","worstCard","worstCardVal","curCardVal","getBestCard","bestCard","bestCardVal","playerCard","sendPlayerCard","PlayerTurn","sendPlayCard","position","leadSuit","setPlayerCard","playCardNow","Turn","cardPlay","setCardPlay","taco","playCard","Play","winner","sendBookInfo","bookInfo","playCard1","setPlayCard1","playCard2","setPlayCard2","playCard3","setPlayCard3","playCard4","setPlayCard4","setLeadSuit","turn","setTurn","bookNum","bookOrder","mung","roundOrder","lastWinner","lastBook","winningPlayer","getBookOrder","charAt","setTimeout","curBestValue","highCard","whoseTurn","checkPlayerPosition","x","DisplayLog","MakeBid","humanBidder","dealer","sendBid","setPlayerBid","bidOptions","getBid","isDealer","Bidding","lastBid","lastBidder","bidOrder","sendBidData","bid1","setBid1","bid2","setBid2","bid3","setBid3","bid4","setBid4","setBidData","Draw","drawer","sendDraw","discard0","setDiscard0","discard1","setDiscard1","discard2","setDiscard2","discard3","setDiscard3","discard4","setDiscard4","setDiscardPending","discards","type","checked","onClick","DrawCpu","discardCount","setDiscardCount","discardPending","Drawing","draw1","setDraw1","draw2","setDraw2","draw3","setDraw3","draw4","setDraw4","whoseRedraw","Round","sendRoundScore","newRound","stage","setStage","discardData","setDiscardData","setBookInfo","setBookNum","setLog","dealHands","team1BookCount","team2BookCount","highCardWinner","cardValue","Footer","href","Game","setRound","setGameScore","roundScore","setRoundScore","scoreLog","setScoreLog","gameOver","setGameOver","deck_id","tempScore","App","inGame","setInGame","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mOAgBeA,EAdD,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,UACtB,OACE,qBAAKC,UAAU,aAAaC,MAAO,CAAEC,UAAW,QAAhD,SACE,qBAAKF,UAAU,QAAf,SACE,iCACE,sBAAK,cAAY,aAAjB,qBAAuCD,EAAU,MACjD,sBAAK,cAAY,aAAjB,qBAAuCA,EAAU,MACjD,sBAAK,cAAY,QAAjB,oBAAiCD,aCwB5BK,EA/BE,SAACC,GACd,MAAwBC,mBAAS,MAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA0BJ,mBAAS,MAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAyBA,OAxBAC,qBAAU,WACN,IAAMC,EAAY,IAAIC,gBAqBtB,OApBAC,MAAMX,EAAK,CAAEY,OAAQH,EAAUG,SAC1BC,MAAK,SAAAC,GACF,IAAKA,EAAIC,GACL,MAAMC,MAAM,0CAEhB,OAAOF,EAAIG,UAEdJ,MAAK,SAAAX,GACFC,EAAQD,GACRG,GAAa,GACbE,EAAS,SAEZW,OAAM,SAAAC,GACc,eAAbA,EAAIC,KACJC,QAAQC,IAAI,kBAEZjB,GAAa,GACbE,EAASY,EAAII,aAGlB,kBAAMd,EAAUe,WACxB,CAACxB,IACG,CAAEE,OAAME,YAAWE,UCpBfmB,EAVF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEZ,OACI,8BACI,qBAAKC,IAAKD,EAAKE,MAAOC,IAAI,OAAOC,MAAM,OAAOC,OAAO,YC2BlDC,EA5BF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,OAAQxC,EAAY,EAAZA,MAC/B,EAAmCK,EACjCkC,EAAU,SAAWC,EAAS,UADxBhC,EAAR,EAAQA,KAAME,EAAd,EAAcA,UAAWE,EAAzB,EAAyBA,MAGrB6B,EAAQ,GAKZ,OAJIjC,GAAQA,EAAKkC,MAAMF,IAAWhC,EAAKkC,MAAMF,GAAQC,QACnDA,EAAQjC,EAAKkC,MAAMF,GAAQC,OAI3B,gCACG7B,GAAS,8BAAMA,IACfF,GAAa,6CACbF,GAAQiC,GACP,8BACE,sBAAKvC,UAAU,OAAf,UACGuC,EAAM,IAAM,cAAC,EAAD,CAAMT,KAAMS,EAAM,GAAIzC,MAAOA,IACzCyC,EAAM,IAAM,cAAC,EAAD,CAAMT,KAAMS,EAAM,GAAIzC,MAAOA,IACzCyC,EAAM,IAAM,cAAC,EAAD,CAAMT,KAAMS,EAAM,GAAIzC,MAAOA,IACzCyC,EAAM,IAAM,cAAC,EAAD,CAAMT,KAAMS,EAAM,GAAIzC,MAAOA,IACzCyC,EAAM,IAAM,cAAC,EAAD,CAAMT,KAAMS,EAAM,GAAIzC,MAAOA,a,mECvB/C,WACLuC,EACAvC,EACAW,EACAgC,EACAC,GALK,qBAAAC,EAAA,6DAOCC,EAAQC,EAAc/C,GAPvB,SAQCiB,MAAMsB,EAAU,aARjB,uBASsBtB,MAAMsB,EAAU,mBATtC,cASCS,EATD,gBAUkBA,EAAazB,OAV/B,cAUC0B,EAVD,OAWDC,EAAQC,EAAKF,EAASR,OAC1Bd,QAAQC,IAAI,YAAasB,EAAOD,GAZ3B,UAaChC,MACJsB,EAAU,SAAWO,EAAM,GAAK,eAAiBI,EAAM,GAAGE,YAdvD,yBAgBCnC,MACJsB,EAAU,SAAWO,EAAM,GAAK,eAAiBI,EAAM,GAAGE,YAjBvD,yBAmBCnC,MACJsB,EAAU,SAAWO,EAAM,GAAK,eAAiBI,EAAM,GAAGE,YApBvD,yBAsBcnC,MACjBsB,EAAU,SAAWO,EAAM,GAAK,eAAiBI,EAAM,GAAGE,YAvBvD,iBA0BHR,EAAcE,GACdH,EAASO,GACTvC,GAAa,IA5BV,6C,sBAgCP,SAASwC,EAAKV,GA6BZ,MAAO,CA5BO,CACZA,EAAM,GAAGY,KACTZ,EAAM,GAAGY,KACTZ,EAAM,GAAGY,KACTZ,EAAM,IAAIY,KACVZ,EAAM,IAAIY,MAEE,CACZZ,EAAM,GAAGY,KACTZ,EAAM,GAAGY,KACTZ,EAAM,GAAGY,KACTZ,EAAM,IAAIY,KACVZ,EAAM,IAAIY,MAEE,CACZZ,EAAM,GAAGY,KACTZ,EAAM,GAAGY,KACTZ,EAAM,GAAGY,KACTZ,EAAM,IAAIY,KACVZ,EAAM,IAAIY,MAEE,CACZZ,EAAM,GAAGY,KACTZ,EAAM,IAAIY,KACVZ,EAAM,IAAIY,KACVZ,EAAM,IAAIY,KACVZ,EAAM,IAAIY,OAKP,SAASN,EAAc/C,GAC5B,IACI8C,EADAQ,GAAOtD,EAAQ,GAAK,EAWxB,OATY,IAARsD,EACFR,EAAQ,CAAC,UAAW,UAAW,UAAW,WACzB,IAARQ,EACTR,EAAQ,CAAC,UAAW,UAAW,UAAW,WACzB,IAARQ,EACTR,EAAQ,CAAC,UAAW,UAAW,UAAW,WACzB,IAARQ,IACTR,EAAQ,CAAC,UAAW,UAAW,UAAW,YAErCA,EAoDF,SAAeS,EAAtB,0C,4CAAO,WACLhB,EACAiB,EACAhB,EACAiB,EACAC,GALK,yBAAAb,EAAA,sEAOyB5B,MAAMsB,EAAU,4BAA8BiB,EAAaJ,YAPpF,cAOCO,EAPD,gBAQCA,EAAgBpC,OARjB,uBAUwBN,MAAMsB,EAAU,gBAAkBiB,EAAaI,QAVvE,cAUCC,EAVD,iBAWoBA,EAAetC,OAXnC,QAcL,GAHMuC,EAXD,OAYLnC,QAAQC,IAAI,SAAUY,EAAQgB,EAAaM,EAAWrB,OAClDA,EAAQ,GACRqB,EAAWrB,MACb,IAASsB,EAAI,EAAGA,EAAID,EAAWrB,MAAMmB,OAAQG,IAC3CtB,EAAMuB,KAAKF,EAAWrB,MAAMsB,GAAGV,MAhB9B,iBAkBqBpC,MACxBsB,EAAU,SAAWC,EAAS,eAAiBC,EAAMW,YAnBlD,eAkBCa,EAlBD,iBAqBcA,EAAY1C,OArB1B,iBAuBHkC,EAAgBD,EAAaI,QAC7BF,GAAmB,IAxBhB,6C,iCChIDQ,EAAc,EACf,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAE3DC,EAAgB,CAAC,GAAI,GAAI,GAAI,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAK5DC,EAAkB,CACtB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEIC,EAAoB,CACxB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEIC,EAAmB,CACvB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEIC,EAAkB,CACtB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAGIC,EAAoB,CACxB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEIC,EAAsB,CAC1B,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEIC,EAAqB,CACzB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEIC,EAAoB,CACxB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAGK,SAASC,EAAanC,GAC3B,IAAIoC,EAAcC,EAAgBC,EAAcC,EAChDH,EAAeC,EAAiBC,EAAeC,EAAc,EAE7D,IAAK,IAAIjB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAI/B,EAAOS,EAAMsB,GACjBc,GAAgBI,EAAcjD,GAC9B8C,GAAkBI,EAAgBlD,GAClC+C,GAAgBI,EAAcnD,GAC9BgD,GAAeI,EAAapD,GAG9B,MAAO,CAAC6C,EAAcC,EAAgBC,EAAcC,GAG/C,SAASK,EAAarD,EAAMsD,GACjC,OAAQA,GACN,IAAK,SACH,OAAOL,EAAcjD,GACvB,IAAK,WACH,OAAOkD,EAAgBlD,GACzB,IAAK,SACH,OAAOmD,EAAcnD,GACvB,IAAK,QACH,OAAOoD,EAAapD,GACtB,QACE,OAAO,GAIb,SAASiD,EAAcjD,GACrB,OACEkC,EAAYE,EAAgBmB,QAAQvD,KACpCmC,EAAcM,EAAoBc,QAAQvD,KAC1CmC,EAAcQ,EAAkBY,QAAQvD,KACxCmC,EAAcO,EAAmBa,QAAQvD,IAI7C,SAASkD,EAAgBlD,GACvB,OACEkC,EAAYG,EAAkBkB,QAAQvD,KACtCmC,EAAcK,EAAkBe,QAAQvD,KACxCmC,EAAcQ,EAAkBY,QAAQvD,KACxCmC,EAAcO,EAAmBa,QAAQvD,IAI7C,SAASmD,EAAcnD,GACrB,OACEkC,EAAYI,EAAiBiB,QAAQvD,KACrCmC,EAAcM,EAAoBc,QAAQvD,KAC1CmC,EAAcQ,EAAkBY,QAAQvD,KACxCmC,EAAcK,EAAkBe,QAAQvD,IAI5C,SAASoD,EAAapD,GACpB,OACEkC,EAAYK,EAAgBgB,QAAQvD,KACpCmC,EAAcM,EAAoBc,QAAQvD,KAC1CmC,EAAcK,EAAkBe,QAAQvD,KACxCmC,EAAcO,EAAmBa,QAAQvD,IClMxC,IAAMwD,EAAW,SAACC,EAAKC,GAE5B,IAAIC,EAASC,EAWb,MAVsB,SAAlBH,EAAII,YAEqB,SAAlBJ,EAAII,WACbF,EAAUD,EAAQC,QAClBC,EAAaH,EAAIK,QACRL,EAAII,YACbF,EAAUF,EAAII,UACdD,EAAaH,EAAIK,SAGZ,CAAEH,UAASC,eCRpB,IAqDeG,EArDI,SAAC,GAAyC,IAAvCxD,EAAsC,EAAtCA,QAASmD,EAA6B,EAA7BA,QAASM,EAAoB,EAApBA,cACpC,EAAkCzF,mBAAS,UAA3C,mBAAO0F,EAAP,KAAkBC,EAAlB,KACMJ,EAASJ,EAAQE,WAEvB,EAAmCvF,EADvBkC,EAAU,SAAWuD,EAAS,UAClCtF,EAAR,EAAQA,KAAR,EAAcI,MAAd,EAAqBF,UAKrB,GAAIF,EACA,GAJW,YAIPsF,GACY,MACT,EACS,EACd,IACI9D,EAHC,EAEDS,EAAQjC,EAAKkC,MAAMoD,GAAQrD,MAE3B0D,EAAY,GAJX,cAKQ1D,GALR,IAKL,2BAAKT,EAAe,QAChBmE,EAAUnC,KAAKhC,EAAKqB,MANnB,8BAQL,IACI4C,ED0BP,SAAqBG,GAC1B,IACMC,EAAgBC,KAAKC,UAAUH,GAC/BI,EAAcJ,EAAWK,MAAK,SAAU5D,EAAG6D,GAC/C,OAAO7D,EAAI6D,KACV,GAKH,MAHc,CAAC,SAAU,WAAY,SAAU,SAC/BJ,KAAKK,MAAMN,GAAed,QAAQiB,IClC1BI,CADChC,EAAauB,IAEhCH,EAAcC,GAYlB,OACI,8BAC4B,YAAvBP,EAAQE,YACL,8BACI,uBAAMiB,SAZK,SAACC,GACxBA,EAAEC,iBACFf,EAAcC,IAUF,UACI,yBACIe,MAAOf,EACPgB,SAAU,SAACH,GAAD,OAAOZ,EAAaY,EAAEI,OAAOF,QAF3C,UAGI,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,WAAd,sBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,QAAd,sBAEJ,yDCjCTG,EAdC,SAAC,GAA6B,IAA3BzB,EAA0B,EAA1BA,QAAS0B,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAE1B5B,EAAMC,EAAQC,QACdG,EAASJ,EAAQE,WAErB,OACI,iCACMwB,GAAQ,6BAAM3B,EAAM,SAAWK,EAAS,WACzCsB,GAAQ,6BAAM3B,EAAM,SAAWK,EAAS,OAASsB,IACjDC,GAAQ,wCAAWA,EAAX,WCJNC,EAVE,SAAC,GAAc,IAAZtF,EAAW,EAAXA,KAEhB,OACI,8BACI,qBAAKC,IAAKD,EAAKE,MAAOC,IAAI,OAAOC,MAAM,OAAOC,OAAO,YCM1D,SAASkF,EAAa9E,EAAO6C,GAIlC,IAHA,IAAIkC,EAAY,KACZC,GAAe,GAEV1D,EAAI,EAAGA,EAAItB,EAAMmB,OAAQG,IAAK,CACrC,IAAI2D,EAAarC,EAAa5C,EAAMsB,GAAGV,KAAMiC,GACzCoC,EAAaD,IACfA,EAAeC,EACfF,EAAYzD,GAGhB,OAAOtB,EAAM+E,GAGR,SAASG,EAAYlF,EAAO6C,GAIjC,IAHA,IAAIsC,EAAW,KACXC,EAAc,GAET9D,EAAI,EAAGA,EAAItB,EAAMmB,OAAQG,IAAK,CACrC,IAAI2D,EAAarC,EAAa5C,EAAMsB,GAAGV,KAAMiC,GACzCoC,EAAaG,IACfA,EAAcH,EACdE,EAAW7D,GAIf,OAAOtB,EAAMmF,G,4CA0BR,WAA2BrF,EAASuF,EAAYC,GAAhD,SAAAlF,EAAA,sEACC5B,MACJsB,EAAU,4BAA8BuF,EAAWzE,MAElDlC,MAAK,SAACC,GACL,IAAKA,EAAIC,GACP,MAAMC,MAAM,0CAEd,OAAOF,EAAIG,UAEZJ,MAAK,SAACX,GACL,OAAOsH,KAXN,OAaLC,EAAeD,GAbV,4C,sBC1DP,IA6CeE,EA7CI,SAAC,GAOb,IANLzF,EAMI,EANJA,QACAC,EAKI,EALJA,OAGAyF,GAEI,EAJJC,SAII,EAHJC,SAGI,EAFJF,cAGA,GADI,EADJhC,UAEoC1F,mBAAS,IAA7C,mBAAOuH,EAAP,KAAmBM,EAAnB,KAGA,EAAmC/H,EADvBkC,EAAU,SAAWC,EAAS,UAClChC,EAAR,EAAQA,KAEJiC,GAFJ,EAAc7B,MAAd,EAAqBF,UAET,IAWZ,OAJIF,IACFiC,EAAQjC,EAAKkC,MAAMF,GAAQC,OAI3B,8BACGjC,GACC,uBAAMqG,SAZS,SAACC,GACpBA,EAAEC,iBD0CC,SAAP,+BCzCIsB,CAAY9F,EAASE,EAAMqF,GAAaG,IAUpC,UACE,yBACEjB,MAAOc,EACPb,SAAU,SAACH,GAAD,OAAOsB,EAActB,EAAEI,OAAOF,QAF1C,UAIGvE,EAAM,IAAM,wBAAQuE,MAAO,EAAf,SAAmBvE,EAAM,GAAGY,OACxCZ,EAAM,IAAM,wBAAQuE,MAAO,EAAf,SAAmBvE,EAAM,GAAGY,OACxCZ,EAAM,IAAM,wBAAQuE,MAAO,EAAf,SAAmBvE,EAAM,GAAGY,OACxCZ,EAAM,IAAM,wBAAQuE,MAAO,EAAf,SAAmBvE,EAAM,GAAGY,OACxCZ,EAAM,IAAM,wBAAQuE,MAAO,EAAf,SAAmBvE,EAAM,GAAGY,UAE3C,qDCDKiF,EArCF,SAAC,GAAsE,IAApE/F,EAAmE,EAAnEA,QAASC,EAA0D,EAA1DA,OAAQ0F,EAAkD,EAAlDA,SAAoBD,GAA8B,EAAxCE,SAAwC,EAA9BF,cAAchC,EAAgB,EAAhBA,UAG/D,EAAmC5F,EADvBkC,EAAU,SAAWC,EAAS,UAClChC,EAAR,EAAQA,KAAMI,EAAd,EAAcA,MAAOF,EAArB,EAAqBA,UACrB,EAA+BH,mBAAS,MAAxC,mBAAOgI,EAAP,KAAgBC,EAAhB,KAIA,GAAIhI,IAAS+H,EAAU,CAEnB,IAAIE,EA6BZ,SAAkBP,EAAUzF,EAAOwD,GAC/B,IAAIjE,EACJ,OAAQkG,GACJ,KAAK,EAGL,KAAK,EACDlG,EAAOuF,EAAa9E,EAAOwD,GAC3B,MACJ,KAAK,EAGL,KAAK,EACDjE,EAAO2F,EAAYlF,EAAOwD,GAC1B,MACJ,QACItE,QAAQC,IAAI,cAGpB,OAAOI,EAhDQ0G,CAASR,EADZ1H,EAAKkC,MAAMF,GAAQC,MACUwD,GAErChF,MAAMsB,EAAU,4BAA8BkG,EAAKpF,MAC9ClC,MAAK,SAAAC,GACF,IAAKA,EAAIC,GACL,MAAMC,MAAM,0CAEhB,OAAOF,EAAIG,UAEdJ,MAAK,SAAAX,GACFgI,EAAYC,MAQxB,OAJIjI,GAAQ+H,GACRN,EAAaM,GAIb,gCACK3H,GAAS,8BAAMA,IACfF,GAAa,+CACbF,GAAQ,uCAHb,QC1BR,IAqGemI,EArGF,SAAC,GAAyE,IAQjFC,EARUrG,EAAsE,EAAtEA,QAASC,EAA6D,EAA7DA,OAAQM,EAAqD,EAArDA,MAAO+F,EAA8C,EAA9CA,aAAcxB,EAAgC,EAAhCA,KAAMpB,EAA0B,EAA1BA,UAAW6C,EAAe,EAAfA,SACrE,EAAkCvI,mBAAS,IAA3C,mBAAOwI,EAAP,KAAkBC,EAAlB,KACA,EAAkCzI,mBAAS,IAA3C,mBAAO0I,EAAP,KAAkBC,EAAlB,KACA,EAAkC3I,mBAAS,IAA3C,mBAAO4I,EAAP,KAAkBC,EAAlB,KACA,EAAkC7I,mBAAS,IAA3C,mBAAO8I,EAAP,KAAkBC,EAAlB,KACA,EAAgC/I,mBAAS,IAAzC,mBAAO4H,EAAP,KAAiBoB,EAAjB,KACA,EAAwBhJ,mBAAS,GAAjC,mBAAOiJ,EAAP,KAAaC,EAAb,KAIIC,EAAUrC,EACVsC,ETiEC,SAAsBC,EAAMC,GACjC,IAEIC,EADAC,EAAWH,EAAKA,EAAKhG,OAAS,GAgBlC,OAdImG,IACFD,EAAaC,EAASC,eAEL,YAAfF,EACM,CAAC,UAAW,UAAW,UAAW,WAClB,YAAfA,EACD,CAAC,UAAW,UAAW,UAAW,WAClB,YAAfA,EACD,CAAC,UAAW,UAAW,UAAW,WAClB,YAAfA,EACD,CAAC,UAAW,UAAW,UAAW,WAElCD,ESjFMI,CAAanB,EAAShG,GACtC,GAAa,IAAT0G,GAAcT,EAEhBQ,EADWR,EAAU1F,KAAK6G,OAAO,IAEjCT,EAAQ,QACH,GAAa,IAATD,GAAcP,EACvBQ,EAAQ,QACH,GAAa,IAATD,GAAcL,EACvBM,EAAQ,QACH,GAAa,IAATD,GAAcH,EACvBc,YAAW,WACRV,EAAQ,KACP,UACC,GAAa,IAATD,EAAY,CACrBnC,EAAO,CAAC0B,EAAWE,EAAWE,EAAWE,GAEzC,IADA,IAAIe,EAAe,GACVrG,EAAI,EAAGA,EAAIsD,EAAKzD,OAAQG,IAAK,CACpC,IAAIT,EAAM+B,EAAagC,EAAKtD,GAAGV,KAAM4C,GACjC3C,EAAM8G,IACRA,EAAe9G,EACfsF,EAAS7E,GAGb,IAAIsG,EAAWhD,EAAKuB,GAAQvF,KAG5BwF,EADc,CAAEa,UAASM,cADLL,EAAUf,GACUyB,aAI1C,SAASC,EAAUhH,EAAK2E,GAMtB,OAAIsC,EAAoB/H,EAAQmH,KAAerG,EAE3C,cAAC,EAAD,CACEf,QAASA,EACTC,OAAQA,EACR0F,SAAU5E,EACV2E,aAAcA,EACdhC,UAAWA,EACXkC,SAAUA,IAKZ,cAAC,EAAD,CACE5F,QAASA,EACTC,OAAQmH,EAAUrG,EAAI,GACtB4E,SAAU5E,EACV2E,aAAcA,EACdhC,UAAWA,IAiBnB,OACE,gCACE,sBAAK/F,UAAU,OAAf,UACCsJ,EAAO,IAAMT,GAAauB,EAAU,EAAGtB,GACvCQ,EAAO,IAAMP,GAAaqB,EAAU,EAAGpB,GACvCM,EAAO,IAAML,GAAamB,EAAU,EAAGlB,GACvCI,EAAO,IAAMH,GAAaiB,EAAU,EAAGhB,GAC9B,IAATE,GAAcH,GAAa,wDAEzBN,GAAa,cAAC,EAAD,CAAU/G,KAAM+G,IAC7BE,GAAa,cAAC,EAAD,CAAUjH,KAAMiH,IAC7BE,GAAa,cAAC,EAAD,CAAUnH,KAAMmH,IAC7BE,GAAa,cAAC,EAAD,CAAUrH,KAAMqH,OAEhCP,GAzBJ,WACE,IADoB,EAChB0B,EAAI,GADY,cAGP1B,GAHO,IAGpB,2BAAKzB,EAAkB,QACrBmD,EAAExG,KAAK,gCAAMqD,EAAKqC,QAAX,eAAgD,YAAvBrC,EAAK2C,eAAsD,YAAvB3C,EAAK2C,cAA8B,SAAW,UAA3G,IAAwH3C,EAAKgD,SAA7H,IAAwIhD,EAAK2C,kBAJlI,8BAOpB,OAAO,8BAAMQ,IAkBCC,OAYX,SAASF,EAAoB/H,EAAQM,GAE1C,OADUA,EAAMyC,QAAQ/C,GAAU,EC9GpC,IA4DekI,EA5DC,SAAC,GAAmD,IAO9DC,EAPapI,EAAgD,EAAhDA,QAASuD,EAAuC,EAAvCA,OAAQJ,EAA+B,EAA/BA,QAASkF,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACnD,EAAkCtK,mBAAS,QAA3C,mBAAOsF,EAAP,KAAkBiF,EAAlB,KACMtI,EAAS,UAEf,EAAmCnC,EADvBkC,EAAU,SAAWuD,EAAS,UAClCtF,EAAR,EAAQA,KAEJmF,GAFJ,EAAc/E,MAAd,EAAqBF,UAEPgF,EAAQC,SAGtB,GAAInF,EACF,GAAIsF,IAAWtD,EACbmI,GAAc,MACT,CACLA,GAAc,EACd,IACI3I,EAHC,EAEDS,EAAQjC,EAAKkC,MAAMoD,GAAQrD,MAE3B0D,EAAY,GAJX,cAKQ1D,GALR,IAKL,2BAAKT,EAAe,QAChBmE,EAAUnC,KAAKhC,EAAKqB,MANnB,8BAQL,IACIwC,ERJH,SAAgBO,EAAYV,GACjC,IAAMqF,EAAa,CAAC,OAAQ,KAAM,KAAM,KAAM,KAAM,cAChDvE,EAAcJ,EAAWK,MAAK,SAAC5D,EAAG6D,GACpC,OAAO7D,EAAI6D,KACV,GACCb,EAAY,KAsBhB,OAbIW,GAAc,GAChBX,EAAY,KACHW,GAAc,IACvBX,EAAY,MAIZA,GACAkF,EAAWxF,QAAQM,IAAckF,EAAWxF,QAAQG,EAAQC,WAE5DE,EAAY,QAGPA,EQvBamF,CADCpG,EAAauB,GACIT,GAElCmF,EADc,CAAC/E,SAAOD,cAK1B,IAAIoF,EAAWzI,IAAWoI,EAO1B,OACE,qBAAK1K,UAAU,MAAf,SACGyK,GACC,8BACE,uBAAM9D,SATO,WACjBgE,EAAQ,CAAC,OAAU/E,EACVD,eAOL,UACE,yBACEmB,MAAOnB,EACPoB,SAAU,SAACH,GAAD,OAAOgE,EAAahE,EAAEI,OAAOF,QAFzC,UAIGiE,GAAY,wBAAQjE,MAAM,OAAd,kBACb,wBAAQA,MAAM,OAAd,kBAEa,OAAZrB,GAAoB,wBAAQqB,MAAM,KAAd,gBACR,OAAZrB,GAAoB,wBAAQqB,MAAM,KAAd,gBACrB,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,KAAd,gBACA,wBAAQA,MAAM,OAAd,2BAEF,uDCqHGkE,EA1KC,SAAC,GAAwC,IAsBnDC,EAASC,EAtBI7I,EAAqC,EAArCA,QAAS8I,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,YACpC,EAAwB/K,mBAAS,IAAjC,mBAAOgL,EAAP,KAAaC,EAAb,KACA,EAAwBjL,mBAAS,IAAjC,mBAAOkL,EAAP,KAAaC,EAAb,KACA,EAAwBnL,mBAAS,IAAjC,mBAAOoL,EAAP,KAAaC,EAAb,KACA,EAAwBrL,mBAAS,IAAjC,mBAAOsL,EAAP,KAAaC,EAAb,KACA,EAAwBvL,mBAAS,GAAjC,mBAAOiJ,EAAP,KAAaC,EAAb,KACA,EAA8BlJ,mBAAS,CAAEoF,QAAS,KAAMC,WAAY,OAApE,mBAAOF,EAAP,KAAgBqG,EAAhB,KAEFjL,qBAAU,WACR0K,EAAQ,IACRE,EAAQ,IACRE,EAAQ,IACRE,EAAQ,IACRC,EAAW,CAAEpG,QAAS,KAAMC,WAAY,SACvC,CAACyF,IASF,IAAIvF,EAASuF,EAAS7B,EAAO,GAEvBoB,EAASS,EAAS,GAExB,OAAQ7B,GACN,KAAK,EACH,GAAI+B,EAAM,CAEN,MAA8B/F,EAAS+F,EAAM7F,GAAvCC,EAAN,EAAMA,QAASC,EAAf,EAAeA,WAEXD,GACFoG,EAAW,CAAEpG,UAASC,eACtB6D,EAAQ,IAERA,EAAQ,GAId,MAEF,KAAK,EACH,GAAIgC,EAAM,CAEN,MAA8BjG,EAASiG,EAAM/F,GAAvCC,EAAN,EAAMA,QAASC,EAAf,EAAeA,WAEXD,GACFoG,EAAW,CAAEpG,UAASC,eACtB6D,EAAQ,IAERA,EAAQ,QAIZ0B,EAAUI,EAAK1F,UACfuF,EAAaG,EAAKzF,OAEpB,MAEF,KAAK,EACH,GAAI6F,EAAM,CAEN,MAA8BnG,EAASmG,EAAMjG,GAAvCC,EAAN,EAAMA,QAASC,EAAf,EAAeA,WACXD,GACFoG,EAAW,CAAEpG,UAASC,eACtB6D,EAAQ,IAERA,EAAQ,QAIZ0B,EAAUM,EAAK5F,UACfuF,EAAaK,EAAK3F,OAEpB,MAEF,KAAK,EACH,GAAI+F,EAAM,CAEN,MAA8BrG,EAASqG,EAAMnG,GAAvCC,EAAN,EAAMA,QAASC,EAAf,EAAeA,WACXD,GACFoG,EAAW,CAAEpG,UAASC,eACtB6D,EAAQ,IAERA,EAAQ,QAIZ0B,EAAUQ,EAAK9F,UACfuF,EAAaO,EAAK7F,OAEpB,MAEF,KAAK,EACHqF,EAAUU,EAAKhG,UACfuF,EAAaS,EAAK/F,OAClBnE,QAAQC,IAAI,UAAU8D,GACtB4F,EAAY5F,GAShB,OACE,gCACGA,EAAQC,SACP,8BACE,6CACaD,EAAQE,WADrB,IACkCF,EAAQC,aAI7CyF,GACC,8BAEE,6CACaA,EADb,IAC0BD,GAAW,aAIvCI,GACA,8BACE,sBAAK,cAAY,cAAjB,UAAgCF,EAAS,GAAzC,2BAGM,IAAT7B,GACC,cAAC,EAAD,CACEjH,QAASA,EACTuD,OAAQA,EACRJ,QAASA,EACTkF,OAAQA,EACRC,QAASW,IAGH,IAAThC,GACC,cAAC,EAAD,CACEjH,QAASA,EACTuD,OAAQA,EACRJ,QAASA,EACTkF,OAAQA,EACRC,QAASa,IAGH,IAATlC,GACC,cAAC,EAAD,CACEjH,QAASA,EACTuD,OAAQA,EACRJ,QAASA,EACTkF,OAAQA,EACRC,QAASe,IAGH,IAATpC,GACC,cAAC,EAAD,CACEjH,QAASA,EACTuD,OAAQA,EACRJ,QAASA,EACTkF,OAAQA,EACRC,QAASiB,QCtGJE,EA7DF,SAAC,GAA8C,IAA5CzJ,EAA2C,EAA3CA,QAAS0J,EAAkC,EAAlCA,OAAmBC,GAAe,EAA1BjG,UAA0B,EAAfiG,UAC1C,EAAgC3L,oBAAS,GAAzC,mBAAO4L,EAAP,KAAiBC,EAAjB,KACA,EAAgC7L,oBAAS,GAAzC,mBAAO8L,EAAP,KAAiBC,EAAjB,KACA,EAAgC/L,oBAAS,GAAzC,mBAAOgM,EAAP,KAAiBC,EAAjB,KACA,EAAgCjM,oBAAS,GAAzC,mBAAOkM,EAAP,KAAiBC,EAAjB,KACA,EAAgCnM,oBAAS,GAAzC,mBAAOoM,EAAP,KAAiBC,EAAjB,KACA,EAA2CrM,oBAAS,GAApD,mBAAsBsM,GAAtB,WAGA,EAAmCxM,EADvBkC,EAAU,SAAW0J,EAAS,UAClCzL,EAAR,EAAQA,KAAR,EAAcI,MAAd,EAAqBF,UAYrB,OACE,uBAAMmG,SAXa,SAACC,GACpBA,EAAEC,iBAGF,IAFA,IAAM+F,EAAW,CAACX,EAAUE,EAAUE,EAAUE,EAAUE,GACtDnJ,EAAe,GACVO,EAAI,EAAGA,EAAI,EAAGA,IACrB+I,EAAS/I,IAAMP,EAAaQ,KAAKxD,EAAKkC,MAAMuJ,GAAQxJ,MAAMsB,GAAGV,MAE/DE,EAAYhB,EAASiB,EAAcyI,EAAQC,EAASW,IAIpD,UACE,sBAAK3M,UAAU,cAAf,UACE,uBACE6M,KAAK,WACLrL,KAAK,QACLuF,SAAU,SAACH,GAAD,OAAOsF,EAAYtF,EAAEI,OAAO8F,UACtCA,QAASb,EACTjM,UAAU,qBAEZ,uBACE6M,KAAK,WACLrL,KAAK,QACLuF,SAAU,SAACH,GAAD,OAAOwF,EAAYxF,EAAEI,OAAO8F,UACtCA,QAASX,IAEX,uBACEU,KAAK,WACLrL,KAAK,QACLuL,QAAS,SAACnG,GAAD,OAAO0F,EAAY1F,EAAEI,OAAO8F,UACrCA,QAAST,IAEX,uBACEQ,KAAK,WACLrL,KAAK,QACLuF,SAAU,SAACH,GAAD,OAAO4F,EAAY5F,EAAEI,OAAO8F,UACtCA,QAASP,IAEX,uBACEM,KAAK,WACLrL,KAAK,QACLuF,SAAU,SAACH,GAAD,OAAO8F,EAAY9F,EAAEI,OAAO8F,UACtCA,QAASL,OAGb,0DCtBSO,EAlCC,SAAC,GAA+C,IAA7C3K,EAA4C,EAA5CA,QAAS0J,EAAmC,EAAnCA,OAAQhG,EAA2B,EAA3BA,UAAWiG,EAAgB,EAAhBA,SAE3C,EAAuC3L,mBAAS,MAAhD,mBAAO4M,EAAP,KAAoBC,EAApB,KACA,EAA2C7M,oBAAS,GAApD,mBAAO8M,EAAP,KAAsBR,EAAtB,KAEA,EAAmCxM,EADvBkC,EAAU,SAAW0J,EAAS,UAClCzL,EAAR,EAAQA,KAAMI,EAAd,EAAcA,MAAOF,EAArB,EAAqBA,UAoBrB,OAlBAI,qBAAU,WACN,GAAIN,EAAM,CACN,IAAIwB,EADE,EAENS,EAAQjC,EAAKkC,MAAMuJ,GAAQxJ,MAC3Be,EAAe,GAHT,cAKGf,GALH,IAKV,2BACkB,QADbT,EAAe,SACXqB,MAAiBrB,EAAKqB,KAAK6G,OAAO,KAAOjE,EAAUiE,OAAO,IAC/D1G,EAAaQ,KAAKhC,EAAKqB,MAPjB,8BAUVE,EAAYhB,EAASiB,EAAcyI,EAAQmB,EAAiBP,MAC1D,CAACrM,IAEHA,GAAQ2M,IAAiBE,GACzBnB,EAASiB,GAIT,gCACKvM,GAAS,8BAAMA,IACfF,GAAa,+CACbF,GAAQ,uCAHb,QCuDO8M,EAhFC,SAAC,GAAyD,IAAvD/K,EAAsD,EAAtDA,QAASsH,EAA6C,EAA7CA,WAAY5D,EAAiC,EAAjCA,UAAWxC,EAAsB,EAAtBA,gBACjD,EAA0BlD,mBAAS,IAAnC,mBAAOgN,EAAP,KAAcC,EAAd,KACA,EAA0BjN,mBAAS,IAAnC,mBAAOkN,EAAP,KAAcC,EAAd,KACA,EAA0BnN,mBAAS,IAAnC,mBAAOoN,EAAP,KAAcC,EAAd,KACA,EAA0BrN,mBAAS,IAAnC,mBAAOsN,EAAP,KAAcC,EAAd,KACA,EAAwBvN,mBAAS,GAAjC,mBAAOiJ,EAAP,KAAaC,EAAb,KAGE,OAAQD,GACR,KAAK,EACC+D,GACF9D,EAAQ,GAEV,MAEF,KAAK,EACCgE,GACFhE,EAAQ,GAEV,MAEF,KAAK,EACCkE,GACFlE,EAAQ,GAEV,MAEF,KAAK,EACCoE,GACFpE,EAAQ,GAEV,MAEF,KAAK,EACHhG,GAAgB,GAIpB,IAAIwI,EAASpC,EAAWL,EAAO,GAC/B,SAASuE,EAAYzK,EAAK4I,GACxB,OAAI3B,EAjCS,UAiCmBV,KAAgBvG,EAE5C,cAAC,EAAD,CACEf,QAASA,EACT0J,OAAQA,EACRhG,UAAWA,EACXiG,SAAUA,IAKZ,cAAC,EAAD,CACE3J,QAASA,EACT0J,OAAQA,EACRhG,UAAWA,EACXiG,SAAUA,IAMlB,OACE,gCACE,gCACG1C,EAAO,IAAM+D,GAASQ,EAAY,EAAGP,GACrChE,EAAO,IAAMiE,GAASM,EAAY,EAAGL,GACrClE,EAAO,IAAMmE,GAASI,EAAY,EAAGH,GACrCpE,EAAO,IAAMqE,GAASE,EAAY,EAAGD,GAC5B,IAATtE,GAAcqE,GAAS,0CAE1B,gCACGN,GAAS,gCAAM1D,EAAW,GAAjB,UAA4B0D,KACrCE,GAAS,gCAAM5D,EAAW,GAAjB,UAA4B4D,KACrCE,GAAS,gCAAM9D,EAAW,GAAjB,UAA4B8D,KACrCE,GAAS,gCAAMhE,EAAW,GAAjB,UAA4BgE,YCkM/BG,GAvQD,SAAC,GAAkD,IAAhDzL,EAA+C,EAA/CA,QAASvC,EAAsC,EAAtCA,MAAOiO,EAA+B,EAA/BA,eAAgBC,EAAe,EAAfA,SAC/C,EAA0B3N,mBAAS,MAAnC,mBAAO2C,EAAP,KAAcP,EAAd,KACA,EAAkCpC,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA8BJ,mBAAS,IAAvC,mBAAOmF,EAAP,KAAgBqG,EAAhB,KACA,EAA0BxL,mBAAS,QAAnC,mBAAO4N,EAAP,KAAcC,EAAd,KACA,EAAkC7N,mBAAS,IAA3C,mBAAO0F,EAAP,KAAkBC,EAAlB,KACA,EAAsC3F,oBAAS,GAA/C,mBAAO8N,EAAP,KAAoBC,EAApB,KACA,EAAgC/N,mBAAS,MAAzC,mBAAOuI,EAAP,KAAiByF,EAAjB,KACA,EAA8BhO,mBAAS,GAAvC,mBAAOmJ,EAAP,KAAgB8E,EAAhB,KACA,EAAsBjO,mBAAS,IAA/B,mBAAOqB,EAAP,KAAY6M,EAAZ,KACA,EAAoClO,mBAAS,MAA7C,mBAAOsJ,GAAP,KAAmBjH,GAAnB,KAKIsL,GAAsB,SAAVC,IACdxL,EAAS,MACThC,GAAa,GACboL,EAAW,IACXqC,EAAS,QACTlI,EAAa,IACboI,GAAe,GACfC,EAAY,MACZC,EAAW,GACXC,EAAO,IACP7L,GAAc,MACdjB,QAAQC,IAAI,SAGd,IAAMY,GAAS,UAGf1B,qBAAU,Yf1CL,SAAP,mCe2CI4N,CAAUnM,EAASvC,EAAOW,EAAcgC,EAAUC,MACjD,CAACL,EAASvC,IAETuC,GAAqB,SAAV4L,IAAqBzN,GAClC0N,EAAS,OAGP1I,GAAqB,QAAVyI,IAAoBzN,GACjC0N,EAAS,cAGPnI,GAAuB,eAAVkI,GACfC,EAAS,WAGPC,GAAyB,YAAVF,GACjBC,EAAS,QAGPtF,IACFlH,EAAI8H,EAAU,GAAKZ,EACnB2F,EAAO7M,GACP2M,EAAY,IACZC,EAAW9E,EAAU,IAGT,SAAVyE,GAAmC,IAAfvM,EAAIgC,SAC1BwK,EAAS,UACTI,EAAW,IAGb,IAAIG,GAAiB,EACjBC,GAAiB,EAErB,GAAc,WAAVT,EAAoB,CAItB,IAHA,IAAI9D,GAAW,GACXwE,GAAiB,KAEZrE,GAAI,EAAGA,GAAI,EAAGA,KAAK,CAEC,YAAzB5I,EAAI4I,IAAGR,eACkB,YAAzBpI,EAAI4I,IAAGR,cAEP2E,IAAkB,EAElBC,IAAkB,EAEpB,IAAIE,GAAYzJ,EAAazD,EAAI4I,IAAGH,SAAUpE,GAC1CoE,GAAWyE,KACbzE,GAAWyE,GACXD,GAAiBjN,EAAI4I,IAAGR,eAGL,YAAnB6E,IAAmD,YAAnBA,GAClCF,IAAkB,EAElBC,IAAkB,EAGG,IAAnBD,KACFA,GAAiB,GAGI,IAAnBC,KACFA,GAAiB,GAInB,IAAInJ,GAAMC,EAAQC,QACS,YAAvBD,EAAQE,YAAmD,YAAvBF,EAAQE,WAClC,OAARH,IAAgBkJ,GAAiB,EACnCA,IAAiB,EACA,OAARlJ,IAAgBkJ,GAAiB,EAC1CA,IAAiB,EACA,OAARlJ,IAAgBkJ,GAAiB,EAC1CA,IAAiB,EACA,OAARlJ,IAAgBkJ,GAAiB,EAC1CA,IAAiB,EACA,SAARlJ,IAAkBmJ,GAAiB,IAC5CD,IAAiB,IAGP,OAARlJ,IAAgBmJ,GAAiB,EACnCA,IAAiB,EACA,OAARnJ,IAAgBmJ,GAAiB,EAC1CA,IAAiB,EACA,OAARnJ,IAAgBmJ,GAAiB,EAC1CA,IAAiB,EACA,OAARnJ,IAAgBmJ,GAAiB,EAC1CA,IAAiB,EACA,SAARnJ,IAAkBmJ,GAAiB,IAC5CA,IAAiB,IAKvB,OACE,sBAAK1O,UAAU,UAAf,UACa,SAAViO,GAAoBzN,GAAa,8CAEvB,QAAVyN,GAAmBjL,GAAS2G,IAC3B,gCACE,cAAC,EAAD,CAAMtH,QAASA,EAASC,OAAQA,GAAQ2L,MAAOA,IAC/C,cAAC,EAAD,CACE5L,QAASA,EACT8I,SAAUxB,GACVyB,YAAaS,OAIR,eAAVoC,GACC,gCACE,cAAC,EAAD,CAASzI,QAASA,IAClB,cAAC,EAAD,CAAMnD,QAASA,EAASC,OAAQA,GAAQ2L,MAAOA,IAC/C,cAAC,EAAD,CACE5L,QAASA,EACTmD,QAASA,EACTM,cAAeE,OAIV,YAAViI,GACC,gCACE,cAAC,EAAD,CAASzI,QAASA,EAAS0B,KAAMnB,IACjC,cAAC,EAAD,CAAM1D,QAASA,EAASC,OAAQA,GAAQ2L,MAAOA,IAC/C,cAAC,EAAD,CACE5L,QAASA,EACTsH,WAAYA,GACZ5D,UAAWA,EACXxC,gBAAiB6K,OAIZ,SAAVH,GAAgC,IAAZzE,GACnB,gCACE,cAAC,EAAD,CAAShE,QAASA,EAAS0B,KAAMnB,EAAWoB,KAAMqC,IAClD,cAAC,EAAD,CAAMnH,QAASA,EAASC,OAAQA,GAAQ2L,MAAOA,IAC/C,cAAC,EAAD,CACE5L,QAASA,EACTC,OAAQA,GACRM,MAAO+G,GACPhB,aAAc0F,EACdlH,KAAMqC,EACNzD,UAAWA,EACX6C,SAAUlH,OAIL,SAAVuM,GAAgC,IAAZzE,GACnB,gCACE,cAAC,EAAD,CAAShE,QAASA,EAAS0B,KAAMnB,EAAWoB,KAAMqC,IAClD,cAAC,EAAD,CAAMnH,QAASA,EAASC,OAAQA,GAAQ2L,MAAOA,IAC/C,cAAC,EAAD,CACE5L,QAASA,EACTC,OAAQA,GACRM,MAAO+G,GACPhB,aAAc0F,EACdlH,KAAMqC,EACNzD,UAAWA,EACX6C,SAAUlH,OAIL,SAAVuM,GAAgC,IAAZzE,GACnB,gCACE,cAAC,EAAD,CAAShE,QAASA,EAAS0B,KAAMnB,EAAWoB,KAAMqC,IAClD,cAAC,EAAD,CAAMnH,QAASA,EAASC,OAAQA,GAAQ2L,MAAOA,IAC/C,cAAC,EAAD,CACE5L,QAASA,EACTC,OAAQA,GACRM,MAAO+G,GACPhB,aAAc0F,EACdlH,KAAMqC,EACNzD,UAAWA,EACX6C,SAAUlH,OAIL,SAAVuM,GAAgC,IAAZzE,GACnB,gCACE,cAAC,EAAD,CAAShE,QAASA,EAAS0B,KAAMnB,EAAWoB,KAAMqC,IAClD,cAAC,EAAD,CAAMnH,QAASA,EAASC,OAAQA,GAAQ2L,MAAOA,IAC/C,cAAC,EAAD,CACE5L,QAASA,EACTC,OAAQA,GACRM,MAAO+G,GACPhB,aAAc0F,EACdlH,KAAMqC,EACNzD,UAAWA,EACX6C,SAAUlH,OAKL,SAAVuM,GAAgC,IAAZzE,GACnB,gCACE,cAAC,EAAD,CAAShE,QAASA,EAAS0B,KAAMnB,EAAWoB,KAAMqC,IAClD,cAAC,EAAD,CAAMnH,QAASA,EAASC,OAAQA,GAAQ2L,MAAOA,IAC/C,cAAC,EAAD,CACE5L,QAASA,EACTC,OAAQA,GACRM,MAAO+G,GACPhB,aAAc0F,EACdlH,KAAMqC,EACNzD,UAAWA,EACX6C,SAAUlH,OAKL,WAAVuM,GACC,gCACE,cAAC,EAAD,CAASzI,QAASA,EAAS0B,KAAMnB,EAAWoB,KAAMqC,IAClD,+CACA,2CAAciF,MACd,2CAAcC,MACd,wBACE3B,QAAS,WACPgB,EAAe,CAACU,GAAgBC,KAChCR,EAAS,SAHb,+BCzPKW,I,MARA,WACX,OAAS,sBAAK7O,UAAU,SAAf,UACL,8BAAK,mBAAG8O,KAAK,iCAAiC9H,OAAO,MAAhD,mCAEL,8BAAK,mBAAG8H,KAAK,wCAAwC9H,OAAO,MAAvD,iCCgEE+H,GA/DF,WACX,MAAmC5O,EACjC,4CADMG,EAAR,EAAQA,KAAME,EAAd,EAAcA,UAAWE,EAAzB,EAAyBA,MAIzB,EAA0BL,mBAAS,GAAnC,mBAAOP,EAAP,KAAckP,EAAd,KACA,EAAkC3O,mBAAS,CAAC,EAAG,IAA/C,mBAAON,EAAP,KAAkBkP,EAAlB,KACA,EAAoC5O,mBAAS,MAA7C,mBAAO6O,EAAP,KAAmBC,EAAnB,KACA,EAAgC9O,mBAAS,IAAzC,mBAAO+O,EAAP,KAAiBC,EAAjB,KACA,EAAgChP,mBAAS,IAAzC,mBAAOiP,EAAP,KAAiBC,EAAjB,KAEIlN,EAAU,KACV/B,IACF+B,EAAU,uCAAyC/B,EAAKkP,SAG1D,IAAIC,EAAY,GAmBhB,OAjBIP,IACFE,EAAStP,GAASoP,EAClBO,EAAU,GAAK1P,EAAU,GAAKmP,EAAW,GACzCO,EAAU,GAAK1P,EAAU,GAAKmP,EAAW,GACzCzN,QAAQC,IAAI,UAAW+N,EAAWP,EAAYpP,GAC9CuP,EAAYD,GACZH,EAAaQ,GACTA,EAAU,GAAK,IACjBF,EAAY,eAEVE,EAAU,GAAK,IACjBF,EAAY,eAEdJ,EAAc,MACdH,EAASlP,EAAQ,IAIjB,gCACGU,GAAa,gDACbE,GAAS,8BAAMA,IACf2B,IAAYiN,GACX,sBAAKtP,UAAU,OAAf,UACE,cAAC,EAAD,CAAOF,MAAOA,EAAOC,UAAWA,IAChC,cAAC,GAAD,CACEsC,QAASA,EACTvC,MAAOA,EACPiO,eAAgBoB,EAChBnB,UAAU,IAEZ,cAAC,GAAD,OAGHsB,GACC,gCACE,6BAAKA,IACL,0CAAavP,EAAU,MACvB,0CAAaA,EAAU,MACvB,uDC9CK2P,OAbf,WACE,MAA4BrP,oBAAS,GAArC,mBAAOsP,EAAP,KAAeC,EAAf,KAEA,OACE,sBAAK5P,UAAU,MAAf,UACE,sCACW,IAAT2P,GAAkB,wBAAQ5C,QAAS,kBAAM6C,GAAU,IAAjC,wBAClBD,GAAU,cAAC,GAAD,QCNlBE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.bb040041.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Score = ({ round, gameScore }) => {\n  return (\n    <div className=\"scoreboard\" style={{ textAlign: \"left\" }}>\n      <div className=\"score\">\n        <span>\n          <div data-testid=\"team1Score\">Team 1: {gameScore[0]}</div>\n          <div data-testid=\"team2Score\">Team 2: {gameScore[1]}</div>\n          <div data-testid=\"round\">Round: {round}</div>\n        </span>\n      </div>\n    </div>\n  );\n};\n\nexport default Score;\n","import { useState, useEffect } from 'react';\n\nconst useFetch = (url) => {\n    const [data, setData] = useState(null);\n    const [isPending, setIsPending] = useState(true);\n    const [error, setError] = useState(null);\n    useEffect(() => {\n        const abortCont = new AbortController();\n        fetch(url, { signal: abortCont.signal })\n            .then(res => {\n                if (!res.ok) {\n                    throw Error('Could not fetch data for that resource');\n                }\n                return res.json();\n            })\n            .then(data => {\n                setData(data);\n                setIsPending(false);\n                setError(null);\n            })\n            .catch(err => {\n                if (err.name === \"AbortError\") {\n                    console.log('fetch aborted')\n                } else {\n                    setIsPending(false);\n                    setError(err.message);\n                }\n            })\n        return () => abortCont.abort();\n    }, [url]);\n    return { data, isPending, error }\n}\n\nexport default useFetch;","const Card = ({ card }) => {\n\n    return (\n        <div>\n            <img src={card.image} alt=\"Card\" width=\"100%\" height=\"100%\" />\n        </div>\n\n    );\n}\n\nexport default Card;","import useFetch from \"./useFetch\";\nimport Card from \"./Card\";\n\nconst Hand = ({ deckUrl, player, round }) => {\n  const { data, isPending, error } = useFetch(\n    deckUrl + \"/pile/\" + player + \"/list/\"\n  );\n  var cards = [];\n  if (data && data.piles[player] && data.piles[player].cards) {\n    cards = data.piles[player].cards;\n  }\n\n  return (\n    <div>\n      {error && <div>{error}</div>}\n      {isPending && <div>Loading...</div>}\n      {data && cards && (\n        <div>\n          <div className=\"hand\">\n            {cards[0] && <Card card={cards[0]} round={round} />}\n            {cards[1] && <Card card={cards[1]} round={round} />}\n            {cards[2] && <Card card={cards[2]} round={round} />}\n            {cards[3] && <Card card={cards[3]} round={round} />}\n            {cards[4] && <Card card={cards[4]} round={round} />}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Hand;\n","export async function dealHands(\n  deckUrl,\n  round,\n  setIsPending,\n  setHands,\n  setRoundOrder\n) {\n  const order = getRoundOrder(round);\n  await fetch(deckUrl + \"/shuffle/\");\n  const drawresponse = await fetch(deckUrl + \"/draw/?count=20\");\n  const drawData = await drawresponse.json();\n  let hands = hash(drawData.cards);\n  console.log(\"handCheck\", hands, drawData);\n  await fetch(\n    deckUrl + \"/pile/\" + order[0] + \"/add/?cards=\" + hands[0].toString()\n  );\n  await fetch(\n    deckUrl + \"/pile/\" + order[1] + \"/add/?cards=\" + hands[1].toString()\n  );\n  await fetch(\n    deckUrl + \"/pile/\" + order[2] + \"/add/?cards=\" + hands[2].toString()\n  );\n  const done = await fetch(\n    deckUrl + \"/pile/\" + order[3] + \"/add/?cards=\" + hands[3].toString()\n  );\n  if (done) {\n    setRoundOrder(order);\n    setHands(hands);\n    setIsPending(false);\n  }\n}\n\nfunction hash(cards) {\n  const hand1 = [\n    cards[0].code,\n    cards[1].code,\n    cards[2].code,\n    cards[12].code,\n    cards[13].code,\n  ];\n  const hand2 = [\n    cards[3].code,\n    cards[4].code,\n    cards[5].code,\n    cards[14].code,\n    cards[15].code,\n  ];\n  const hand3 = [\n    cards[6].code,\n    cards[7].code,\n    cards[8].code,\n    cards[16].code,\n    cards[17].code,\n  ];\n  const hand4 = [\n    cards[9].code,\n    cards[10].code,\n    cards[11].code,\n    cards[18].code,\n    cards[19].code,\n  ];\n  return [hand1, hand2, hand3, hand4];\n}\n\nexport function getRoundOrder(round) {\n  let val = (round - 1) % 4;\n  let order;\n  if (val === 0) {\n    order = [\"player2\", \"player3\", \"player4\", \"player1\"];\n  } else if (val === 1) {\n    order = [\"player3\", \"player4\", \"player1\", \"player2\"];\n  } else if (val === 2) {\n    order = [\"player4\", \"player1\", \"player2\", \"player3\"];\n  } else if (val === 3) {\n    order = [\"player1\", \"player2\", \"player3\", \"player4\"];\n  }\n  return order;\n} // module.exports = { dealHand, asyncCall};\n\n/** Get's the order relative to the last player to win a hand\n ** The player who won the last book goes first\n * @param  {String} lastWinner name of the last player to win a book\n */\nexport function getBookOrder(mung, roundOrder) {\n  let order = [];\n  let lastBook = mung[mung.length - 1];\n  let lastWinner;\n  if (lastBook) {\n    lastWinner = lastBook.winningPlayer;\n  }\n  if (lastWinner === \"player2\") {\n    order = [\"player2\", \"player3\", \"player4\", \"player1\"];\n  } else if (lastWinner === \"player3\") {\n    order = [\"player3\", \"player4\", \"player1\", \"player2\"];\n  } else if (lastWinner === \"player4\") {\n    order = [\"player4\", \"player1\", \"player2\", \"player3\"];\n  } else if (lastWinner === \"player1\") {\n    order = [\"player1\", \"player2\", \"player3\", \"player4\"];\n  } else {\n    order = roundOrder;\n  }\n  return order;\n}\n\n// export async function dealHands(deckUrl,round,setIsPending,setHands,setRoundOrder) {\n//   const order = getRoundOrder(round);\n//   await fetch(deckUrl + \"/shuffle/\");\n//   const drawresponse = await fetch(deckUrl + \"/draw/?count=20\");\n//   const drawData = await drawresponse.json();\n//   let hands = hash(drawData.cards);\n//   console.log(\"handCheck\",hands,drawData)\n//   await fetch(deckUrl + \"/pile/\" + order[0] + \"/add/?cards=\" + hands[0].toString())\n//   await fetch(deckUrl + \"/pile/\" + order[1] + \"/add/?cards=\" + hands[1].toString())\n//   await fetch(deckUrl + \"/pile/\" + order[2] + \"/add/?cards=\" + hands[2].toString())\n//   const done = await fetch(deckUrl + \"/pile/\" + order[3] + \"/add/?cards=\" + hands[3].toString())\n//   if (done) {\n//     setRoundOrder(order)\n//     setHands(hands)\n//     setIsPending(false)\n//   }\n// }\n\n/** Handles discarding, drawing new cards, and assigning that number of cards to the player\n * @param  {String} deckUrl URL of the deck being used for this round\n * @param  {Array} discardCodes Card codes to discard\n * @param  {String} player Player whose hand is being worked\n * @param  {Function} sendDiscardData Callback function to 'Play' to signify the process is done\n */\nexport async function getNewCards(\n  deckUrl,\n  discardCodes,\n  player,\n  sendDiscardData,\n  sendDiscardPending\n) {\n  const discardResponse = await fetch(deckUrl + \"/pile/discard/add/?cards=\" + discardCodes.toString())\n  await discardResponse.json()\n  //  const redrawCount = 5 - discardData.piles[player].remaining;\n  const redrawResponse = await fetch(deckUrl + \"/draw/?count=\" + discardCodes.length);\n  const redrawData = await redrawResponse.json();\n  console.log(\"redraw\", player, discardCodes,redrawData.cards);\n  let cards = [];\n  if (redrawData.cards) {\n    for (let i = 0; i < redrawData.cards.length; i++)\n      cards.push(redrawData.cards[i].code);\n  }\n  const assResponse = await fetch(\n    deckUrl + \"/pile/\" + player + \"/add/?cards=\" + cards.toString()\n  )\n  const done = await assResponse.json();\n  if (done) {\n    sendDiscardData(discardCodes.length)\n    sendDiscardPending(false)\n  }\n}\n","const trumpValues = [\n    -35, -21, -18, -13, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1,\n  ];\n  const offSuitValues = [13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0];\n  const offSuitValuesNonLead = [\n    27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14,\n  ];\n  \n  const heartTrumpOrder = [\n    \"5H\",\n    \"JH\",\n    \"AH\",\n    \"KH\",\n    \"QH\",\n    \"0H\",\n    \"9H\",\n    \"8H\",\n    \"7H\",\n    \"6H\",\n    \"4H\",\n    \"3H\",\n    \"2H\",\n  ];\n  const diamondTrumpOrder = [\n    \"5D\",\n    \"JD\",\n    \"AH\",\n    \"AD\",\n    \"KD\",\n    \"QD\",\n    \"0D\",\n    \"9D\",\n    \"8D\",\n    \"7D\",\n    \"6D\",\n    \"4D\",\n    \"3D\",\n    \"2D\",\n  ];\n  const spadesTrumpOrder = [\n    \"5S\",\n    \"JS\",\n    \"AH\",\n    \"AS\",\n    \"KS\",\n    \"QS\",\n    \"2S\",\n    \"3S\",\n    \"4S\",\n    \"6S\",\n    \"7S\",\n    \"8S\",\n    \"9S\",\n    \"0S\",\n  ];\n  const clubsTrumpOrder = [\n    \"5C\",\n    \"JC\",\n    \"AH\",\n    \"AC\",\n    \"KC\",\n    \"QC\",\n    \"2C\",\n    \"3C\",\n    \"4C\",\n    \"6C\",\n    \"7C\",\n    \"8C\",\n    \"9C\",\n    \"0C\",\n  ];\n  \n  const heartOffSuitOrder = [\n    \"2H\",\n    \"3H\",\n    \"4H\",\n    \"5H\",\n    \"6H\",\n    \"7H\",\n    \"8H\",\n    \"9H\",\n    \"0H\",\n    \"JH\",\n    \"QH\",\n    \"KH\",\n  ];\n  const diamondOffSuitOrder = [\n    \"AD\",\n    \"2D\",\n    \"3D\",\n    \"4D\",\n    \"5D\",\n    \"6D\",\n    \"7D\",\n    \"8D\",\n    \"9D\",\n    \"0D\",\n    \"JD\",\n    \"QD\",\n    \"KD\",\n  ];\n  const spadesOffSuitOrder = [\n    \"0S\",\n    \"9S\",\n    \"8S\",\n    \"7S\",\n    \"6S\",\n    \"5S\",\n    \"4S\",\n    \"3S\",\n    \"2S\",\n    \"AS\",\n    \"JS\",\n    \"QS\",\n    \"KS\",\n  ];\n  const clubsOffSuitOrder = [\n    \"0C\",\n    \"9C\",\n    \"8C\",\n    \"7C\",\n    \"6C\",\n    \"5C\",\n    \"4C\",\n    \"3C\",\n    \"2C\",\n    \"AC\",\n    \"JC\",\n    \"QC\",\n    \"KC\",\n  ];\n\n  export function evaluateHand(cards) {\n    let heartHandVal, diamondHandVal, spadeHandVal, clubHandVal;\n    heartHandVal = diamondHandVal = spadeHandVal = clubHandVal = 0;\n  \n    for (let i = 0; i < 5; i++) {\n      var card = cards[i];\n      heartHandVal += getHeartValue(card);\n      diamondHandVal += getDiamondValue(card);\n      spadeHandVal += getSpadeValue(card);\n      clubHandVal += getClubValue(card);\n    }\n  \n    return [heartHandVal, diamondHandVal, spadeHandVal, clubHandVal];\n  }\n  \n  export function getCardValue(card, trump) {\n    switch (trump) {\n      case \"Hearts\":\n        return getHeartValue(card);\n      case \"Diamonds\":\n        return getDiamondValue(card);\n      case \"Spades\":\n        return getSpadeValue(card);\n      case \"Clubs\":\n        return getClubValue(card);\n      default:\n        return 0;\n    }\n  }\n  \n  function getHeartValue(card) {\n    return (\n      trumpValues[heartTrumpOrder.indexOf(card)] ||\n      offSuitValues[diamondOffSuitOrder.indexOf(card)] ||\n      offSuitValues[clubsOffSuitOrder.indexOf(card)] ||\n      offSuitValues[spadesOffSuitOrder.indexOf(card)]\n    );\n  }\n  \n  function getDiamondValue(card) {\n    return (\n      trumpValues[diamondTrumpOrder.indexOf(card)] ||\n      offSuitValues[heartOffSuitOrder.indexOf(card)] ||\n      offSuitValues[clubsOffSuitOrder.indexOf(card)] ||\n      offSuitValues[spadesOffSuitOrder.indexOf(card)]\n    );\n  }\n  \n  function getSpadeValue(card) {\n    return (\n      trumpValues[spadesTrumpOrder.indexOf(card)] ||\n      offSuitValues[diamondOffSuitOrder.indexOf(card)] ||\n      offSuitValues[clubsOffSuitOrder.indexOf(card)] ||\n      offSuitValues[heartOffSuitOrder.indexOf(card)]\n    );\n  }\n  \n  function getClubValue(card) {\n    return (\n      trumpValues[clubsTrumpOrder.indexOf(card)] ||\n      offSuitValues[diamondOffSuitOrder.indexOf(card)] ||\n      offSuitValues[heartOffSuitOrder.indexOf(card)] ||\n      offSuitValues[spadesOffSuitOrder.indexOf(card)]\n    );\n  }","export const checkBid = (bid, bidData) => {\n  // console.log(\"incheckBid\",bid,bidData)\n  let highBid, highBidder, suit;\n  if (bid.playerBid === \"Pass\") {\n    // return {null, null};\n  } else if (bid.playerBid === \"Take\") {\n    highBid = bidData.highBid;\n    highBidder = bid.bidder;\n  } else if (bid.playerBid) {\n    highBid = bid.playerBid;\n    highBidder = bid.bidder;\n  }\n\n  return { highBid, highBidder };\n};\n\n/** Gets the players bid based on an evaluation of their hand and prev bids this round\n * @param  {Array} handValues array of hand evaluations relative to suits\n * @param  {Object} bidData {highBid: highest bid made so far\n *                           highBidder: player who made the highest bid}\n * @returns player's bid\n */\nexport function getBid(handValues, bidData) {\n  const bidOptions = [\"Pass\", \"15\", \"20\", \"25\", \"30\", \"30 No Draw\"];\n  var bestHandVal = handValues.sort((a, b) => {\n    return a - b;\n  })[0];\n  var playerBid = null;\n\n  // the lower the hand value the better, which makes the comparators the floor\n  // TODO add 25 and 30 options\n  // TODO add forced 15s when a player is holding a 5 and no bids are in yet\n  // TODO this bid thresholds are abirtrary. try to get a better handle on what\n  //   these look like\n  // TODO needs an exception where if the player is dealer they can take the bid\n\n  if (bestHandVal < 0 - 25) {\n    playerBid = \"20\";\n  } else if (bestHandVal < 0 - 5) {\n    playerBid = \"15\";\n  }\n\n  if (\n    playerBid &&\n    bidOptions.indexOf(playerBid) <= bidOptions.indexOf(bidData.highBid)\n  ) {\n    playerBid = \"Pass\";\n  }\n\n  return playerBid;\n}\n\nexport function getBestSuit(handValues) {\n  let suit;\n  const orgHandValues = JSON.stringify(handValues);\n  const bestHandVal = handValues.sort(function (a, b) {\n    return a - b;\n  })[0];\n\n  const suits = [\"Hearts\", \"Diamonds\", \"Spades\", \"Clubs\"];\n  const suitNum = JSON.parse(orgHandValues).indexOf(bestHandVal);\n  suit = suits[suitNum];\n  return suit;\n}\n","import { useState } from \"react\";\nimport { evaluateHand } from \"../cardValues\";\nimport useFetch from \"../useFetch\";\nimport { getBestSuit } from \"./bidfuncs\";\n\nconst SelectSuit = ({ deckUrl, bidData, sendTrumpSuit }) => {\n    const [trumpSuit, setTrumpSuit] = useState(\"Hearts\");\n    const bidder = bidData.highBidder\n    const url = deckUrl + \"/pile/\" + bidder + \"/list/\";\n    const { data, error, isPending } = useFetch(url);\n\n    const player = \"player1\";\n\n    let humanBidder;\n    if (data) {\n        if (bidder === player) {\n          humanBidder = true;\n        } else {\n          humanBidder = false;\n          let cards = data.piles[bidder].cards;\n          let card;\n          let cardCodes = []\n          for (card of cards) {\n              cardCodes.push(card.code)\n          }\n          let handValues = evaluateHand(cardCodes);\n          let trumpSuit = getBestSuit(handValues)\n        sendTrumpSuit(trumpSuit)\n        }\n      }\n\n      const handleSuitSubmit = (e) => {\n        e.preventDefault();\n        sendTrumpSuit(trumpSuit)\n    };\n\n\n\n\n    return (\n        <div>\n            {bidData.highBidder === \"player1\" &&\n                <div>\n                    <form onSubmit={handleSuitSubmit}>\n                        <select\n                            value={trumpSuit}\n                            onChange={(e) => setTrumpSuit(e.target.value)}>\n                            <option value=\"Hearts\">Hearts</option>\n                            <option value=\"Diamonds\">Diamonds</option>\n                            <option value=\"Spades\">Spades</option>\n                            <option value=\"Clubs\">Clubs</option>\n                        </select>\n                        <button>Select Suit</button>\n                    </form>\n                </div>}\n        </div>)\n}\n\nexport default SelectSuit;","/** Display of bid information found on the discard and play views\n * @param  {Object} {bidData object of data related ot the bid\n * @param  {String} suit} Trump suit\n * @param  {Int} \n */\nconst BidInfo = ({ bidData, suit, book }) => {\n\n    var bid = bidData.highBid\n    var bidder = bidData.highBidder\n\n    return (\n        <div>\n            {!suit && <h3>{(bid + \" from \" + bidder + \" in...\")}</h3>}\n            {suit && <h3>{(bid + \" from \" + bidder + \" in \" + suit)}</h3>}\n            {book && <h4>Book: {book} </h4>}\n        </div>\n    );\n}\n\nexport default BidInfo;","const PlayCard = ({ card }) => {\n\n    return (\n        <div>\n            <img src={card.image} alt=\"Card\" width=\"100%\" height=\"100%\" />\n        </div>\n\n    );\n}\n\nexport default PlayCard;","import { getCardValue } from \"./cardValues\";\n\nexport function getDealer(dealers) {\n  let order = dealers;\n  let dealer = order.shift();\n  // TODO fix the order here\n  order.push(dealer);\n  return { dealer, order };\n}\n\nexport function getWorstCard(cards, trump) {\n  var worstCard = null;\n  var worstCardVal = 0 - 50;\n\n  for (let i = 0; i < cards.length; i++) {\n    var curCardVal = getCardValue(cards[i].code, trump);\n    if (curCardVal > worstCardVal) {\n      worstCardVal = curCardVal;\n      worstCard = i;\n    }\n  }\n  return cards[worstCard];\n}\n\nexport function getBestCard(cards, trump) {\n  var bestCard = null;\n  var bestCardVal = 50;\n\n  for (let i = 0; i < cards.length; i++) {\n    var curCardVal = getCardValue(cards[i].code, trump);\n    if (curCardVal < bestCardVal) {\n      bestCardVal = curCardVal;\n      bestCard = i;\n    }\n  }\n\n  return cards[bestCard];\n}\n\nexport function getPlayerHand(url, player) {\n  var tempData;\n\n  const playerHand = fetch(url)\n    .then((res) => {\n      if (!res.ok) {\n        throw Error(\"Could not fetch data for that resource\");\n      }\n      return res.json();\n    })\n    .then((data) => {});\n  playerHand.then((data) => {\n    return data;\n  });\n\n  return tempData;\n}\n\n/** Moves the player's selected card to the discard pile and plays the card on the table\n * @param  {String} deckUrl URL to the deck being used\n * @param  {String} playerCard Card code of the card being played\n * @param  {Function} sendPlayerCard Calls back to play with the PlayerCard\n */\nexport async function playCardNow(deckUrl, playerCard, sendPlayerCard) {\n  await fetch(\n    deckUrl + \"/pile/discard/add/?cards=\" + playerCard.code\n  )\n    .then((res) => {\n      if (!res.ok) {\n        throw Error(\"Could not fetch data for that resource\");\n      }\n      return res.json();\n    })\n    .then((data) => {\n      return playerCard;\n    });\n  sendPlayerCard(playerCard);\n}\n\n/** finds the players position\n * @param  {String} player handle of the player \n * @param  {Array} order order of players\n */\n export function checkPlayerPosition(player, order) {\n  let num = order.indexOf(player) + 1;\n  return num;\n}","import { useState } from \"react\";\nimport useFetch from \"../useFetch\";\nimport { playCardNow } from \"../scripts\";\n\nconst PlayerTurn = ({\n  deckUrl,\n  player,\n  position,\n  leadSuit,\n  sendPlayCard,\n  trumpSuit,\n}) => {\n  const [playerCard, setPlayerCard] = useState(0);\n\n  const url = deckUrl + \"/pile/\" + player + \"/list/\";\n  const { data, error, isPending } = useFetch(url);\n\n  var cards = [];\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    playCardNow(deckUrl, cards[playerCard], sendPlayCard);\n  };\n\n  if (data) {\n    cards = data.piles[player].cards;\n  }\n\n  return (\n    <div>\n      {data && (\n        <form onSubmit={handleSubmit}>\n          <select\n            value={playerCard}\n            onChange={(e) => setPlayerCard(e.target.value)}\n          >\n            {cards[0] && <option value={0}>{cards[0].code}</option>}\n            {cards[1] && <option value={1}>{cards[1].code}</option>}\n            {cards[2] && <option value={2}>{cards[2].code}</option>}\n            {cards[3] && <option value={3}>{cards[3].code}</option>}\n            {cards[4] && <option value={4}>{cards[4].code}</option>}\n          </select>\n          <button>Play Card</button>\n        </form>\n      )}\n    </div>\n  );\n};\n\nexport default PlayerTurn;\n","import { useState } from \"react\";\nimport { getBestCard, getWorstCard } from \"../scripts\";\nimport useFetch from \"../useFetch\";\n\nconst Turn = ({ deckUrl, player, position, leadSuit, sendPlayCard, trumpSuit }) => {\n\n    const url = deckUrl + \"/pile/\" + player + \"/list/\";\n    const { data, error, isPending } = useFetch(url);\n    const [cardPlay,setCardPlay] = useState(null);\n\n    var cards = [];\n\n    if (data && !cardPlay) {\n        cards = data.piles[player].cards;\n        var taco = playCard(position, cards, trumpSuit);\n        \n        fetch(deckUrl + \"/pile/discard/add/?cards=\" + taco.code)\n            .then(res => {\n                if (!res.ok) {\n                    throw Error('Could not fetch data for that resource');\n                }\n                return res.json();\n            })\n            .then(data => {\n                setCardPlay(taco)\n            });\n    }\n\n    if (data && cardPlay) {\n        sendPlayCard(cardPlay)\n    }\n\n    return (\n        <div>\n            {error && <div>{error}</div>}\n            {isPending && <div>Thinking....</div>}\n            {data && <div>Dawn</div>};\n        </div>\n    )\n}\n\nexport default Turn;\n\nfunction playCard(position, cards, trumpSuit) {\n    var card;\n    switch (position) {\n        case 1:\n            card = getWorstCard(cards, trumpSuit);\n            break;\n        case 2:\n            card = getWorstCard(cards, trumpSuit);\n            break;\n        case 3:\n            card = getBestCard(cards, trumpSuit);\n            break;\n        case 4:\n            card = getBestCard(cards, trumpSuit);\n            break;\n        default:\n            console.log(\"defaultHit\")\n\n    }\n    return card\n}","import { useState } from \"react\";\nimport { getCardValue } from \"../cardValues\";\nimport { getBookOrder } from \"../deckFuncs\";\nimport PlayCard from \"./PlayCard\";\nimport PlayerTurn from \"./PlayerTurn\";\nimport Turn from \"./Turn\";\n\nconst Play = ({ deckUrl, player, order, sendBookInfo, book, trumpSuit, bookInfo }) => {\n  const [playCard1, setPlayCard1] = useState(\"\");\n  const [playCard2, setPlayCard2] = useState(\"\");\n  const [playCard3, setPlayCard3] = useState(\"\");\n  const [playCard4, setPlayCard4] = useState(\"\");\n  const [leadSuit, setLeadSuit] = useState(\"\");\n  const [turn, setTurn] = useState(1);\n\n  var winner;\n\n  let bookNum = book;\n  let bookOrder = getBookOrder(bookInfo,order)\n  if (turn === 1 && playCard1) {\n    let guac = playCard1.code.charAt(1);\n    setLeadSuit(guac);\n    setTurn(2);\n  } else if (turn === 2 && playCard2) {\n    setTurn(3);\n  } else if (turn === 3 && playCard3) {\n    setTurn(4);\n  } else if (turn === 4 && playCard4) {\n    setTimeout(()=> {\n       setTurn(5);\n      },2000);\n  } else if (turn === 5) {\n    book = [playCard1, playCard2, playCard3, playCard4];\n    let curBestValue = 50;\n    for (let i = 0; i < book.length; i++) {\n      let val = getCardValue(book[i].code, trumpSuit);\n      if (val < curBestValue) {\n        curBestValue = val;\n        winner = i;\n      }\n    }\n    let highCard = book[winner].code;\n    let winningPlayer = bookOrder[winner]\n    let tempLog = { bookNum, winningPlayer, highCard };\n    sendBookInfo(tempLog);\n  }\n\n  function whoseTurn(val, sendPlayCard) {\n    // want to check whose turn it is to decide which card to render\n    // right now everything is set to work on RoundOrder and there's only one player\n    // need to checkPlayerPosition = Turn and then render the PlayerTurn instead of CpuTurn\n    //\n    // console.log(val,order[val-1])\n    if (checkPlayerPosition(player, bookOrder) === val) {\n      return (\n        <PlayerTurn\n          deckUrl={deckUrl}\n          player={player}\n          position={val}\n          sendPlayCard={sendPlayCard}\n          trumpSuit={trumpSuit}\n          leadSuit={leadSuit}\n        />\n      );\n    } else {\n      return (\n        <Turn\n          deckUrl={deckUrl}\n          player={bookOrder[val-1]}\n          position={val}\n          sendPlayCard={sendPlayCard}\n          trumpSuit={trumpSuit}\n        />\n      );\n    }\n  }\n\n  function DisplayLog() {\n    let x = [];\n    \n    for (book of bookInfo) {\n      x.push(<div>{book.bookNum}: {`${book.winningPlayer === \"player1\" || book.winningPlayer === \"player3\" ? \"Team 1\" : \"Team 2\"}`} {book.highCard} {book.winningPlayer}</div>)\n    }\n    \n    return <div>{x}</div>\n\n  }\n\n  return (\n    <div>\n      <div className=\"hand\">\n      {turn > 0 && !playCard1 && whoseTurn(1, setPlayCard1)}\n      {turn > 1 && !playCard2 && whoseTurn(2, setPlayCard2)}        \n      {turn > 2 && !playCard3 && whoseTurn(3, setPlayCard3)}        \n      {turn > 3 && !playCard4 && whoseTurn(4, setPlayCard4)}  \n      {turn === 4 && playCard4 && <div>Napkins on the table!</div>}                    \n\n        {playCard1 && <PlayCard card={playCard1} />}\n        {playCard2 && <PlayCard card={playCard2} />}\n        {playCard3 && <PlayCard card={playCard3} />}\n        {playCard4 && <PlayCard card={playCard4} />}\n      </div>\n    { bookInfo && DisplayLog()}\n    </div>\n\n  );\n};\n\nexport default Play;\n\n/** finds the human players position\n * @param  {String} player handle of the player (fixed to \"player1\" ATM)\n * @param  {Array} order order of players (currently fixed to roundOrder)\n */\nexport function checkPlayerPosition(player, order) {\n  let num = order.indexOf(player) + 1;\n  return num;\n}\n","import { useState } from \"react\";\nimport { evaluateHand } from \"../cardValues\";\nimport useFetch from \"../useFetch\";\nimport { getBid } from \"./bidfuncs\";\n\nconst MakeBid = ({ deckUrl, bidder, bidData, dealer, sendBid }) => {\n  const [playerBid, setPlayerBid] = useState(\"Pass\");\n  const player = \"player1\";\n  const url = deckUrl + \"/pile/\" + bidder + \"/list/\";\n  const { data, error, isPending } = useFetch(url);\n\n  let highBid = bidData.highBid;\n  let humanBidder;\n\n  if (data) {\n    if (bidder === player) {\n      humanBidder = true;\n    } else {\n      humanBidder = false;\n      let cards = data.piles[bidder].cards;\n      let card;\n      let cardCodes = []\n      for (card of cards) {\n          cardCodes.push(card.code)\n      }\n      let handValues = evaluateHand(cardCodes);\n      let playerBid = getBid(handValues,bidData);\n      let bidYooo = {bidder,playerBid}\n      sendBid(bidYooo)\n    }\n  }\n\n  let isDealer = player === dealer;\n  \n  const handleSubmit = () => {\n      sendBid({\"bidder\": bidder,\n               playerBid })\n  }\n\n  return (\n    <div className=\"bid\">\n      {humanBidder && (\n        <div>\n          <form onSubmit={handleSubmit}>\n            <select\n              value={playerBid}\n              onChange={(e) => setPlayerBid(e.target.value)}\n            >\n              {isDealer && <option value=\"Take\">Take</option>}\n              <option value=\"Pass\">Pass</option>\n{/* TODO bidOptions need to be better */}\n              {highBid === null && <option value=\"15\">15</option>}\n              {highBid === \"15\" && <option value=\"20\">20</option>}\n              <option value=\"25\">25</option>\n              <option value=\"30\">30</option>\n              <option value=\"30No\">30 No Draw</option>\n            </select>\n            <button>Place Bid</button>\n          </form>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MakeBid;\n","import { useEffect, useState } from \"react\";\nimport { checkBid } from \"./bidfuncs\";\nimport MakeBid from \"./MakeBid\";\n\nconst Bidding = ({ deckUrl, bidOrder, sendBidData }) => {\n  const [bid1, setBid1] = useState(\"\");\n  const [bid2, setBid2] = useState(\"\");\n  const [bid3, setBid3] = useState(\"\");\n  const [bid4, setBid4] = useState(\"\");\n  const [turn, setTurn] = useState(1);\n  const [bidData, setBidData] = useState({ highBid: null, highBidder: null });\n\nuseEffect(() => {\n  setBid1(\"\")\n  setBid2(\"\")\n  setBid3(\"\")\n  setBid4(\"\")\n  setBidData({ highBid: null, highBidder: null })\n}, [bidOrder])\n   \n  // need to call this one bidder at a time in it's own object.\n  // probably want a nested structure like 'Play' where each\n  // CPU player has their own component\n  // and then the human player has their component\n  // *** consider rolling SelectSuit under that umbrella as well.\n\n  let lastBid, lastBidder;\n  let bidder = bidOrder[turn - 1];\n  const bidOptions = [\"Pass\", \"15\", \"20\", \"25\", \"30\", \"30 No Draw\"];\n  const dealer = bidOrder[3];\n\n  switch (turn) {\n    case 1: {\n      if (bid1) {\n        // setTimeout(() => {\n          let { highBid, highBidder } = checkBid(bid1, bidData);\n          // console.log(\"plays\",highBid,highBidder)\n          if (highBid) {\n            setBidData({ highBid, highBidder });\n            setTurn(2);\n          } else {\n            setTurn(2);\n          }\n        // }, 1000);\n      }\n      break;\n    }\n    case 2: {\n      if (bid2) {\n        // setTimeout(() => {\n          let { highBid, highBidder } = checkBid(bid2, bidData);\n          // console.log(\"plays\",highBid,highBidder)\n          if (highBid) {\n            setBidData({ highBid, highBidder });\n            setTurn(3);\n          } else {\n            setTurn(3);\n          }\n        // }, 1000);\n      } else {\n        lastBid = bid1.playerBid;\n        lastBidder = bid1.bidder;\n      }\n      break;\n    }\n    case 3: {\n      if (bid3) {\n        // setTimeout(() => {\n          let { highBid, highBidder } = checkBid(bid3, bidData);\n          if (highBid) {\n            setBidData({ highBid, highBidder });\n            setTurn(4);\n          } else {\n            setTurn(4);\n          }\n        // }, 1000);\n      } else {\n        lastBid = bid2.playerBid;\n        lastBidder = bid2.bidder;\n      }\n      break;\n    }\n    case 4: {\n      if (bid4) {\n        // setTimeout(() => {\n          let { highBid, highBidder } = checkBid(bid4, bidData);\n          if (highBid) {\n            setBidData({ highBid, highBidder });\n            setTurn(5);\n          } else {\n            setTurn(5);\n          }\n        // }, 1000);\n      } else {\n        lastBid = bid3.playerBid;\n        lastBidder = bid3.bidder;\n      }\n      break;\n    }\n    case 5: {\n      lastBid = bid4.playerBid;\n      lastBidder = bid4.bidder;\n      console.log(\"sendBid\",bidData)\n      sendBidData(bidData)\n    }\n  }\n\n  // console.log(\"turn\",turn);\n  // console.log(\"lastBid\", lastBid, lastBidder);\n  // console.log(\"bidData\", bidData);\n  // console.log(\"bidInfo\",[bid1,bid2,bid3,bid4])\n\n  return (\n    <div>\n      {bidData.highBid && (\n        <div>\n          <div>\n            High Bid: {bidData.highBidder} {bidData.highBid}\n          </div>\n        </div>\n      )}\n      {lastBidder && (\n        <div>\n          {/* TODO show the log of bids, may inform other players bids*/}\n          <div>\n            Last Bid: {lastBidder} {lastBid || \"Pass\"}\n          </div>\n        </div>\n      )}\n      {!bid1 && (\n        <div>\n          <div data-testid=\"firstBidder\">{bidOrder[0]} to make first bid.</div>\n        </div>\n      )}\n      {turn === 1 && (\n        <MakeBid\n          deckUrl={deckUrl}\n          bidder={bidder}\n          bidData={bidData}\n          dealer={dealer}\n          sendBid={setBid1}\n        />\n      )}\n      {turn === 2 && (\n        <MakeBid\n          deckUrl={deckUrl}\n          bidder={bidder}\n          bidData={bidData}\n          dealer={dealer}\n          sendBid={setBid2}\n        />\n      )}\n      {turn === 3 && (\n        <MakeBid\n          deckUrl={deckUrl}\n          bidder={bidder}\n          bidData={bidData}\n          dealer={dealer}\n          sendBid={setBid3}\n        />\n      )}\n      {turn === 4 && (\n        <MakeBid\n          deckUrl={deckUrl}\n          bidder={bidder}\n          bidData={bidData}\n          dealer={dealer}\n          sendBid={setBid4}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Bidding;\n","import { useState } from \"react\";\nimport { getNewCards } from \"../deckFuncs\";\nimport useFetch from \"../useFetch\";\n\nconst Draw = ({ deckUrl, drawer, trumpSuit, sendDraw }) => {\n  const [discard0, setDiscard0] = useState(false);\n  const [discard1, setDiscard1] = useState(false);\n  const [discard2, setDiscard2] = useState(false);\n  const [discard3, setDiscard3] = useState(false);\n  const [discard4, setDiscard4] = useState(false);\n  const [discardPending,setDiscardPending] = useState(true)\n\n  const url = deckUrl + \"/pile/\" + drawer + \"/list/\";\n  const { data, error, isPending } = useFetch(url);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const discards = [discard0, discard1, discard2, discard3, discard4];\n    let discardCodes = [];\n    for (let i = 0; i < 5; i++) {\n      discards[i] && discardCodes.push(data.piles[drawer].cards[i].code);\n    }\n    getNewCards(deckUrl, discardCodes, drawer, sendDraw,setDiscardPending);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div className=\"discardHand\">\n        <input\n          type=\"checkbox\"\n          name=\"card0\"\n          onChange={(e) => setDiscard0(e.target.checked)}\n          checked={discard0}\n          className=\"dischardCheckBox\"\n        ></input>\n        <input\n          type=\"checkbox\"\n          name=\"card1\"\n          onChange={(e) => setDiscard1(e.target.checked)}\n          checked={discard1}\n        ></input>\n        <input\n          type=\"checkbox\"\n          name=\"card2\"\n          onClick={(e) => setDiscard2(e.target.checked)}\n          checked={discard2}\n        ></input>\n        <input\n          type=\"checkbox\"\n          name=\"card3\"\n          onChange={(e) => setDiscard3(e.target.checked)}\n          checked={discard3}\n        ></input>\n        <input\n          type=\"checkbox\"\n          name=\"card4\"\n          onChange={(e) => setDiscard4(e.target.checked)}\n          checked={discard4}\n        ></input>\n      </div>\n      <button>Discard Selected</button>\n    </form>\n  );\n};\n\nexport default Draw;\n","import { useEffect, useState } from \"react\";\nimport { getNewCards } from \"../deckFuncs\";\nimport useFetch from \"../useFetch\";\n\nconst DrawCpu = ({ deckUrl, drawer, trumpSuit, sendDraw  }) => {\n\n    const [discardCount,setDiscardCount] = useState(null);\n    const [discardPending,setDiscardPending] = useState(true)\n    const url = deckUrl + \"/pile/\" + drawer + \"/list/\";\n    const { data, error, isPending } = useFetch(url);\n\n    useEffect(() => {\n        if (data) {\n            let card;\n        let cards = data.piles[drawer].cards;\n        let discardCodes = [];\n    \n        for (card of cards) {\n        if (card.code !== \"AH\" && card.code.charAt(1) !== trumpSuit.charAt(0)) {\n            discardCodes.push(card.code);\n      }\n    }\n        getNewCards(deckUrl, discardCodes, drawer, setDiscardCount, setDiscardPending);\n      }}, [data]);\n\n    if (data && discardCount && !discardPending)  {\n        sendDraw(discardCount)\n    }\n\n    return (\n        <div>\n            {error && <div>{error}</div>}\n            {isPending && <div>Thinking....</div>}\n            {data && <div>Done</div>};\n        </div>\n    )\n}\n\nexport default DrawCpu;\n","import { useEffect, useState } from \"react\";\nimport { checkPlayerPosition } from \"../Play/Play\";\nimport Draw from \"./Draw\";\nimport DrawCpu from \"./DrawCpu\";\n\nconst Drawing = ({ deckUrl, roundOrder, trumpSuit, sendDiscardData }) => {\n  const [draw1, setDraw1] = useState(\"\");\n  const [draw2, setDraw2] = useState(\"\");\n  const [draw3, setDraw3] = useState(\"\");\n  const [draw4, setDraw4] = useState(\"\");\n  const [turn, setTurn] = useState(1);\n  \n  const player = \"player1\";\n    switch (turn) {\n    case 1: {\n      if (draw1) {\n        setTurn(2);\n      }\n      break;\n    }\n    case 2: {\n      if (draw2) {\n        setTurn(3);\n      }\n      break;\n    }\n    case 3: {\n      if (draw3) {\n        setTurn(4);\n      }\n      break;\n    }\n    case 4: {\n      if (draw4) {\n        setTurn(5);\n      }\n      break;\n    }\n    case 5: {\n      sendDiscardData(true);\n    }\n  }\n\n  let drawer = roundOrder[turn - 1];\n  function whoseRedraw(val, sendDraw) {\n    if (checkPlayerPosition(player, roundOrder) === val) {\n      return (\n        <Draw\n          deckUrl={deckUrl}\n          drawer={drawer}\n          trumpSuit={trumpSuit}\n          sendDraw={sendDraw}\n        />\n      );\n    } else {\n      return (\n        <DrawCpu\n          deckUrl={deckUrl}\n          drawer={drawer}\n          trumpSuit={trumpSuit}\n          sendDraw={sendDraw}\n        />\n      );\n    }\n  }\n\n  return (\n    <div>\n      <div>\n        {turn > 0 && !draw1 && whoseRedraw(1, setDraw1)}\n        {turn > 1 && !draw2 && whoseRedraw(2, setDraw2)}\n        {turn > 2 && !draw3 && whoseRedraw(3, setDraw3)}\n        {turn > 3 && !draw4 && whoseRedraw(4, setDraw4)}\n        {turn === 4 && draw4 && <div>Hey!</div>}\n      </div>\n      <div>\n        {draw1 && <div>{roundOrder[0]} draws {draw1}</div>}\n        {draw2 && <div>{roundOrder[1]} draws {draw2}</div>}\n        {draw3 && <div>{roundOrder[2]} draws {draw3}</div>}\n        {draw4 && <div>{roundOrder[3]} draws {draw4}</div>}\n      </div>\n    </div>\n  );\n};\n\nexport default Drawing;\n","import { useEffect, useState } from \"react\";\nimport Hand from \"./Hand\";\nimport { dealHands } from \"./deckFuncs\";\nimport SelectSuit from \"./Bidding/SelectSuit\";\nimport BidInfo from \"./Bidding/BidInfo\";\nimport Play from \"./Play/Play\";\nimport { getCardValue } from \"./cardValues\";\nimport Bidding from \"./Bidding/Bidding\";\nimport Drawing from \"./Drawing/Drawing\";\n\nconst Round = ({ deckUrl, round, sendRoundScore, newRound }) => {\n  const [hands, setHands] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [bidData, setBidData] = useState(\"\");\n  const [stage, setStage] = useState(\"Deal\");\n  const [trumpSuit, setTrumpSuit] = useState(\"\");\n  const [discardData, setDiscardData] = useState(false);\n  const [bookInfo, setBookInfo] = useState(null);\n  const [bookNum, setBookNum] = useState(1);\n  const [log, setLog] = useState([]);\n  const [roundOrder, setRoundOrder] = useState(null);\n\n  const order = [\"player1\", \"player2\", \"player3\", \"player4\"];\n\n  // TODO look into a way to reset states without having todo this...\n  if (newRound && stage === \"Over\") {\n    setHands(null);\n    setIsPending(true);\n    setBidData(\"\");\n    setStage(\"Deal\");\n    setTrumpSuit(\"\");\n    setDiscardData(false);\n    setBookInfo(null);\n    setBookNum(1);\n    setLog([]);\n    setRoundOrder(null);\n    console.log(\"wipe\");\n  }\n\n  const player = \"player1\";\n  const dealer = order[(round - 1) % 4];\n\n  useEffect(() => {\n    dealHands(deckUrl, round, setIsPending, setHands, setRoundOrder);\n  }, [deckUrl, round]);\n\n  if (deckUrl && stage === \"Deal\" && !isPending) {\n    setStage(\"Bid\");\n  }\n\n  if (bidData && stage === \"Bid\" && !isPending) {\n    setStage(\"SuitSelect\");\n  }\n\n  if (trumpSuit && stage === \"SuitSelect\") {\n    setStage(\"Discard\");\n  }\n\n  if (discardData && stage === \"Discard\") {\n    setStage(\"Play\");\n  }\n\n  if (bookInfo) {\n    log[bookNum - 1] = bookInfo;\n    setLog(log);\n    setBookInfo(\"\");\n    setBookNum(bookNum + 1);\n  }\n\n  if (stage === \"Play\" && log.length === 5) {\n    setStage(\"Winner\");\n    setBookNum(0);\n  }\n\n  let team1BookCount = 0;\n  let team2BookCount = 0;\n\n  if (stage === \"Winner\") {\n    let highCard = 50;\n    let highCardWinner = null;\n\n    for (let x = 0; x < 5; x++) {\n      if (\n        log[x].winningPlayer === \"player1\" ||\n        log[x].winningPlayer === \"player3\"\n      ) {\n        team1BookCount += 1;\n      } else {\n        team2BookCount += 1;\n      }\n      let cardValue = getCardValue(log[x].highCard, trumpSuit);\n      if (highCard > cardValue) {\n        highCard = cardValue;\n        highCardWinner = log[x].winningPlayer;\n      }\n    }\n    if (highCardWinner === \"player1\" || highCardWinner === \"player3\") {\n      team1BookCount += 1;\n    } else {\n      team2BookCount += 1;\n    }\n\n    if (team1BookCount === 6) {\n      team1BookCount = 9;\n    }\n\n    if (team2BookCount === 6) {\n      team2BookCount = 9;\n    }\n\n// TODO clean this up and turn it into a function\n    let bid = bidData.highBid;\n    if (bidData.highBidder === \"player1\" || bidData.highBidder === \"player3\") {\n      if (bid === \"15\" && team1BookCount < 3) {\n        team1BookCount = 0 - 3;\n      } else if (bid === \"20\" && team1BookCount < 4) {\n        team1BookCount = 0 - 4;\n      } else if (bid === \"25\" && team1BookCount < 5) {\n        team1BookCount = 0 - 5;\n      } else if (bid === \"30\" && team1BookCount < 6) {\n        team1BookCount = 0 - 6;\n      } else if (bid === \"30No\" && team2BookCount < 6) {\n        team1BookCount = 0 - 12;\n      }\n    } else {\n      if (bid === \"15\" && team2BookCount < 3) {\n        team2BookCount = 0 - 3;\n      } else if (bid === \"20\" && team2BookCount < 4) {\n        team2BookCount = 0 - 4;\n      } else if (bid === \"25\" && team2BookCount < 5) {\n        team2BookCount = 0 - 5;\n      } else if (bid === \"30\" && team2BookCount < 6) {\n        team2BookCount = 0 - 6;\n      } else if (bid === \"30No\" && team2BookCount < 6) {\n        team2BookCount = 0 - 12;\n      }\n    }\n  }\n\n  return (\n    <div className=\"content\">\n      {stage === \"Deal\" && isPending && <div>Dealing....</div>}\n      {/* {console.log(\"bida\", stage, hands)} */}\n      {stage === \"Bid\" && hands && roundOrder && (\n        <div>\n          <Hand deckUrl={deckUrl} player={player} stage={stage} />\n          <Bidding\n            deckUrl={deckUrl}\n            bidOrder={roundOrder}\n            sendBidData={setBidData}\n          />\n        </div>\n      )}\n      {stage === \"SuitSelect\" && (\n        <div>\n          <BidInfo bidData={bidData} />\n          <Hand deckUrl={deckUrl} player={player} stage={stage} />\n          <SelectSuit\n            deckUrl={deckUrl}\n            bidData={bidData}\n            sendTrumpSuit={setTrumpSuit}\n          />\n        </div>\n      )}\n      {stage === \"Discard\" && (\n        <div>\n          <BidInfo bidData={bidData} suit={trumpSuit} />\n          <Hand deckUrl={deckUrl} player={player} stage={stage} />\n          <Drawing\n            deckUrl={deckUrl}\n            roundOrder={roundOrder}\n            trumpSuit={trumpSuit}\n            sendDiscardData={setDiscardData}\n          />\n        </div>\n      )}\n      {stage === \"Play\" && bookNum === 1 && (\n        <div>\n          <BidInfo bidData={bidData} suit={trumpSuit} book={bookNum} />\n          <Hand deckUrl={deckUrl} player={player} stage={stage} />\n          <Play\n            deckUrl={deckUrl}\n            player={player}\n            order={roundOrder}\n            sendBookInfo={setBookInfo}\n            book={bookNum}\n            trumpSuit={trumpSuit}\n            bookInfo={log}\n          />\n        </div>\n      )}\n      {stage === \"Play\" && bookNum === 2 && (\n        <div>\n          <BidInfo bidData={bidData} suit={trumpSuit} book={bookNum} />\n          <Hand deckUrl={deckUrl} player={player} stage={stage} />\n          <Play\n            deckUrl={deckUrl}\n            player={player}\n            order={roundOrder}\n            sendBookInfo={setBookInfo}\n            book={bookNum}\n            trumpSuit={trumpSuit}\n            bookInfo={log}\n          />\n        </div>\n      )}\n      {stage === \"Play\" && bookNum === 3 && (\n        <div>\n          <BidInfo bidData={bidData} suit={trumpSuit} book={bookNum} />\n          <Hand deckUrl={deckUrl} player={player} stage={stage} />\n          <Play\n            deckUrl={deckUrl}\n            player={player}\n            order={roundOrder}\n            sendBookInfo={setBookInfo}\n            book={bookNum}\n            trumpSuit={trumpSuit}\n            bookInfo={log}\n          />\n        </div>\n      )}\n      {stage === \"Play\" && bookNum === 4 && (\n        <div>\n          <BidInfo bidData={bidData} suit={trumpSuit} book={bookNum} />\n          <Hand deckUrl={deckUrl} player={player} stage={stage} />\n          <Play\n            deckUrl={deckUrl}\n            player={player}\n            order={roundOrder}\n            sendBookInfo={setBookInfo}\n            book={bookNum}\n            trumpSuit={trumpSuit}\n            bookInfo={log}\n          />\n        </div>\n      )}\n\n      {stage === \"Play\" && bookNum === 5 && (\n        <div>\n          <BidInfo bidData={bidData} suit={trumpSuit} book={bookNum} />\n          <Hand deckUrl={deckUrl} player={player} stage={stage} />\n          <Play\n            deckUrl={deckUrl}\n            player={player}\n            order={roundOrder}\n            sendBookInfo={setBookInfo}\n            book={bookNum}\n            trumpSuit={trumpSuit}\n            bookInfo={log}\n          />\n        </div>\n      )}\n\n      {stage === \"Winner\" && (\n        <div>\n          <BidInfo bidData={bidData} suit={trumpSuit} book={bookNum} />\n          <div>Round Over! </div>\n          <div>Team 1: {team1BookCount}</div>\n          <div>Team 2: {team2BookCount}</div>\n          <button\n            onClick={() => {\n              sendRoundScore([team1BookCount, team2BookCount]);\n              setStage(\"Over\");\n            }}\n          >\n            Next Round\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Round;\n","import './footer.css';\n\nconst Footer = () => {\n    return ( <div className=\"footer\">\n        <div><a href=\"https://github.com/dsull29/45s\" target=\"new\">GitHub Project Page</a></div>\n\n        <div><a href=\"https://github.com/dsull29/45s/issues\" target=\"new\">Report a bug</a></div>\n    </div> );\n}\n \nexport default Footer;","import { useState } from \"react\";\nimport Score from \"./Score/Score\";\nimport Round from \"./Round\";\nimport useFetch from \"./useFetch\";\nimport { getFreshDeck } from \"./deckFuncs\";\nimport Footer from \"./Footer/Footer\";\n\nconst Game = () => {\n  const { data, isPending, error } = useFetch(\n    \"https://deckofcardsapi.com/api/deck/new/\"\n  );\n\n  const [round, setRound] = useState(1);\n  const [gameScore, setGameScore] = useState([0, 0]);\n  const [roundScore, setRoundScore] = useState(null);\n  const [scoreLog, setScoreLog] = useState([]);\n  const [gameOver, setGameOver] = useState(\"\");\n\n  let deckUrl = null;\n  if (data) {\n    deckUrl = \"https://deckofcardsapi.com/api/deck/\" + data.deck_id;\n  }\n\n  let tempScore = [];\n\n  if (roundScore) {\n    scoreLog[round] = roundScore;\n    tempScore[0] = gameScore[0] + roundScore[0];\n    tempScore[1] = gameScore[1] + roundScore[1];\n    console.log(\"scoring\", tempScore, roundScore, round);\n    setScoreLog(scoreLog);\n    setGameScore(tempScore);\n    if (tempScore[0] > 30) {\n      setGameOver(\"Team 1 Wins\");\n    }\n    if (tempScore[1] > 30) {\n      setGameOver(\"Team 2 Wins\");\n    }\n    setRoundScore(null);\n    setRound(round + 1);\n  }\n\n  return (\n    <div>\n      {isPending && <div>Setting up...</div>}\n      {error && <div>{error}</div>}\n      {deckUrl && !gameOver && (\n        <div className=\"game\">\n          <Score round={round} gameScore={gameScore} />\n          <Round\n            deckUrl={deckUrl}\n            round={round}\n            sendRoundScore={setRoundScore}\n            newRound={true}\n          />\n          <Footer />\n        </div>\n      )}\n      {gameOver && (\n        <div>\n          <h1>{gameOver}</h1>\n          <h3>Team 1: {gameScore[0]}</h3>\n          <h3>Team 2: {gameScore[1]}</h3>\n          <button>Play Again</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Game;\n","import { useState } from 'react';\nimport './App.css';\nimport Game from './Game';\n\nfunction App() {\n  const [inGame, setInGame] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <h2>45s</h2>\n      { inGame===false && <button onClick={() => setInGame(true)}>Start Game</button>}\n      { inGame && <Game />}\n       \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}