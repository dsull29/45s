{"version":3,"sources":["Header/Header.js","Score/Score.js","deckFuncs.js","cardValues.js","Bidding/bidfuncs.js","useFetch.js","Bidding/MakeBid.js","Card.js","Hand.js","Bidding/SelectSuit.js","Bidding/ViewBid.js","Drawing/ViewDraw.js","Play/PlayCard.js","ViewTable.js","Bidding/Bidding.js","scripts.js","Play/PlayerTurn.js","Play/Turn.js","Bidding/BidInfo.js","Play/Play.js","Drawing/Draw.js","Drawing/DrawCpu.js","Drawing/Drawing.js","Play/PlayWinner.js","Round.js","Game.js","Footer/Footer.js","App.js","index.js"],"names":["Header","className","Score","round","gameScore","style","textAlign","deckUrl","setIsPending","setRoundOrder","a","order","getRoundOrder","fetch","drawresponse","json","drawData","hands","hash","cards","console","log","toString","code","val","getNewCards","discardCodes","player","sendDiscardData","sendDiscardPending","discardResponse","length","redrawResponse","redrawData","i","push","assResponse","trumpValues","leadValues","offSuitValues","heartTrumpOrder","diamondTrumpOrder","spadesTrumpOrder","clubsTrumpOrder","heartOffSuitOrder","diamondOffSuitOrder","spadesOffSuitOrder","clubsOffSuitOrder","evaluateHand","heartHandVal","diamondHandVal","spadeHandVal","clubHandVal","card","charAt","getTrumpValue","getCardValue","trump","lead","cardSuit","trumpSuit","leadSuit","cardValue","indexOf","getLeadValue","getOffSuitValue","checkBid","bid","bidData","highBid","highBidder","playerBid","bidder","useFetch","url","useState","data","setData","isPending","error","setError","useEffect","abortCont","AbortController","signal","then","res","ok","Error","catch","err","name","message","abort","MakeBid","humanBidder","dealer","sendBid","setPlayerBid","isDealer","piles","cardCodes","handValues","bidOptions","bestHandVal","sort","b","getBid","checkBidOptions","bidChoice","onSubmit","value","onChange","e","target","Card","src","image","alt","width","Hand","SelectSuit","sendTrumpSuit","setTrumpSuit","orgHandValues","JSON","stringify","parse","getBestSuit","preventDefault","ViewBid","ViewDraw","draw","drawer","PlayCard","ViewTable","stage","players","actions","Bidding","bidOrder","sendBidData","bid1","setBid1","bid2","setBid2","bid3","setBid3","bid4","setBid4","turn","setTurn","setBidData","bids","getPlayerBid","num","getActions","getWorstCard","worstCard","worstCardVal","curCardVal","getBestCard","bestCard","bestCardVal","playerCard","sendPlayerCard","PlayerTurn","sendPlayCard","position","setPlayerCard","playCardNow","Turn","cardPlay","setCardPlay","taco","playCard","BidInfo","Play","sendBookInfo","book","bookInfo","playCard1","setPlayCard1","playCard2","setPlayCard2","playCard3","setPlayCard3","playCard4","setPlayCard4","setLeadSuit","playedCards","bookNum","bookOrder","mung","roundOrder","lastWinner","lastBook","winningPlayer","getBookOrder","setTimeout","winner","curBestValue","highCard","whoseTurn","checkPlayerPosition","getPlayerCard","Draw","sendDraw","discard0","setDiscard0","discard1","setDiscard1","discard2","setDiscard2","discard3","setDiscard3","discard4","setDiscard4","discards","type","checked","DrawCpu","discardCount","setDiscardCount","discardPending","setDiscardPending","Drawing","draw1","setDraw1","draw2","setDraw2","draw3","setDraw3","draw4","setDraw4","whoseRedraw","draws","getPlayerDraw","PlayWinner","team1","team2","sendRoundScore","sendStage","classname","onClick","Round","newRound","setStage","discardData","setDiscardData","setBookInfo","setBookNum","setLog","dealHands","team1BookCount","team2BookCount","highCardWinner","x","Game","setRound","setGameScore","roundScore","setRoundScore","scoreLog","setScoreLog","gameOver","setGameOver","deck_id","tempScore","Footer","href","App","inGame","setInGame","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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ACA,KACA,KACA,MAEIC,EAAmB,CACvB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEIC,EAAkB,CACtB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAGIC,EAAoB,CACxB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEIC,EAAsB,CAC1B,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEIC,EAAqB,CACzB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAEIC,EAAoB,CACxB,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MAGK,SAASC,EAAa7B,GAC3B,IAAI8B,EAAcC,EAAgBC,EAAcC,EAChDH,EAAeC,EAAiBC,EAAeC,EAAc,EAE7D,IAAK,IAAIlB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC1B,IAAImB,EAAOlC,EAAMe,GACjB,OAAQmB,EAAKC,OAAO,IAClB,IAAK,IACHL,GAAgBM,EAAcF,EAAM,KACpC,MACF,IAAK,IACHH,GAAkBK,EAAcF,EAAM,KACtC,MACF,IAAK,IACHF,GAAgBI,EAAcF,EAAM,KACpC,MACF,IAAK,IACHD,GAAeG,EAAcF,EAAM,KACnC,MACF,QACEjC,QAAQC,IAAI,qBAIlB,MAAO,CAAC4B,EAAcC,EAAgBC,EAAcC,GAG/C,SAASI,EAAaH,EAAMI,EAAOC,GACxC,IAAIC,EAAWN,EAAKC,OAAO,GACvBM,EAAYH,EAAMH,OAAO,GACzBO,EAAWH,EACXI,EAAY,GAQhB,OANEA,EADEH,IAAaC,GAAsB,OAATP,EAChBE,EAAcF,EAAMO,GACvBD,IAAaE,EAuB1B,SAAsBR,EAAMK,GAC1B,OAAQA,GACN,IAAK,IACH,OAAOpB,EAAWM,EAAkBmB,QAAQV,IAC9C,IAAK,IACH,OAAOf,EAAWO,EAAoBkB,QAAQV,IAChD,IAAK,IACH,OAAOf,EAA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","file":"static/js/main.93e90011.chunk.js","sourcesContent":["import \"./header.css\";\nconst Header = () => {\n  return (\n    <div className=\"header\">\n      <div className=\"maintitle\">45</div>\n      <div className=\"tagline\">Straight out the UMD commuter cafe</div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./score.css\";\n\nconst Score = ({ round, gameScore }) => {\n  return (\n    <div className=\"scoreBoard\" style={{ textAlign: \"left\" }}>\n          <div className=\"scoreBoardItem\" data-testid=\"team1Score\">Team 1: {gameScore[0]}</div>\n          <div className=\"scoreBoardItem\" data-testid=\"round\">Round: {round}</div>\n          <div className=\"scoreBoardItem\" data-testid=\"team2Score\">Team 2: {gameScore[1]}</div>\n    </div>\n  );\n};\n\nexport default Score;\n","export async function dealHands(deckUrl, round, setIsPending, setRoundOrder) {\n  const order = getRoundOrder(round);\n  await fetch(deckUrl + \"/shuffle/\");\n  const drawresponse = await fetch(deckUrl + \"/draw/?count=20\");\n  const drawData = await drawresponse.json();\n  let hands = hash(drawData.cards);\n  console.log(\"handCheck\", hands, drawData);\n  await fetch(\n    deckUrl + \"/pile/\" + order[0] + \"/add/?cards=\" + hands[0].toString()\n  );\n  await fetch(\n    deckUrl + \"/pile/\" + order[1] + \"/add/?cards=\" + hands[1].toString()\n  );\n  await fetch(\n    deckUrl + \"/pile/\" + order[2] + \"/add/?cards=\" + hands[2].toString()\n  );\n  const done = await fetch(\n    deckUrl + \"/pile/\" + order[3] + \"/add/?cards=\" + hands[3].toString()\n  );\n  if (done) {\n    setRoundOrder(order);\n    setIsPending(false);\n  }\n}\n\nfunction hash(cards) {\n  const hand1 = [\n    cards[0].code,\n    cards[1].code,\n    cards[2].code,\n    cards[12].code,\n    cards[13].code,\n  ];\n  const hand2 = [\n    cards[3].code,\n    cards[4].code,\n    cards[5].code,\n    cards[14].code,\n    cards[15].code,\n  ];\n  const hand3 = [\n    cards[6].code,\n    cards[7].code,\n    cards[8].code,\n    cards[16].code,\n    cards[17].code,\n  ];\n  const hand4 = [\n    cards[9].code,\n    cards[10].code,\n    cards[11].code,\n    cards[18].code,\n    cards[19].code,\n  ];\n  return [hand1, hand2, hand3, hand4];\n}\n\nexport function getRoundOrder(round) {\n  let val = (round - 1) % 4;\n  let order;\n  if (val === 0) {\n    order = [\"Mario\", \"Partner\", \"Luigi\", \"You\"];\n  } else if (val === 1) {\n    order = [\"Partner\", \"Luigi\", \"You\", \"Mario\"];\n  } else if (val === 2) {\n    order = [\"Luigi\", \"You\", \"Mario\", \"Partner\"];\n  } else if (val === 3) {\n    order = [\"You\", \"Mario\", \"Partner\", \"Luigi\"];\n  }\n  return order;\n} // module.exports = { dealHand, asyncCall};\n\n/** Get's the order relative to the last player to win a hand\n ** The player who won the last book goes first\n * @param  {String} lastWinner name of the last player to win a book\n */\nexport function getBookOrder(mung, roundOrder) {\n  let order = [];\n  let lastBook = mung[mung.length - 1];\n  let lastWinner;\n  if (lastBook) {\n    lastWinner = lastBook.winningPlayer;\n  }\n  if (lastWinner === \"Mario\") {\n    order = [\"Mario\", \"Partner\", \"Luigi\", \"You\"];\n  } else if (lastWinner === \"Partner\") {\n    order = [\"Partner\", \"Luigi\", \"You\", \"Mario\"];\n  } else if (lastWinner === \"Luigi\") {\n    order = [\"Luigi\", \"You\", \"Mario\", \"Partner\"];\n  } else if (lastWinner === \"You\") {\n    order = [\"You\", \"Mario\", \"Partner\", \"Luigi\"];\n  } else {\n    order = roundOrder;\n  }\n  return order;\n}\n\n// export async function dealHands(deckUrl,round,setIsPending,setHands,setRoundOrder) {\n//   const order = getRoundOrder(round);\n//   await fetch(deckUrl + \"/shuffle/\");\n//   const drawresponse = await fetch(deckUrl + \"/draw/?count=20\");\n//   const drawData = await drawresponse.json();\n//   let hands = hash(drawData.cards);\n//   console.log(\"handCheck\",hands,drawData)\n//   await fetch(deckUrl + \"/pile/\" + order[0] + \"/add/?cards=\" + hands[0].toString())\n//   await fetch(deckUrl + \"/pile/\" + order[1] + \"/add/?cards=\" + hands[1].toString())\n//   await fetch(deckUrl + \"/pile/\" + order[2] + \"/add/?cards=\" + hands[2].toString())\n//   const done = await fetch(deckUrl + \"/pile/\" + order[3] + \"/add/?cards=\" + hands[3].toString())\n//   if (done) {\n//     setRoundOrder(order)\n//     setHands(hands)\n//     setIsPending(false)\n//   }\n// }\n\n/** Handles discarding, drawing new cards, and assigning that number of cards to the player\n * @param  {String} deckUrl URL of the deck being used for this round\n * @param  {Array} discardCodes Card codes to discard\n * @param  {String} player Player whose hand is being worked\n * @param  {Function} sendDiscardData Callback function to 'Play' to signify the process is done\n */\nexport async function getNewCards(\n  deckUrl,\n  discardCodes,\n  player,\n  sendDiscardData,\n  sendDiscardPending\n) {\n  const discardResponse = await fetch(\n    deckUrl + \"/pile/discard/add/?cards=\" + discardCodes.toString()\n  );\n  await discardResponse.json();\n  //  const redrawCount = 5 - discardData.piles[player].remaining;\n  const redrawResponse = await fetch(\n    deckUrl + \"/draw/?count=\" + discardCodes.length\n  );\n  const redrawData = await redrawResponse.json();\n  console.log(\"redraw\", player, discardCodes, redrawData.cards);\n  let cards = [];\n  if (redrawData.cards) {\n    for (let i = 0; i < redrawData.cards.length; i++)\n      cards.push(redrawData.cards[i].code);\n  }\n  const assResponse = await fetch(\n    deckUrl + \"/pile/\" + player + \"/add/?cards=\" + cards.toString()\n  );\n  const done = await assResponse.json();\n  if (done) {\n    sendDiscardData(discardCodes.length);\n    sendDiscardPending(false);\n  }\n}\n","const trumpValues = [\n  -35, -21, -18, -13, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1,\n];\nconst leadValues = [13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0];\nconst offSuitValues = [27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14];\n\nconst heartTrumpOrder = [\n  \"5H\",\n  \"JH\",\n  \"AH\",\n  \"KH\",\n  \"QH\",\n  \"0H\",\n  \"9H\",\n  \"8H\",\n  \"7H\",\n  \"6H\",\n  \"4H\",\n  \"3H\",\n  \"2H\",\n];\nconst diamondTrumpOrder = [\n  \"5D\",\n  \"JD\",\n  \"AH\",\n  \"AD\",\n  \"KD\",\n  \"QD\",\n  \"0D\",\n  \"9D\",\n  \"8D\",\n  \"7D\",\n  \"6D\",\n  \"4D\",\n  \"3D\",\n  \"2D\",\n];\nconst spadesTrumpOrder = [\n  \"5S\",\n  \"JS\",\n  \"AH\",\n  \"AS\",\n  \"KS\",\n  \"QS\",\n  \"2S\",\n  \"3S\",\n  \"4S\",\n  \"6S\",\n  \"7S\",\n  \"8S\",\n  \"9S\",\n  \"0S\",\n];\nconst clubsTrumpOrder = [\n  \"5C\",\n  \"JC\",\n  \"AH\",\n  \"AC\",\n  \"KC\",\n  \"QC\",\n  \"2C\",\n  \"3C\",\n  \"4C\",\n  \"6C\",\n  \"7C\",\n  \"8C\",\n  \"9C\",\n  \"0C\",\n];\n\nconst heartOffSuitOrder = [\n  \"2H\",\n  \"3H\",\n  \"4H\",\n  \"5H\",\n  \"6H\",\n  \"7H\",\n  \"8H\",\n  \"9H\",\n  \"0H\",\n  \"JH\",\n  \"QH\",\n  \"KH\",\n];\nconst diamondOffSuitOrder = [\n  \"AD\",\n  \"2D\",\n  \"3D\",\n  \"4D\",\n  \"5D\",\n  \"6D\",\n  \"7D\",\n  \"8D\",\n  \"9D\",\n  \"0D\",\n  \"JD\",\n  \"QD\",\n  \"KD\",\n];\nconst spadesOffSuitOrder = [\n  \"0S\",\n  \"9S\",\n  \"8S\",\n  \"7S\",\n  \"6S\",\n  \"5S\",\n  \"4S\",\n  \"3S\",\n  \"2S\",\n  \"AS\",\n  \"JS\",\n  \"QS\",\n  \"KS\",\n];\nconst clubsOffSuitOrder = [\n  \"0C\",\n  \"9C\",\n  \"8C\",\n  \"7C\",\n  \"6C\",\n  \"5C\",\n  \"4C\",\n  \"3C\",\n  \"2C\",\n  \"AC\",\n  \"JC\",\n  \"QC\",\n  \"KC\",\n];\n\nexport function evaluateHand(cards) {\n  let heartHandVal, diamondHandVal, spadeHandVal, clubHandVal;\n  heartHandVal = diamondHandVal = spadeHandVal = clubHandVal = 0;\n\n  for (let i = 0; i < 5; i++) {\n    var card = cards[i];\n    switch (card.charAt(1)) {\n      case \"H\":\n        heartHandVal += getTrumpValue(card, \"H\");\n        break;\n      case \"D\":\n        diamondHandVal += getTrumpValue(card, \"D\");\n        break;\n      case \"S\":\n        spadeHandVal += getTrumpValue(card, \"S\");\n        break;\n      case \"C\":\n        clubHandVal += getTrumpValue(card, \"C\");\n        break;\n      default:\n        console.log(\"default returned\");\n    }\n  }\n\n  return [heartHandVal, diamondHandVal, spadeHandVal, clubHandVal];\n}\n\nexport function getCardValue(card, trump, lead) {\n  let cardSuit = card.charAt(1);\n  let trumpSuit = trump.charAt(0);\n  let leadSuit = lead;\n  let cardValue = \"\";\n  if (cardSuit === trumpSuit || card === \"AH\") {\n    cardValue = getTrumpValue(card, trumpSuit);\n  } else if (cardSuit === leadSuit) {\n    cardValue = getLeadValue(card, lead);\n  } else {\n    cardValue = getOffSuitValue(card, cardSuit);\n  }\n  return cardValue;\n}\n\nfunction getTrumpValue(card, trump) {\n  switch (trump) {\n    case \"H\":\n      return trumpValues[heartTrumpOrder.indexOf(card)];\n    case \"D\":\n      return trumpValues[diamondTrumpOrder.indexOf(card)];\n    case \"S\":\n      return trumpValues[spadesTrumpOrder.indexOf(card)];\n    case \"C\":\n      return trumpValues[clubsTrumpOrder.indexOf(card)];\n    default:\n      return \"\";\n  }\n}\n\nfunction getLeadValue(card, lead) {\n  switch (lead) {\n    case \"H\":\n      return leadValues[heartOffSuitOrder.indexOf(card)];\n    case \"D\":\n      return leadValues[diamondOffSuitOrder.indexOf(card)];\n    case \"S\":\n      return leadValues[spadesOffSuitOrder.indexOf(card)];\n    case \"C\":\n      return leadValues[clubsOffSuitOrder.indexOf(card)];\n    default:\n      return \"\";\n  }\n}\nfunction getOffSuitValue(card, cardSuit) {\n  switch (cardSuit) {\n    case \"H\":\n      return offSuitValues[heartOffSuitOrder.indexOf(card)];\n    case \"D\":\n      return offSuitValues[diamondOffSuitOrder.indexOf(card)];\n    case \"S\":\n      return offSuitValues[spadesOffSuitOrder.indexOf(card)];\n    case \"C\":\n      return offSuitValues[clubsOffSuitOrder.indexOf(card)];\n    default:\n      return \"\";\n  }\n}\n","export const checkBid = (bid, bidData) => {\n  let highBid, highBidder;\n  if (bid.playerBid === \"Pass\") {\n    // return {null, null};\n  } else if (bid.playerBid === \"Take\") {\n    highBid = bidData.highBid;\n    highBidder = bid.bidder;\n  } else if (bid.playerBid) {\n    highBid = bid.playerBid;\n    highBidder = bid.bidder;\n  }\n\n  return { highBid, highBidder };\n};\n\n/** Gets the players bid based on an evaluation of their hand and prev bids this round\n * @param  {Array} handValues array of hand evaluations relative to suits\n * @param  {Object} bidData {highBid: highest bid made so far\n *                           highBidder: player who made the highest bid}\n * @returns player's bid\n */\nexport function getBid(handValues, bidData, isDealer) {\n  const bidOptions = [\"Pass\", \"15\", \"20\", \"25\", \"30\", \"30 No Draw\"];\n  var bestHandVal = handValues.sort((a, b) => {\n    return a - b;\n  })[0];\n  var playerBid = null;\n\n  // the lower the hand value the better, which makes the comparators the floor\n  // TODO this bid thresholds are abirtrary. try to get a better handle on what\n  //   these look like\n  // TODO needs an exception where if the player is dealer they can take the bid\n\n  if (bestHandVal < 0 - 80) {\n    playerBid = \"30\";\n  } else if (bestHandVal < 0 - 60) {\n    playerBid = \"25\";\n  } else if (bestHandVal < 0 - 45) {\n    playerBid = \"20\";\n  } else if (bestHandVal < 0 - 34) {\n    playerBid = \"15\";\n  }\n\n  if (\n    playerBid &&\n    bidOptions.indexOf(playerBid) <= bidOptions.indexOf(bidData.highBid)\n  ) {\n    if (isDealer) {\n      playerBid = \"Take\";\n    } else {\n      playerBid = \"Pass\";\n    }\n  }\n\n  return playerBid;\n}\n\nexport function getBestSuit(handValues) {\n  let suit;\n  const orgHandValues = JSON.stringify(handValues);\n  const bestHandVal = handValues.sort(function (a, b) {\n    return a - b;\n  })[0];\n\n  const suits = [\"Hearts\", \"Diamonds\", \"Spades\", \"Clubs\"];\n  const suitNum = JSON.parse(orgHandValues).indexOf(bestHandVal);\n  suit = suits[suitNum];\n  return suit;\n}\n","import { useState, useEffect } from 'react';\n\nconst useFetch = (url) => {\n    const [data, setData] = useState(null);\n    const [isPending, setIsPending] = useState(true);\n    const [error, setError] = useState(null);\n    useEffect(() => {\n        const abortCont = new AbortController();\n        fetch(url, { signal: abortCont.signal })\n            .then(res => {\n                if (!res.ok) {\n                    throw Error('Could not fetch data for that resource');\n                }\n                return res.json();\n            })\n            .then(data => {\n                setData(data);\n                setIsPending(false);\n                setError(null);\n            })\n            .catch(err => {\n                if (err.name === \"AbortError\") {\n                    console.log('fetch aborted')\n                } else {\n                    setIsPending(false);\n                    setError(err.message);\n                }\n            })\n        return () => abortCont.abort();\n    }, [url]);\n    return { data, isPending, error }\n}\n\nexport default useFetch;","import { useState } from \"react\";\nimport { evaluateHand } from \"../cardValues\";\nimport useFetch from \"../useFetch\";\nimport { getBid } from \"./bidfuncs\";\n\nconst MakeBid = ({ deckUrl, bidder, bidData, dealer, sendBid }) => {\n  const [playerBid, setPlayerBid] = useState(\"Pass\");\n  const player = \"You\";\n  const url = deckUrl + \"/pile/\" + bidder + \"/list/\";\n  const { data, error, isPending } = useFetch(url);\n\n  const isDealer = bidder === dealer;\n\n  let highBid = bidData.highBid;\n  let humanBidder;\n\n  if (data) {\n    if (bidder === player) {\n      humanBidder = true;\n    } else {\n      humanBidder = false;\n      let cards = data.piles[bidder].cards;\n      let card;\n      let cardCodes = [];\n      for (card of cards) {\n        cardCodes.push(card.code);\n      }\n      let handValues = evaluateHand(cardCodes);\n      let playerBid = getBid(handValues, bidData,isDealer);\n      let bidYooo = { bidder, playerBid };\n      sendBid(bidYooo);\n    }\n  }\n\n  const handleSubmit = () => {\n    sendBid({ bidder: bidder, playerBid });\n  };\n\n  function checkBidOptions(bidChoice, highBid) {\n    let bidOptions = [\"Pass\", \"15\", \"20\", \"25\", \"30\", \"30No\"];\n    let highBidNumber = bidOptions.indexOf(highBid);\n    let bidNumber = bidOptions.indexOf(bidChoice);\n    return highBidNumber < bidNumber;\n  }\n\n  return (\n    <div className=\"playeraction\">\n      {error && <div>{error}</div>}\n      {isPending && <div>Thinking...</div>}\n      {humanBidder && (\n        <div>\n          <form onSubmit={handleSubmit}>\n            <select\n              value={playerBid}\n              onChange={(e) => setPlayerBid(e.target.value)}\n            >\n              {isDealer && highBid && <option value=\"Take\">Take</option>}\n              {isDealer && highBid && (\n                <option value=\"Pass\">Let Bidder Have It</option>\n              )}\n              {!isDealer && <option value=\"Pass\">Pass</option>}\n              {checkBidOptions(\"15\", highBid) && <option value=\"15\">15</option>}\n              {checkBidOptions(\"20\", highBid) && <option value=\"20\">20</option>}\n              {checkBidOptions(\"25\", highBid) && <option value=\"25\">25</option>}\n              {checkBidOptions(\"30\", highBid) && <option value=\"30\">30</option>}\n              {checkBidOptions(\"30No\", highBid) && (\n                <option value=\"30No\">30 No Draw</option>\n              )}\n            </select>\n            <button>Place Bid</button>\n          </form>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MakeBid;\n","const Card = ({ card }) => {\n  return (\n    <div className=\"cardslot\">\n      {card && <img src={card.image} alt=\"Card\" width=\"100%\" />}\n    </div>\n  );\n};\n\nexport default Card;\n","import useFetch from \"./useFetch\";\nimport Card from \"./Card\";\n\nconst Hand = ({ deckUrl, player, round }) => {\n  const { data, isPending, error } = useFetch(\n    deckUrl + \"/pile/\" + player + \"/list/\"\n  );\n  var cards = [];\n  if (data && data.piles[player] && data.piles[player].cards) {\n    cards = data.piles[player].cards;\n  }\n\n  return (\n    <div>\n      {error && <div>{error}</div>}\n      {isPending && <div>Loading...</div>}\n      {data && cards && (\n        <div className=\"handwindow\">\n          <div className=\"hand\">\n            <Card card={cards[0]} round={round} />\n            <Card card={cards[1]} round={round} />\n            <Card card={cards[2]} round={round} />\n            <Card card={cards[3]} round={round} />\n            <Card card={cards[4]} round={round} />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Hand;\n","import { useState } from \"react\";\nimport { evaluateHand } from \"../cardValues\";\nimport useFetch from \"../useFetch\";\nimport { getBestSuit } from \"./bidfuncs\";\nimport \"../Play/play.css\";\n\nconst SelectSuit = ({ deckUrl, bidData, sendTrumpSuit }) => {\n  const [trumpSuit, setTrumpSuit] = useState(\"Hearts\");\n  const bidder = bidData.highBidder;\n  const url = deckUrl + \"/pile/\" + bidder + \"/list/\";\n  const { data, error, isPending } = useFetch(url);\n\n  const player = \"You\";\n  console.log(\"bid\", bidder, bidData);\n\n  if (data) {\n    if (bidder !== player) {\n      let cards = data.piles[bidder].cards;\n      let card;\n      let cardCodes = [];\n      for (card of cards) {\n        cardCodes.push(card.code);\n      }\n      let handValues = evaluateHand(cardCodes);\n      let trumpSuit = getBestSuit(handValues);\n      sendTrumpSuit(trumpSuit);\n    }\n  }\n\n  const handleSuitSubmit = (e) => {\n    e.preventDefault();\n    sendTrumpSuit(trumpSuit);\n  };\n\n  return (\n    <div>\n      {error && <div>{error}</div>}\n      {isPending && <div>Thinking...</div>}\n      {bidData.highBidder === \"You\" && (\n        <div className=\"playeraction\">\n          <form onSubmit={handleSuitSubmit}>\n            <select\n              value={trumpSuit}\n              onChange={(e) => setTrumpSuit(e.target.value)}\n            >\n              <option value=\"Hearts\">Hearts</option>\n              <option value=\"Diamonds\">Diamonds</option>\n              <option value=\"Spades\">Spades</option>\n              <option value=\"Clubs\">Clubs</option>\n            </select>\n            <button>Select Suit</button>\n          </form>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SelectSuit;\n","const ViewBid = ({ bid, bidder }) => {\n  console.log(\"ViewBid\", bid);\n\n  return (\n    <div className=\"playermessagebox\">\n      {bid && (\n        <div>\n          <div className=\"playermessageboxheader\">{bid.bidder}</div>\n          <div className=\"playermessageboxtext\">{bid.playerBid || \"Pass\"}</div>\n        </div>\n      )}\n      {!bid && bidder !== \"You\" && (\n        <div>\n          <div className=\"playermessageboxheader\">{bidder}</div>\n          <div className=\"playermessageboxtext\">&nbsp;</div>\n        </div>\n      )}\n      {!bid && bidder === \"You\" && (\n        <div>\n          <div className=\"playermessageboxheader\">You</div>\n          <div className=\"playermessageboxtext\">We're waiting!</div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ViewBid;\n","const ViewDraw = ({ draw, drawer }) => {\n  return (\n    <div className=\"playermessagebox\">\n      {draw && (\n        <div>\n          <div className=\"playermessageboxheader\">{drawer}</div>\n          <div className=\"playermessageboxtext\">Draws {draw}</div>\n        </div>\n      )}\n      {!draw && (\n        <div>\n          <div className=\"playermessageboxheader\">{drawer}</div>\n          <div className=\"playermessageboxtext\">&nbsp;</div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ViewDraw;\n","const PlayCard = ({ card, player }) => {\n  return (\n    <div className=\"playermessagebox\">\n        {card && (\n          <div>\n            <div className=\"playermessageboxheader\">{player}</div>\n            <div className=\"playerplayedcard\">\n            <img src={card.image} alt=\"Card\" width=\"93px\" /></div>\n            </div>)}\n      </div>\n  );\n};\n\nexport default PlayCard;\n","import ViewBid from \"./Bidding/ViewBid\"\nimport ViewDraw from \"./Drawing/ViewDraw\"\nimport PlayCard from \"./Play/PlayCard\";\nimport \"./viewTable.css\";\n\nconst ViewTable = ({ stage, players, actions, bidData }) => {\n  // console.log(stage, players, actions);\n  return (\n    <div className=\"table\">\n      <div className=\"tablerowtop\">\n        <div className=\"tableplayerbox player3\">\n          <div className=\"playerslot\">\n            {\n              (stage === \"Bidding\" && (\n                <ViewBid bid={actions[2]} bidder={players[2]} />\n              ))\n            }\n            {\n              (stage === \"Drawing\" && (\n                <ViewDraw draw={actions[2]} drawer={players[2]} />\n              ))\n            }\n\n            {\n              (stage === \"Playing\" && (\n                <PlayCard card={actions[2]} player={players[2]}  />\n              ))\n            }\n\n          </div>\n        </div>\n      </div>\n\n      <div className=\"tablerowmid\">\n        <div className=\"tableplayerbox player2\">\n          <div className=\"playerslot\">\n            {\n              (stage === \"Bidding\" && (\n                <ViewBid bid={actions[1]} bidder={players[1]} />\n              ))\n            }\n            {\n              (stage === \"Drawing\" && (\n                <ViewDraw draw={actions[1]} drawer={players[1]} />\n              ))\n            }\n            {\n              (stage === \"Playing\" && (\n                <PlayCard card={actions[1]} player={players[1]}  />\n              ))\n            }\n\n          </div>\n        </div>\n        <div className=\"tableplayerbox player4\">\n          <div className=\"playerslot\">\n            {\n              (stage === \"Bidding\" && (\n                <ViewBid bid={actions[3]} bidder={players[3]} />\n              ))\n            }\n            {\n              (stage === \"Drawing\" && (\n                <ViewDraw draw={actions[3]} drawer={players[3]} />\n              ))\n            }\n            {\n              (stage === \"Playing\" && (\n                <PlayCard card={actions[3]} player={players[3]} />\n              ))\n            }\n\n          </div>\n        </div>\n      </div>\n\n      <div className=\"tablerowbottom\">\n        <div className=\"tableplayerbox player1\">\n          <div className=\"playerslot\">\n            {\n              (stage === \"Bidding\" && (\n                <ViewBid bid={actions[0]} bidder={players[0]} />\n              ))\n            }\n            {\n              (stage === \"Drawing\" && (\n                <ViewDraw draw={actions[0]} drawer={players[0]} />\n              ))\n            }\n            {\n              (stage === \"Playing\" && (\n                <PlayCard card={actions[0]} />\n              ))\n            }\n\n          </div>\n        </div>\n      </div>\n      <div className=\"tablerowlog\">\n        <div className=\"tablelogbox\">\n          <div className=\"logslot\"></div>\n        </div>\n      </div>\n\n\n\n    </div>\n  );\n};\n\nexport default ViewTable;\n","import { useEffect, useState } from \"react\";\nimport { checkBid } from \"./bidfuncs\";\nimport MakeBid from \"./MakeBid\";\nimport \"./bidding.css\";\nimport Hand from \"../Hand\";\nimport SelectSuit from \"./SelectSuit\";\nimport ViewTable from \"../ViewTable\";\n\nconst Bidding = ({ deckUrl, bidOrder, sendBidData }) => {\n  const [bid1, setBid1] = useState(\"\");\n  const [bid2, setBid2] = useState(\"\");\n  const [bid3, setBid3] = useState(\"\");\n  const [bid4, setBid4] = useState(\"\");\n  const [trumpSuit, setTrumpSuit] = useState(\"\");\n  const [turn, setTurn] = useState(1);\n  const [bidData, setBidData] = useState({\n    highBid: null,\n    highBidder: null,\n    trumpSuit: null,\n  });\n\n  useEffect(() => {\n    // setBid1(\"\");\n    // setBid2(\"\");\n    // setBid3(\"\");\n    // setBid4(\"\");\n    setBidData({ highBid: null, highBidder: null, trumpSuit: null });\n  }, [bidOrder]);\n\n  // need to call this one bidder at a time in it's own object.\n  // probably want a nested structure like 'Play' where each\n  // CPU player has their own component\n  // and then the human player has their component\n  // *** consider rolling SelectSuit under that umbrella as well.\n\n  let bidder = bidOrder[turn - 1];\n  // const bidOptions = [\"Pass\", \"15\", \"20\", \"25\", \"30\", \"30 No Draw\"];\n  const dealer = bidOrder[3];\n\n  switch (turn) {\n    case 1: \n      if (bid1) {\n        let { highBid, highBidder } = checkBid(bid1, bidData);\n        if (highBid) {\n          setBidData({ highBid, highBidder, trumpSuit });\n        }\n        setTurn(2);\n      }\n      break;\n    \n    case 2: \n      if (bid2) {\n        let { highBid, highBidder } = checkBid(bid2, bidData);\n        if (highBid) {\n          setBidData({ highBid, highBidder, trumpSuit });\n        }\n        setTurn(3);\n      }\n      break;\n    \n    case 3: \n      if (bid3) {\n        let { highBid, highBidder } = checkBid(bid3, bidData);\n        if (highBid) {\n          setBidData({ highBid, highBidder, trumpSuit });\n        }\n        setTurn(4);\n      }\n      break;\n    \n    case 4: \n      if (bid4) {\n        let { highBid, highBidder } = checkBid(bid4, bidData);\n        if (highBid) {\n          setBidData({ highBid, highBidder, trumpSuit });\n        } else if (!bidData.highBid) {\n          setBidData({ highBid: \"15\", highBidder: dealer, trumpSuit });\n        }\n        setTurn(5);\n      }\n      break;\n        case 5: \n      if (trumpSuit) {\n        let highBid = bidData.highBid;\n        let highBidder = bidData.highBidder;\n        setBidData({ highBid, highBidder, trumpSuit });\n        setTurn(6)};\n       break;\n    \n    case 6: \n      sendBidData(bidData);\n      break;\n    default: \n      console.log(\"bid turn default hit\")\n  }\n\n  const bids = [bid1, bid2, bid3, bid4];\n\n  function getPlayerBid(player, order) {\n    let num = order.indexOf(player);\n    // console.log(\"crash\", player, bids, num);\n    return bids[num];\n  }\n\n  const players = [\"You\", \"Mario\", \"Partner\", \"Luigi\"];\n  function getActions(bids, bidOrder) {\n    let actions = [];\n    for (let i = 0; i < players.length; i++) {\n      actions[i] = getPlayerBid(players[i], bidOrder);\n    }\n    return actions;\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"viewTableContainer\">\n        <ViewTable\n          stage=\"Bidding\"\n          players={players}\n          actions={getActions(bids, bidOrder)}\n          bidData={bidData}\n        />\n      </div>\n      <div className=\"playerWindowContainer\">\n        <div className=\"playerwindow\">\n          <Hand deckUrl={deckUrl} player={\"You\"} />\n          {turn === 1 && (\n            <MakeBid\n              deckUrl={deckUrl}\n              bidder={bidder}\n              bidData={bidData}\n              dealer={dealer}\n              sendBid={setBid1}\n            />\n          )}\n          {turn === 2 && (\n            <MakeBid\n              deckUrl={deckUrl}\n              bidder={bidder}\n              bidData={bidData}\n              dealer={dealer}\n              sendBid={setBid2}\n            />\n          )}\n          {turn === 3 && (\n            <MakeBid\n              deckUrl={deckUrl}\n              bidder={bidder}\n              bidData={bidData}\n              dealer={dealer}\n              sendBid={setBid3}\n            />\n          )}\n          {turn === 4 && (\n            <MakeBid\n              deckUrl={deckUrl}\n              bidder={bidder}\n              bidData={bidData}\n              dealer={dealer}\n              sendBid={setBid4}\n            />\n          )}\n          {turn === 5 && (\n            <SelectSuit\n              deckUrl={deckUrl}\n              bidData={bidData}\n              sendTrumpSuit={setTrumpSuit}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Bidding;\n","import { getCardValue } from \"./cardValues\";\n\nexport function getDealer(dealers) {\n  let order = dealers;\n  let dealer = order.shift();\n  // TODO fix the order here\n  order.push(dealer);\n  return { dealer, order };\n}\n\nexport function getWorstCard(cards, trump, lead) {\n  var worstCard = null;\n  var worstCardVal = 0 - 50;\n\n  for (let i = 0; i < cards.length; i++) {\n    var curCardVal = getCardValue(cards[i].code, trump, lead);\n    if (curCardVal > worstCardVal) {\n      worstCardVal = curCardVal;\n      worstCard = i;\n    }\n  }\n  return cards[worstCard];\n}\n\nexport function getBestCard(cards, trump, lead) {\n  var bestCard = null;\n  var bestCardVal = 50;\n\n  for (let i = 0; i < cards.length; i++) {\n    var curCardVal = getCardValue(cards[i].code, trump, lead);\n    if (curCardVal < bestCardVal) {\n      bestCardVal = curCardVal;\n      bestCard = i;\n    }\n  }\n\n  return cards[bestCard];\n}\n\nexport function getPlayerHand(url, player) {\n  var tempData;\n\n  const playerHand = fetch(url)\n    .then((res) => {\n      if (!res.ok) {\n        throw Error(\"Could not fetch data for that resource\");\n      }\n      return res.json();\n    })\n    .then((data) => {});\n  playerHand.then((data) => {\n    return data;\n  });\n\n  return tempData;\n}\n\n/** Moves the player's selected card to the discard pile and plays the card on the table\n * @param  {String} deckUrl URL to the deck being used\n * @param  {String} playerCard Card code of the card being played\n * @param  {Function} sendPlayerCard Calls back to play with the PlayerCard\n */\nexport async function playCardNow(deckUrl, playerCard, sendPlayerCard) {\n  await fetch(\n    deckUrl + \"/pile/discard/add/?cards=\" + playerCard.code\n  )\n    .then((res) => {\n      if (!res.ok) {\n        throw Error(\"Could not fetch data for that resource\");\n      }\n      return res.json();\n    })\n    .then((data) => {\n      return playerCard;\n    });\n  sendPlayerCard(playerCard);\n}\n\n/** finds the players position\n * @param  {String} player handle of the player \n * @param  {Array} order order of players\n */\n export function checkPlayerPosition(player, order) {\n  let num = order.indexOf(player) + 1;\n  return num;\n}","import { useState } from \"react\";\nimport useFetch from \"../useFetch\";\nimport { playCardNow } from \"../scripts\";\n\nconst PlayerTurn = ({\n  deckUrl,\n  player,\n  position,\n  leadSuit,\n  sendPlayCard,\n  trumpSuit,\n}) => {\n  const [playerCard, setPlayerCard] = useState(0);\n\n  const url = deckUrl + \"/pile/\" + player + \"/list/\";\n  const { data, error, isPending } = useFetch(url);\n\n  var cards = [];\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    playCardNow(deckUrl, cards[playerCard], sendPlayCard);\n  };\n\n  if (data) {\n    cards = data.piles[player].cards;\n  }\n\n  return (\n    <div>\n      {error && <div>{error}</div>}\n      {isPending && <div>Thinking...</div>}\n      {data && (\n        <form onSubmit={handleSubmit}>\n          <select\n            value={playerCard}\n            onChange={(e) => setPlayerCard(e.target.value)}\n          >\n            {cards[0] && <option value={0}>{cards[0].code}</option>}\n            {cards[1] && <option value={1}>{cards[1].code}</option>}\n            {cards[2] && <option value={2}>{cards[2].code}</option>}\n            {cards[3] && <option value={3}>{cards[3].code}</option>}\n            {cards[4] && <option value={4}>{cards[4].code}</option>}\n          </select>\n          <button>Play Card</button>\n        </form>\n      )}\n    </div>\n  );\n};\n\nexport default PlayerTurn;\n","import { useState } from \"react\";\nimport { getBestCard, getWorstCard } from \"../scripts\";\nimport useFetch from \"../useFetch\";\n\nconst Turn = ({\n  deckUrl,\n  player,\n  position,\n  leadSuit,\n  sendPlayCard,\n  trumpSuit,\n}) => {\n  const url = deckUrl + \"/pile/\" + player + \"/list/\";\n  const { data, error, isPending } = useFetch(url);\n  const [cardPlay, setCardPlay] = useState(null);\n\n  var cards = [];\n\n  if (data && !cardPlay) {\n    cards = data.piles[player].cards;\n    let taco = playCard(position, cards, trumpSuit, leadSuit);\n\n    fetch(deckUrl + \"/pile/discard/add/?cards=\" + taco.code)\n      .then((res) => {\n        if (!res.ok) {\n          throw Error(\"Could not fetch data for that resource\");\n        }\n        return res.json();\n      })\n      .then((data) => {\n        setCardPlay(taco);\n      });\n  }\n\n  if (data && cardPlay) {\n    sendPlayCard(cardPlay);\n  }\n\n  return (\n    <div>\n      {error && <div>{error}</div>}\n      {isPending && <div>Thinking...</div>}\n      {data && <div>Data</div>}\n    </div>\n  );\n};\n\nexport default Turn;\n\nfunction playCard(position, cards, trumpSuit, leadSuit) {\n  var card;\n  switch (position) {\n    case 1:\n      card = getWorstCard(cards, trumpSuit);\n      break;\n    case 2:\n      card = getWorstCard(cards, trumpSuit, leadSuit);\n      break;\n    case 3:\n      card = getBestCard(cards, trumpSuit, leadSuit);\n      break;\n    case 4:\n      card = getBestCard(cards, trumpSuit, leadSuit);\n      break;\n    default:\n      console.log(\"defaultHit\");\n  }\n  return card;\n}\n","import \"./bidding.css\";\n\n/** Display of bid information found on the discard and play views\n * @param  {Object} {bidData object of data related ot the bid\n * @param  {String} suit} Trump suit\n * @param  {Int}\n */\nconst BidInfo = ({ bidData }) => {\n  return (\n    <div className=\"bidInfo\">\n      <div className=\"bidInfoBox\">Bid Info</div>\n      <div className=\"bidInfoBox\">Bid: {bidData.highBid} </div>\n      <div className=\"bidInfoBox\">Bidder: {bidData.highBidder}</div>\n      <div className=\"bidInfoBox\">Suit: {bidData.trumpSuit}</div>\n    </div>\n  );\n};\n\nexport default BidInfo;\n","import { useState } from \"react\";\nimport { getCardValue } from \"../cardValues\";\nimport { getBookOrder } from \"../deckFuncs\";\nimport Hand from \"../Hand\";\nimport PlayerTurn from \"./PlayerTurn\";\nimport Turn from \"./Turn\";\nimport \"./play.css\";\nimport BidInfo from \"../Bidding/BidInfo\";\nimport ViewTable from \"../ViewTable\";\n\nconst Play = ({\n  deckUrl,\n  player,\n  order,\n  sendBookInfo,\n  book,\n  bookInfo,\n  bidData,\n}) => {\n  const [playCard1, setPlayCard1] = useState(\"\");\n  const [playCard2, setPlayCard2] = useState(\"\");\n  const [playCard3, setPlayCard3] = useState(\"\");\n  const [playCard4, setPlayCard4] = useState(\"\");\n  const [leadSuit, setLeadSuit] = useState(\"\");\n  const [turn, setTurn] = useState(1);\n\n  const playedCards = [playCard1, playCard2, playCard3, playCard4];\n  let bookNum = book;\n  let bookOrder = getBookOrder(bookInfo, order);\n\n  if (turn === 1 && playCard1) {\n    let guac = playCard1.code.charAt(1);\n    setLeadSuit(guac);\n    setTurn(2);\n  } else if (turn === 2 && playCard2) {\n    setTurn(3);\n  } else if (turn === 3 && playCard3) {\n    setTurn(4);\n  } else if (turn === 4 && playCard4) {\n    setTimeout(() => {\n      setTurn(5);\n    }, 2000);\n  } else if (turn === 5) {\n    let curBestValue = 50;\n    let winner;\n    for (let i = 0; i < playedCards.length; i++) {\n      let val = getCardValue(playedCards[i].code, bidData.trumpSuit, leadSuit);\n      if (val < curBestValue) {\n        curBestValue = val;\n        winner = i;\n      }\n    }\n    let highCard = playedCards[winner].code;\n    let winningPlayer = bookOrder[winner];\n    let tempLog = { bookNum, winningPlayer, highCard };\n    sendBookInfo(tempLog);\n  }\n\n  function whoseTurn(val, sendPlayCard) {\n    if (checkPlayerPosition(player, bookOrder) === val) {\n      return (\n        <PlayerTurn\n          deckUrl={deckUrl}\n          player={player}\n          position={val}\n          sendPlayCard={sendPlayCard}\n          trumpSuit={bidData.trumpSuit}\n          leadSuit={leadSuit}\n        />\n      );\n    } else {\n      return (\n        <Turn\n          deckUrl={deckUrl}\n          player={bookOrder[val - 1]}\n          position={val}\n          sendPlayCard={sendPlayCard}\n          trumpSuit={bidData.trumpSuit}\n          leadSuit={leadSuit}\n        />\n      );\n    }\n  }\n\n  function getPlayerCard(player, order) {\n    let num = order.indexOf(player);\n    return playedCards[num];\n  }\n\n  const players = [\"You\", \"Mario\", \"Partner\", \"Luigi\"];\n  function getActions(order) {\n    let actions = [];\n    for (let i = 0; i < players.length; i++) {\n      actions[i] = getPlayerCard(players[i], order);\n    }\n    return actions;\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"viewTableContainer\">\n        <ViewTable\n          stage=\"Playing\"\n          players={players}\n          actions={getActions(bookOrder)}\n          // bidData={bidData}\n        />\n      </div>\n\n      <div className=\"bidInfoContainer\">\n        <BidInfo bidData={bidData} />\n      </div>\n\n      <div className=\"playerWindowContainer\"></div>\n      <div className=\"playerwindow\">\n        <Hand deckUrl={deckUrl} player={player} />\n        <div className=\"playeraction\">\n          {turn > 0 && !playCard1 && whoseTurn(1, setPlayCard1)}\n          {turn > 1 && !playCard2 && whoseTurn(2, setPlayCard2)}\n          {turn > 2 && !playCard3 && whoseTurn(3, setPlayCard3)}\n          {turn > 3 && !playCard4 && whoseTurn(4, setPlayCard4)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Play;\n\n/** finds the human players position\n * @param  {String} player player name\n * @param  {Array} order order of players (currently fixed to roundOrder)\n */\nexport function checkPlayerPosition(player, order) {\n  let num = order.indexOf(player) + 1;\n  return num;\n}\n","import { useState } from \"react\";\nimport { getNewCards } from \"../deckFuncs\";\nimport useFetch from \"../useFetch\";\nimport \"./drawing.css\";\n\nconst Draw = ({ deckUrl, drawer, trumpSuit, sendDraw }) => {\n  const [discard0, setDiscard0] = useState(false);\n  const [discard1, setDiscard1] = useState(false);\n  const [discard2, setDiscard2] = useState(false);\n  const [discard3, setDiscard3] = useState(false);\n  const [discard4, setDiscard4] = useState(false);\n\n  const url = deckUrl + \"/pile/\" + drawer + \"/list/\";\n  const { data, error, isPending } = useFetch(url);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const discards = [discard0, discard1, discard2, discard3, discard4];\n    let discardCodes = [];\n    for (let i = 0; i < 5; i++) {\n      discards[i] && discardCodes.push(data.piles[drawer].cards[i].code);\n    }\n    getNewCards(deckUrl, discardCodes, drawer, sendDraw);\n  };\n\n  return (\n    <div>\n      {error && <div>{error}</div>}\n      {isPending && <div>Thinking...</div>}\n      {data && (\n        <form onSubmit={handleSubmit}>\n          <div className=\"discardhandwindow\">\n            <div className=\"discardHand\">\n              <div className=\"discardbox\">\n                <input\n                  type=\"checkbox\"\n                  name=\"card0\"\n                  onChange={(e) => setDiscard0(e.target.checked)}\n                  checked={discard0}\n                ></input>\n              </div>\n              <div className=\"discardbox\">\n                <input\n                  type=\"checkbox\"\n                  name=\"card1\"\n                  onChange={(e) => setDiscard1(e.target.checked)}\n                  checked={discard1}\n                ></input>\n              </div>\n              <div className=\"discardbox\">\n                <input\n                  type=\"checkbox\"\n                  name=\"card2\"\n                  onChange={(e) => setDiscard2(e.target.checked)}\n                  checked={discard2}\n                ></input>\n              </div>\n              <div className=\"discardbox\">\n                <input\n                  type=\"checkbox\"\n                  name=\"card3\"\n                  onChange={(e) => setDiscard3(e.target.checked)}\n                  checked={discard3}\n                ></input>\n              </div>\n              <div className=\"discardbox\">\n                <input\n                  type=\"checkbox\"\n                  name=\"card4\"\n                  onChange={(e) => setDiscard4(e.target.checked)}\n                  checked={discard4}\n                ></input>\n              </div>\n            </div>\n            <div className=\"playeraction\"></div>\n          </div>\n          <button>Discard Selected</button>\n        </form>\n      )}\n    </div>\n  );\n};\n\nexport default Draw;\n","import { useEffect, useState } from \"react\";\nimport { getNewCards } from \"../deckFuncs\";\nimport useFetch from \"../useFetch\";\n\nconst DrawCpu = ({ deckUrl, drawer, trumpSuit, sendDraw  }) => {\n\n    const [discardCount,setDiscardCount] = useState(null);\n    const [discardPending,setDiscardPending] = useState(true)\n    const url = deckUrl + \"/pile/\" + drawer + \"/list/\";\n    const { data, error, isPending } = useFetch(url);\n\n    useEffect(() => {\n        if (data) {\n            let card;\n        let cards = data.piles[drawer].cards;\n        let discardCodes = [];\n    \n        for (card of cards) {\n        if (card.code !== \"AH\" && card.code.charAt(1) !== trumpSuit.charAt(0)) {\n            discardCodes.push(card.code);\n      }\n    }\n        getNewCards(deckUrl, discardCodes, drawer, setDiscardCount, setDiscardPending);\n      }}, [deckUrl,drawer,trumpSuit,data]);\n\n    if (data && discardCount && !discardPending)  {\n        sendDraw(discardCount)\n    }\n\n    return (\n        <div>\n            {error && <div>{error}</div>}\n            {isPending && <div>Thinking....</div>}\n            {data && <div>Done</div>};\n        </div>\n    )\n}\n\nexport default DrawCpu;\n","import { useState } from \"react\";\nimport BidInfo from \"../Bidding/BidInfo\";\nimport { checkPlayerPosition } from \"../Play/Play\";\nimport Draw from \"./Draw\";\nimport DrawCpu from \"./DrawCpu\";\nimport ViewTable from \"../ViewTable\";\nimport Hand from \"../Hand\";\n\nconst Drawing = ({ deckUrl, roundOrder, bidData, sendDiscardData }) => {\n  const [draw1, setDraw1] = useState(\"\");\n  const [draw2, setDraw2] = useState(\"\");\n  const [draw3, setDraw3] = useState(\"\");\n  const [draw4, setDraw4] = useState(\"\");\n  const [turn, setTurn] = useState(1);\n\n  const player = \"You\";\n  switch (turn) {\n    case 1:\n      if (draw1) {\n        setTurn(2);\n      }\n      break;\n\n    case 2:\n      if (draw2) {\n        setTurn(3);\n      }\n      break;\n\n    case 3:\n      if (draw3) {\n        setTurn(4);\n      }\n      break;\n\n    case 4:\n      if (draw4) {\n        setTurn(5);\n      }\n      break;\n\n      case 5:\n      sendDiscardData(true);\n      break;\n\n      default:\n      console.log(\"default hit\");\n  }\n\n  let drawer = roundOrder[turn - 1];\n  function whoseRedraw(val, sendDraw) {\n    if (checkPlayerPosition(player, roundOrder) === val) {\n      return (\n        <Draw\n          deckUrl={deckUrl}\n          drawer={drawer}\n          trumpSuit={bidData.trumpSuit}\n          sendDraw={sendDraw}\n        />\n      );\n    } else {\n      return (\n        <DrawCpu\n          deckUrl={deckUrl}\n          drawer={drawer}\n          trumpSuit={bidData.trumpSuit}\n          sendDraw={sendDraw}\n        />\n      );\n    }\n  }\n\n  const draws = [draw1, draw2, draw3, draw4];\n\n  function getPlayerDraw(player, order) {\n    let num = order.indexOf(player);\n    return draws[num];\n  }\n\n  const players = [\"You\", \"Mario\", \"Partner\", \"Luigi\"];\n  function getActions(draws, roundOrder) {\n    let actions = [];\n    for (let i = 0; i < players.length; i++) {\n      actions[i] = getPlayerDraw(players[i], roundOrder);\n    }\n    return actions;\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"viewTableContainer\">\n        <ViewTable\n          stage=\"Drawing\"\n          players={players}\n          actions={getActions(draws, roundOrder)}\n          bidData={bidData}\n        />\n      </div>\n      <div className=\"bidInfoContainer\">\n        <BidInfo bidData={bidData} />\n      </div>\n      <div className=\"playerWindowContainer\">\n        <div className=\"playerwindow\">\n          <Hand deckUrl={deckUrl} player={player} />\n          {turn > 0 && !draw1 && whoseRedraw(1, setDraw1)}\n          {turn > 1 && !draw2 && whoseRedraw(2, setDraw2)}\n          {turn > 2 && !draw3 && whoseRedraw(3, setDraw3)}\n          {turn > 3 && !draw4 && whoseRedraw(4, setDraw4)}\n          {turn === 4 && draw4 && <div>Hey!</div>}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Drawing;\n","const PlayWinner = ({team1, team2, sendRoundScore, sendStage}) => {\n    return ( \n        <div classname=\"gamewindow\">\n        <div className=\"biddingwindow\">\n        <div className=\"windowheader\">Round Over!</div>\n        <div className=\"playwinner\">Team 1: {team1}</div>\n        <div className=\"playwinner\">Team 2: {team2}</div>\n      </div>\n\n        <div className=\"nextroundbutton\">\n              <button\n          onClick={() => {\n            sendRoundScore([team1, team2]);\n            sendStage(\"Over\");\n          }}\n        >\n          Next Round\n        </button>\n        </div>\n        </div>\n\n\n );\n}\n \nexport default PlayWinner;","import { useEffect, useState } from \"react\";\nimport { dealHands } from \"./deckFuncs\";\nimport { getCardValue } from \"./cardValues\";\nimport Bidding from \"./Bidding/Bidding\";\nimport Play from \"./Play/Play\";\nimport Drawing from \"./Drawing/Drawing\";\nimport PlayWinner from \"./Play/PlayWinner\";\n\nconst Round = ({ deckUrl, round, sendRoundScore, newRound }) => {\n  const [isPending, setIsPending] = useState(true);\n  const [bidData, setBidData] = useState(\"\");\n  const [stage, setStage] = useState(\"Deal\");\n  const [discardData, setDiscardData] = useState(false);\n  const [bookInfo, setBookInfo] = useState(null);\n  const [bookNum, setBookNum] = useState(1);\n  const [log, setLog] = useState([]);\n  const [roundOrder, setRoundOrder] = useState(null);\n\n  // const order = [\"You\", \"Mario\", \"Partner\", \"Luigi\"];\n\n  // TODO look into a way to reset states without having todo this...\n  if (newRound && stage === \"Over\") {\n    setIsPending(true);\n    setBidData(\"\");\n    setStage(\"Deal\");\n    setDiscardData(false);\n    setBookInfo(null);\n    setBookNum(1);\n    setLog([]);\n    setRoundOrder(null);\n    console.log(\"wipe\");\n  }\n\n  const player = \"You\";\n\n  useEffect(() => {\n    dealHands(deckUrl, round, setIsPending, setRoundOrder);\n  }, [deckUrl, round]);\n\n  if (deckUrl && stage === \"Deal\" && !isPending) {\n    setStage(\"Bid\");\n  }\n\n  if (bidData && stage === \"Bid\" && !isPending) {\n    setStage(\"Discard\");\n  }\n\n  if (discardData && stage === \"Discard\") {\n    setStage(\"Play\");\n  }\n\n  if (bookInfo) {\n    log[bookNum - 1] = bookInfo;\n    setLog(log);\n    setBookInfo(\"\");\n    setBookNum(bookNum + 1);\n  }\n\n  if (stage === \"Play\" && log.length === 5) {\n    setStage(\"Winner\");\n    setBookNum(0);\n  }\n\n  let team1BookCount = 0;\n  let team2BookCount = 0;\n\n  if (stage === \"Winner\") {\n    let highCard = 50;\n    let highCardWinner = null;\n\n    for (let x = 0; x < 5; x++) {\n      if (\n        log[x].winningPlayer === \"You\" ||\n        log[x].winningPlayer === \"Partner\"\n      ) {\n        team1BookCount += 1;\n      } else {\n        team2BookCount += 1;\n      }\n      let cardValue = getCardValue(log[x].highCard, bidData.trumpSuit);\n      if (highCard > cardValue) {\n        highCard = cardValue;\n        highCardWinner = log[x].winningPlayer;\n      }\n    }\n    if (highCardWinner === \"You\" || highCardWinner === \"Partner\") {\n      team1BookCount += 1;\n    } else {\n      team2BookCount += 1;\n    }\n\n    if (team1BookCount === 6) {\n      team1BookCount = 9;\n    }\n\n    if (team2BookCount === 6) {\n      team2BookCount = 9;\n    }\n\n    // TODO clean this up and turn it into a function\n    let bid = bidData.highBid;\n    if (bidData.highBidder === \"You\" || bidData.highBidder === \"Partner\") {\n      if (bid === \"15\" && team1BookCount < 3) {\n        team1BookCount = 0 - 3;\n      } else if (bid === \"20\" && team1BookCount < 4) {\n        team1BookCount = 0 - 4;\n      } else if (bid === \"25\" && team1BookCount < 5) {\n        team1BookCount = 0 - 5;\n      } else if (bid === \"30\" && team1BookCount < 6) {\n        team1BookCount = 0 - 6;\n      } else if (bid === \"30No\" && team2BookCount < 6) {\n        team1BookCount = 0 - 12;\n      }\n    } else {\n      if (bid === \"15\" && team2BookCount < 3) {\n        team2BookCount = 0 - 3;\n      } else if (bid === \"20\" && team2BookCount < 4) {\n        team2BookCount = 0 - 4;\n      } else if (bid === \"25\" && team2BookCount < 5) {\n        team2BookCount = 0 - 5;\n      } else if (bid === \"30\" && team2BookCount < 6) {\n        team2BookCount = 0 - 6;\n      } else if (bid === \"30No\" && team2BookCount < 6) {\n        team2BookCount = 0 - 12;\n      }\n    }\n  }\n\n  return (\n    <div className=\"content\">\n      {stage === \"Deal\" && isPending && (\n        <div className=\"gamewindow loading\">Dealing....</div>\n      )}\n      {stage === \"Bid\" && roundOrder && (\n        <div>\n          <Bidding\n            deckUrl={deckUrl}\n            bidOrder={roundOrder}\n            sendBidData={setBidData}\n          />\n        </div>\n      )}\n      {stage === \"Discard\" && (\n        <div>\n          <Drawing\n            deckUrl={deckUrl}\n            roundOrder={roundOrder}\n            bidData={bidData}\n            sendDiscardData={setDiscardData}\n          />\n        </div>\n      )}\n      {stage === \"Play\" && bookNum === 1 && (\n        <div>\n          <Play\n            deckUrl={deckUrl}\n            player={player}\n            order={roundOrder}\n            sendBookInfo={setBookInfo}\n            book={bookNum}\n            bookInfo={log}\n            bidData={bidData}\n          />\n        </div>\n      )}\n      {stage === \"Play\" && bookNum === 2 && (\n        <div>\n          <Play\n            deckUrl={deckUrl}\n            player={player}\n            order={roundOrder}\n            sendBookInfo={setBookInfo}\n            book={bookNum}\n            bookInfo={log}\n            bidData={bidData}\n          />\n        </div>\n      )}\n      {stage === \"Play\" && bookNum === 3 && (\n        <div>\n          <Play\n            deckUrl={deckUrl}\n            player={player}\n            order={roundOrder}\n            sendBookInfo={setBookInfo}\n            book={bookNum}\n            bookInfo={log}\n            bidData={bidData}\n          />\n        </div>\n      )}\n      {stage === \"Play\" && bookNum === 4 && (\n        <div>\n          <Play\n            deckUrl={deckUrl}\n            player={player}\n            order={roundOrder}\n            sendBookInfo={setBookInfo}\n            book={bookNum}\n            bookInfo={log}\n            bidData={bidData}\n          />\n        </div>\n      )}\n\n      {stage === \"Play\" && bookNum === 5 && (\n        <div>\n          <Play\n            deckUrl={deckUrl}\n            player={player}\n            order={roundOrder}\n            sendBookInfo={setBookInfo}\n            book={bookNum}\n            bookInfo={log}\n            bidData={bidData}\n          />\n        </div>\n      )}\n\n      {stage === \"Winner\" && (\n        <PlayWinner\n          team1={team1BookCount}\n          team2={team2BookCount}\n          sendRoundScore={sendRoundScore}\n          sendStage={setStage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Round;\n","import { useState } from \"react\";\nimport Score from \"./Score/Score\";\nimport Round from \"./Round\";\nimport useFetch from \"./useFetch\";\n\nconst Game = () => {\n  const { data, isPending, error } = useFetch(\n    \"https://deckofcardsapi.com/api/deck/new/\"\n  );\n\n  const [round, setRound] = useState(1);\n  const [gameScore, setGameScore] = useState([0, 0]);\n  const [roundScore, setRoundScore] = useState(null);\n  const [scoreLog, setScoreLog] = useState([]);\n  const [gameOver, setGameOver] = useState(\"\");\n\n  let deckUrl = null;\n  if (data) {\n    deckUrl = \"https://deckofcardsapi.com/api/deck/\" + data.deck_id;\n  }\n\n  let tempScore = [];\n\n  if (roundScore) {\n    scoreLog[round] = roundScore;\n    tempScore[0] = gameScore[0] + roundScore[0];\n    tempScore[1] = gameScore[1] + roundScore[1];\n    console.log(\"scoring\", tempScore, roundScore, round);\n    setScoreLog(scoreLog);\n    setGameScore(tempScore);\n    if (tempScore[0] > 30) {\n      setGameOver(\"Team 1 Wins\");\n    }\n    if (tempScore[1] > 30) {\n      setGameOver(\"Team 2 Wins\");\n    }\n    setRoundScore(null);\n    setRound(round + 1);\n  }\n\n  return (\n    <div className=\"gamewindow\">\n      {isPending && <div className=\"gamewindow loading\">Setting up...</div>}\n      {error && <div className=\"gamewindow loading\">{error}</div>}\n      {deckUrl && !gameOver && (\n        <div className=\"game\">\n          <Score round={round} gameScore={gameScore} />\n          <Round\n            deckUrl={deckUrl}\n            round={round}\n            sendRoundScore={setRoundScore}\n            newRound={true}\n          />\n        </div>\n      )}\n      {gameOver && (\n        <div>\n          <h1>{gameOver}</h1>\n          <h3>Team 1: {gameScore[0]}</h3>\n          <h3>Team 2: {gameScore[1]}</h3>\n          <button>Play Again</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Game;\n","import \"./footer.css\";\n\nconst Footer = () => {\n  return (\n    <div className=\"footer\">\n      <div className=\"footeritem\">\n        <a href=\"https://github.com/dsull29/45s\" target=\"new\">\n          GitHub Page\n        </a>\n      </div>\n      <div className=\"footeritem\">\n        <a href=\"https://github.com/dsull29/45s/issues\" target=\"new\">\n          Report a bug\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default Footer;\n","import { useState } from \"react\";\nimport Header from \"./Header/Header\";\nimport \"./App.css\";\nimport Game from \"./Game\";\nimport Footer from \"./Footer/Footer\";\n\nfunction App() {\n  const [inGame, setInGame] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      {inGame === false && (\n        <div className=\"gamewindow\">\n          <button className=\"startbutton\" onClick={() => setInGame(true)}>\n            Start Game\n          </button>\n        </div>\n      )}\n      {inGame && <Game />}\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}